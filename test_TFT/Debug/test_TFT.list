
test_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd4  08005fd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005fd4  08005fd4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fd4  08005fd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08005fec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08005fec  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad83  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b3  00000000  00000000  0002adbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e51  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bee5  00000000  00000000  00043a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889ca  00000000  00000000  0004f97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000d8398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080051a0 	.word	0x080051a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080051a0 	.word	0x080051a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f003 fe58 	bl	8003e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f822 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b6 	bl	80002c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f864 	bl	8000228 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000160:	480c      	ldr	r0, [pc, #48]	; (8000194 <main+0x48>)
 8000162:	f004 fd8d 	bl	8004c80 <HAL_TIM_Base_Start>


  ID = readID();
 8000166:	f001 fddd 	bl	8001d24 <readID>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <main+0x4c>)
 8000170:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000172:	2064      	movs	r0, #100	; 0x64
 8000174:	f003 fea8 	bl	8003ec8 <HAL_Delay>

  tft_init (ID);
 8000178:	4b07      	ldr	r3, [pc, #28]	; (8000198 <main+0x4c>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	4618      	mov	r0, r3
 800017e:	f001 f807 	bl	8001190 <tft_init>

  setRotation(0);
 8000182:	2000      	movs	r0, #0
 8000184:	f002 fc06 	bl	8002994 <setRotation>

  fillScreen(MAGENTA);
 8000188:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800018c:	f003 fb18 	bl	80037c0 <fillScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x44>
 8000192:	bf00      	nop
 8000194:	2000002c 	.word	0x2000002c
 8000198:	20000074 	.word	0x20000074

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	; 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f004 fff0 	bl	8005190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001be:	2301      	movs	r3, #1
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d0:	2302      	movs	r3, #2
 80001d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	4618      	mov	r0, r3
 80001e6:	f004 f913 	bl	8004410 <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f0:	f000 f8d6 	bl	80003a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f004 fb80 	bl	8004914 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021a:	f000 f8c1 	bl	80003a0 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000246:	4a1f      	ldr	r2, [pc, #124]	; (80002c4 <MX_TIM1_Init+0x9c>)
 8000248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <MX_TIM1_Init+0x98>)
 800024c:	2247      	movs	r2, #71	; 0x47
 800024e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800025c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000266:	2200      	movs	r2, #0
 8000268:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <MX_TIM1_Init+0x98>)
 800026c:	2200      	movs	r2, #0
 800026e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000270:	4813      	ldr	r0, [pc, #76]	; (80002c0 <MX_TIM1_Init+0x98>)
 8000272:	f004 fcb5 	bl	8004be0 <HAL_TIM_Base_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800027c:	f000 f890 	bl	80003a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	4619      	mov	r1, r3
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <MX_TIM1_Init+0x98>)
 800028e:	f004 fd41 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000298:	f000 f882 	bl	80003a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	4619      	mov	r1, r3
 80002a8:	4805      	ldr	r0, [pc, #20]	; (80002c0 <MX_TIM1_Init+0x98>)
 80002aa:	f004 feef 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80002b4:	f000 f874 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	3718      	adds	r7, #24
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	40012c00 	.word	0x40012c00

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <MX_GPIO_Init+0xcc>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <MX_GPIO_Init+0xcc>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a20      	ldr	r2, [pc, #128]	; (8000394 <MX_GPIO_Init+0xcc>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000324:	2200      	movs	r2, #0
 8000326:	f248 012f 	movw	r1, #32815	; 0x802f
 800032a:	481b      	ldr	r0, [pc, #108]	; (8000398 <MX_GPIO_Init+0xd0>)
 800032c:	f004 f858 	bl	80043e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8000330:	2200      	movs	r2, #0
 8000332:	217b      	movs	r1, #123	; 0x7b
 8000334:	4819      	ldr	r0, [pc, #100]	; (800039c <MX_GPIO_Init+0xd4>)
 8000336:	f004 f853 	bl	80043e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800033a:	f248 032f 	movw	r3, #32815	; 0x802f
 800033e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
 800034a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	4811      	ldr	r0, [pc, #68]	; (8000398 <MX_GPIO_Init+0xd0>)
 8000354:	f003 fec0 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000358:	2310      	movs	r3, #16
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <MX_GPIO_Init+0xd0>)
 800036c:	f003 feb4 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8000370:	237b      	movs	r3, #123	; 0x7b
 8000372:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_GPIO_Init+0xd4>)
 8000388:	f003 fea6 	bl	80040d8 <HAL_GPIO_Init>

}
 800038c:	bf00      	nop
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40021000 	.word	0x40021000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <HAL_MspInit+0x5c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_MspInit+0x5c>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <HAL_MspInit+0x60>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <HAL_MspInit+0x60>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000
 800040c:	40010000 	.word	0x40010000

08000410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <HAL_TIM_Base_MspInit+0x34>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d10b      	bne.n	800043a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <HAL_TIM_Base_MspInit+0x38>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <HAL_TIM_Base_MspInit+0x38>)
 8000428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_TIM_Base_MspInit+0x38>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40012c00 	.word	0x40012c00
 8000448:	40021000 	.word	0x40021000

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000492:	f003 fcfd 	bl	8003e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}

0800049a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
	...

080004a8 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <delay+0x2c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80004b8:	bf00      	nop
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <delay+0x2c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d8f9      	bhi.n	80004ba <delay+0x12>
}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	2000002c 	.word	0x2000002c

080004d8 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f003 ff78 	bl	80043e0 <HAL_GPIO_WritePin>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f003 ff68 	bl	80043e0 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4619      	mov	r1, r3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f003 fdce 	bl	80040d8 <HAL_GPIO_Init>
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f003 fdb6 	bl	80040d8 <HAL_GPIO_Init>
}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <width+0x10>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000004 	.word	0x20000004

08000588 <height>:

uint16_t height(void)
{ return _height; }
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <height+0x10>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000006 	.word	0x20000006

0800059c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80005a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b21a      	sxth	r2, r3
 80005c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80005e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	115b      	asrs	r3, r3, #5
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	105b      	asrs	r3, r3, #1
 8000602:	b21b      	sxth	r3, r3
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	121b      	asrs	r3, r3, #8
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f023 0307 	bic.w	r3, r3, #7
 800062e:	b2db      	uxtb	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	10db      	asrs	r3, r3, #3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f023 0303 	bic.w	r3, r3, #3
 800064e:	b2db      	uxtb	r3, r3
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	b2db      	uxtb	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21b      	sxth	r3, r3
 800068c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	b21a      	sxth	r2, r3
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	b21b      	sxth	r3, r3
 800069c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80006be:	b580      	push	{r7, lr}
 80006c0:	b086      	sub	sp, #24
 80006c2:	af02      	add	r7, sp, #8
 80006c4:	4603      	mov	r3, r0
 80006c6:	460a      	mov	r2, r1
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4613      	mov	r3, r2
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	f107 020e 	add.w	r2, r7, #14
 80006d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80006da:	2301      	movs	r3, #1
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	f001 fc60 	bl	8001fa4 <readGRAM>
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	460a      	mov	r2, r1
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80bb      	strh	r3, [r7, #4]
 80006fe:	88ba      	ldrh	r2, [r7, #4]
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f8f5 	bl	80008f4 <writecmddata>
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	6039      	str	r1, [r7, #0]
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	4613      	mov	r3, r2
 8000720:	717b      	strb	r3, [r7, #5]
 8000722:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f99c 	bl	8000a68 <WriteCmdParamN>
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800073c:	2101      	movs	r1, #1
 800073e:	4811      	ldr	r0, [pc, #68]	; (8000784 <setReadDir+0x4c>)
 8000740:	f7ff feea 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000744:	2102      	movs	r1, #2
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <setReadDir+0x4c>)
 8000748:	f7ff fee6 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800074c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <setReadDir+0x50>)
 8000752:	f7ff fee1 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000756:	2108      	movs	r1, #8
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <setReadDir+0x4c>)
 800075a:	f7ff fedd 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800075e:	2110      	movs	r1, #16
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <setReadDir+0x4c>)
 8000762:	f7ff fed9 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000766:	2120      	movs	r1, #32
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <setReadDir+0x4c>)
 800076a:	f7ff fed5 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <setReadDir+0x4c>)
 8000772:	f7ff fed1 	bl	8000518 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000776:	2120      	movs	r1, #32
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <setReadDir+0x50>)
 800077a:	f7ff fecd 	bl	8000518 <PIN_INPUT>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40010800 	.word	0x40010800

0800078c <setWriteDir>:

void setWriteDir (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000790:	2101      	movs	r1, #1
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <setWriteDir+0x4c>)
 8000794:	f7ff fed6 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000798:	2102      	movs	r1, #2
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <setWriteDir+0x4c>)
 800079c:	f7ff fed2 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80007a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <setWriteDir+0x50>)
 80007a6:	f7ff fecd 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80007aa:	2108      	movs	r1, #8
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <setWriteDir+0x4c>)
 80007ae:	f7ff fec9 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80007b2:	2110      	movs	r1, #16
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <setWriteDir+0x4c>)
 80007b6:	f7ff fec5 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80007ba:	2120      	movs	r1, #32
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <setWriteDir+0x4c>)
 80007be:	f7ff fec1 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <setWriteDir+0x4c>)
 80007c6:	f7ff febd 	bl	8000544 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80007ca:	2120      	movs	r1, #32
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <setWriteDir+0x50>)
 80007ce:	f7ff feb9 	bl	8000544 <PIN_OUTPUT>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40010800 	.word	0x40010800

080007e0 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff14 	bl	800061a <color565_to_r>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff1e 	bl	800063a <color565_to_g>
 80007fe:	4603      	mov	r3, r0
 8000800:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff28 	bl	800065a <color565_to_b>
 800080a:	4603      	mov	r3, r0
 800080c:	737b      	strb	r3, [r7, #13]
    write8(r);
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <write24+0x108>)
 8000810:	4a36      	ldr	r2, [pc, #216]	; (80008ec <write24+0x10c>)
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <write24+0x110>)
 8000816:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	035b      	lsls	r3, r3, #13
 8000820:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	109b      	asrs	r3, r3, #2
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	431a      	orrs	r2, r3
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <write24+0x108>)
 8000830:	611a      	str	r2, [r3, #16]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <write24+0x110>)
 8000836:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800083a:	6113      	str	r3, [r2, #16]
 800083c:	2108      	movs	r1, #8
 800083e:	482a      	ldr	r0, [pc, #168]	; (80008e8 <write24+0x108>)
 8000840:	f7ff fe4a 	bl	80004d8 <PIN_LOW>
 8000844:	2108      	movs	r1, #8
 8000846:	4828      	ldr	r0, [pc, #160]	; (80008e8 <write24+0x108>)
 8000848:	f7ff fe56 	bl	80004f8 <PIN_HIGH>
 800084c:	2108      	movs	r1, #8
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <write24+0x108>)
 8000850:	f7ff fe52 	bl	80004f8 <PIN_HIGH>
    write8(g);
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <write24+0x108>)
 8000856:	4a25      	ldr	r2, [pc, #148]	; (80008ec <write24+0x10c>)
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <write24+0x110>)
 800085c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	035b      	lsls	r3, r3, #13
 8000866:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	109b      	asrs	r3, r3, #2
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	431a      	orrs	r2, r3
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <write24+0x108>)
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <write24+0x110>)
 800087c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000880:	6113      	str	r3, [r2, #16]
 8000882:	2108      	movs	r1, #8
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <write24+0x108>)
 8000886:	f7ff fe27 	bl	80004d8 <PIN_LOW>
 800088a:	2108      	movs	r1, #8
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <write24+0x108>)
 800088e:	f7ff fe33 	bl	80004f8 <PIN_HIGH>
 8000892:	2108      	movs	r1, #8
 8000894:	4814      	ldr	r0, [pc, #80]	; (80008e8 <write24+0x108>)
 8000896:	f7ff fe2f 	bl	80004f8 <PIN_HIGH>
    write8(b);
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <write24+0x108>)
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <write24+0x10c>)
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <write24+0x110>)
 80008a2:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	7b7b      	ldrb	r3, [r7, #13]
 80008aa:	035b      	lsls	r3, r3, #13
 80008ac:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	109b      	asrs	r3, r3, #2
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	431a      	orrs	r2, r3
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <write24+0x108>)
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	7b7b      	ldrb	r3, [r7, #13]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <write24+0x110>)
 80008c2:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80008c6:	6113      	str	r3, [r2, #16]
 80008c8:	2108      	movs	r1, #8
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <write24+0x108>)
 80008cc:	f7ff fe04 	bl	80004d8 <PIN_LOW>
 80008d0:	2108      	movs	r1, #8
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <write24+0x108>)
 80008d4:	f7ff fe10 	bl	80004f8 <PIN_HIGH>
 80008d8:	2108      	movs	r1, #8
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <write24+0x108>)
 80008dc:	f7ff fe0c 	bl	80004f8 <PIN_HIGH>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40010800 	.word	0x40010800
 80008ec:	80200000 	.word	0x80200000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	80fb      	strh	r3, [r7, #6]
 8000900:	4613      	mov	r3, r2
 8000902:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000904:	2102      	movs	r1, #2
 8000906:	4855      	ldr	r0, [pc, #340]	; (8000a5c <writecmddata+0x168>)
 8000908:	f7ff fde6 	bl	80004d8 <PIN_LOW>
    WriteCmd(cmd);
 800090c:	2104      	movs	r1, #4
 800090e:	4853      	ldr	r0, [pc, #332]	; (8000a5c <writecmddata+0x168>)
 8000910:	f7ff fde2 	bl	80004d8 <PIN_LOW>
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	73bb      	strb	r3, [r7, #14]
 8000920:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <writecmddata+0x168>)
 8000922:	4a4f      	ldr	r2, [pc, #316]	; (8000a60 <writecmddata+0x16c>)
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <writecmddata+0x170>)
 8000928:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	035b      	lsls	r3, r3, #13
 8000932:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	109b      	asrs	r3, r3, #2
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	431a      	orrs	r2, r3
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <writecmddata+0x168>)
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <writecmddata+0x170>)
 8000948:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800094c:	6113      	str	r3, [r2, #16]
 800094e:	2108      	movs	r1, #8
 8000950:	4842      	ldr	r0, [pc, #264]	; (8000a5c <writecmddata+0x168>)
 8000952:	f7ff fdc1 	bl	80004d8 <PIN_LOW>
 8000956:	2108      	movs	r1, #8
 8000958:	4840      	ldr	r0, [pc, #256]	; (8000a5c <writecmddata+0x168>)
 800095a:	f7ff fdcd 	bl	80004f8 <PIN_HIGH>
 800095e:	2108      	movs	r1, #8
 8000960:	483e      	ldr	r0, [pc, #248]	; (8000a5c <writecmddata+0x168>)
 8000962:	f7ff fdc9 	bl	80004f8 <PIN_HIGH>
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <writecmddata+0x168>)
 8000968:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <writecmddata+0x16c>)
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <writecmddata+0x170>)
 800096e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	035b      	lsls	r3, r3, #13
 8000978:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	109b      	asrs	r3, r3, #2
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	431a      	orrs	r2, r3
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <writecmddata+0x168>)
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	4a35      	ldr	r2, [pc, #212]	; (8000a64 <writecmddata+0x170>)
 800098e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000992:	6113      	str	r3, [r2, #16]
 8000994:	2108      	movs	r1, #8
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <writecmddata+0x168>)
 8000998:	f7ff fd9e 	bl	80004d8 <PIN_LOW>
 800099c:	2108      	movs	r1, #8
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <writecmddata+0x168>)
 80009a0:	f7ff fdaa 	bl	80004f8 <PIN_HIGH>
 80009a4:	2108      	movs	r1, #8
 80009a6:	482d      	ldr	r0, [pc, #180]	; (8000a5c <writecmddata+0x168>)
 80009a8:	f7ff fda6 	bl	80004f8 <PIN_HIGH>
 80009ac:	2104      	movs	r1, #4
 80009ae:	482b      	ldr	r0, [pc, #172]	; (8000a5c <writecmddata+0x168>)
 80009b0:	f7ff fda2 	bl	80004f8 <PIN_HIGH>
    WriteData(dat);
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	737b      	strb	r3, [r7, #13]
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	733b      	strb	r3, [r7, #12]
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <writecmddata+0x168>)
 80009c2:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <writecmddata+0x16c>)
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <writecmddata+0x170>)
 80009c8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	7b7b      	ldrb	r3, [r7, #13]
 80009d0:	035b      	lsls	r3, r3, #13
 80009d2:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80009d6:	7b7b      	ldrb	r3, [r7, #13]
 80009d8:	109b      	asrs	r3, r3, #2
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	431a      	orrs	r2, r3
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <writecmddata+0x168>)
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <writecmddata+0x170>)
 80009e8:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80009ec:	6113      	str	r3, [r2, #16]
 80009ee:	2108      	movs	r1, #8
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <writecmddata+0x168>)
 80009f2:	f7ff fd71 	bl	80004d8 <PIN_LOW>
 80009f6:	2108      	movs	r1, #8
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <writecmddata+0x168>)
 80009fa:	f7ff fd7d 	bl	80004f8 <PIN_HIGH>
 80009fe:	2108      	movs	r1, #8
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <writecmddata+0x168>)
 8000a02:	f7ff fd79 	bl	80004f8 <PIN_HIGH>
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <writecmddata+0x168>)
 8000a08:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <writecmddata+0x16c>)
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <writecmddata+0x170>)
 8000a0e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	7b3b      	ldrb	r3, [r7, #12]
 8000a16:	035b      	lsls	r3, r3, #13
 8000a18:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000a1c:	7b3b      	ldrb	r3, [r7, #12]
 8000a1e:	109b      	asrs	r3, r3, #2
 8000a20:	f003 0320 	and.w	r3, r3, #32
 8000a24:	431a      	orrs	r2, r3
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <writecmddata+0x168>)
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	7b3b      	ldrb	r3, [r7, #12]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <writecmddata+0x170>)
 8000a2e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000a32:	6113      	str	r3, [r2, #16]
 8000a34:	2108      	movs	r1, #8
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <writecmddata+0x168>)
 8000a38:	f7ff fd4e 	bl	80004d8 <PIN_LOW>
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <writecmddata+0x168>)
 8000a40:	f7ff fd5a 	bl	80004f8 <PIN_HIGH>
 8000a44:	2108      	movs	r1, #8
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <writecmddata+0x168>)
 8000a48:	f7ff fd56 	bl	80004f8 <PIN_HIGH>
    CS_IDLE;
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <writecmddata+0x168>)
 8000a50:	f7ff fd52 	bl	80004f8 <PIN_HIGH>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	80200000 	.word	0x80200000
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	603a      	str	r2, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
 8000a74:	460b      	mov	r3, r1
 8000a76:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4878      	ldr	r0, [pc, #480]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000a7c:	f7ff fd2c 	bl	80004d8 <PIN_LOW>
    WriteCmd(cmd);
 8000a80:	2104      	movs	r1, #4
 8000a82:	4876      	ldr	r0, [pc, #472]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000a84:	f7ff fd28 	bl	80004d8 <PIN_LOW>
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	73bb      	strb	r3, [r7, #14]
 8000a94:	4b71      	ldr	r3, [pc, #452]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000a96:	4a72      	ldr	r2, [pc, #456]	; (8000c60 <WriteCmdParamN+0x1f8>)
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	4b72      	ldr	r3, [pc, #456]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000a9c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	035b      	lsls	r3, r3, #13
 8000aa6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	109b      	asrs	r3, r3, #2
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4a6a      	ldr	r2, [pc, #424]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000abc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000ac0:	6113      	str	r3, [r2, #16]
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4865      	ldr	r0, [pc, #404]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000ac6:	f7ff fd07 	bl	80004d8 <PIN_LOW>
 8000aca:	2108      	movs	r1, #8
 8000acc:	4863      	ldr	r0, [pc, #396]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000ace:	f7ff fd13 	bl	80004f8 <PIN_HIGH>
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4861      	ldr	r0, [pc, #388]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000ad6:	f7ff fd0f 	bl	80004f8 <PIN_HIGH>
 8000ada:	4b60      	ldr	r3, [pc, #384]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000adc:	4a60      	ldr	r2, [pc, #384]	; (8000c60 <WriteCmdParamN+0x1f8>)
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000ae2:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	035b      	lsls	r3, r3, #13
 8000aec:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	109b      	asrs	r3, r3, #2
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	431a      	orrs	r2, r3
 8000afa:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	4a58      	ldr	r2, [pc, #352]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000b02:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000b06:	6113      	str	r3, [r2, #16]
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4854      	ldr	r0, [pc, #336]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b0c:	f7ff fce4 	bl	80004d8 <PIN_LOW>
 8000b10:	2108      	movs	r1, #8
 8000b12:	4852      	ldr	r0, [pc, #328]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b14:	f7ff fcf0 	bl	80004f8 <PIN_HIGH>
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4850      	ldr	r0, [pc, #320]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b1c:	f7ff fcec 	bl	80004f8 <PIN_HIGH>
 8000b20:	2104      	movs	r1, #4
 8000b22:	484e      	ldr	r0, [pc, #312]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b24:	f7ff fce8 	bl	80004f8 <PIN_HIGH>
    while (N-- > 0) {
 8000b28:	e086      	b.n	8000c38 <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	603a      	str	r2, [r7, #0]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8000b34:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b36:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <WriteCmdParamN+0x1f8>)
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000b3c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	7b7b      	ldrb	r3, [r7, #13]
 8000b44:	035b      	lsls	r3, r3, #13
 8000b46:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	109b      	asrs	r3, r3, #2
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	431a      	orrs	r2, r3
 8000b54:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000b5c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000b60:	6113      	str	r3, [r2, #16]
 8000b62:	2108      	movs	r1, #8
 8000b64:	483d      	ldr	r0, [pc, #244]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b66:	f7ff fcb7 	bl	80004d8 <PIN_LOW>
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	483b      	ldr	r0, [pc, #236]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b6e:	f7ff fcc3 	bl	80004f8 <PIN_HIGH>
 8000b72:	2108      	movs	r1, #8
 8000b74:	4839      	ldr	r0, [pc, #228]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b76:	f7ff fcbf 	bl	80004f8 <PIN_HIGH>
        if (N && is8347) {
 8000b7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d05a      	beq.n	8000c38 <WriteCmdParamN+0x1d0>
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <WriteCmdParamN+0x200>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d056      	beq.n	8000c38 <WriteCmdParamN+0x1d0>
            cmd++;
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8000b90:	2104      	movs	r1, #4
 8000b92:	4832      	ldr	r0, [pc, #200]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000b94:	f7ff fca0 	bl	80004d8 <PIN_LOW>
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	733b      	strb	r3, [r7, #12]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	72fb      	strb	r3, [r7, #11]
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <WriteCmdParamN+0x1f8>)
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000bac:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	7b3b      	ldrb	r3, [r7, #12]
 8000bb4:	035b      	lsls	r3, r3, #13
 8000bb6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000bba:	7b3b      	ldrb	r3, [r7, #12]
 8000bbc:	109b      	asrs	r3, r3, #2
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000bcc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000bd0:	6113      	str	r3, [r2, #16]
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4821      	ldr	r0, [pc, #132]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000bd6:	f7ff fc7f 	bl	80004d8 <PIN_LOW>
 8000bda:	2108      	movs	r1, #8
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000bde:	f7ff fc8b 	bl	80004f8 <PIN_HIGH>
 8000be2:	2108      	movs	r1, #8
 8000be4:	481d      	ldr	r0, [pc, #116]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000be6:	f7ff fc87 	bl	80004f8 <PIN_HIGH>
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <WriteCmdParamN+0x1f8>)
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000bf2:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	7afb      	ldrb	r3, [r7, #11]
 8000bfa:	035b      	lsls	r3, r3, #13
 8000bfc:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	109b      	asrs	r3, r3, #2
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <WriteCmdParamN+0x1fc>)
 8000c12:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000c16:	6113      	str	r3, [r2, #16]
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c1c:	f7ff fc5c 	bl	80004d8 <PIN_LOW>
 8000c20:	2108      	movs	r1, #8
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c24:	f7ff fc68 	bl	80004f8 <PIN_HIGH>
 8000c28:	2108      	movs	r1, #8
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c2c:	f7ff fc64 	bl	80004f8 <PIN_HIGH>
 8000c30:	2104      	movs	r1, #4
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c34:	f7ff fc60 	bl	80004f8 <PIN_HIGH>
    while (N-- > 0) {
 8000c38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	3a01      	subs	r2, #1
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	717a      	strb	r2, [r7, #5]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f73f af70 	bgt.w	8000b2a <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <WriteCmdParamN+0x1f4>)
 8000c4e:	f7ff fc53 	bl	80004f8 <PIN_HIGH>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	80200000 	.word	0x80200000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	20000077 	.word	0x20000077

08000c6c <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	4608      	mov	r0, r1
 8000c76:	4611      	mov	r1, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	717b      	strb	r3, [r7, #5]
 8000c86:	4613      	mov	r3, r2
 8000c88:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	733b      	strb	r3, [r7, #12]
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	737b      	strb	r3, [r7, #13]
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	73bb      	strb	r3, [r7, #14]
 8000c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c9a:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fede 	bl	8000a68 <WriteCmdParamN>
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}

08000cb4 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000cc4:	e046      	b.n	8000d54 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	627a      	str	r2, [r7, #36]	; 0x24
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	627a      	str	r2, [r7, #36]	; 0x24
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8000cde:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce4:	d108      	bne.n	8000cf8 <init_table+0x44>
        {
            delay(len);
 8000ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbdc 	bl	80004a8 <delay>
            len = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000cf6:	e024      	b.n	8000d42 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000cfe:	e010      	b.n	8000d22 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	627a      	str	r2, [r7, #36]	; 0x24
 8000d06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8000d10:	443b      	add	r3, r7
 8000d12:	460a      	mov	r2, r1
 8000d14:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8000d18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000d22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3e8      	bcc.n	8000d00 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8000d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8000d38:	f107 0208 	add.w	r2, r7, #8
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe93 	bl	8000a68 <WriteCmdParamN>
        }
        size -= len + 2;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8000d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dcb4      	bgt.n	8000cc6 <init_table+0x12>
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8000d76:	e01d      	b.n	8000db4 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1c9a      	adds	r2, r3, #2
 8000d7c:	60fa      	str	r2, [r7, #12]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1c9a      	adds	r2, r3, #2
 8000d86:	60fa      	str	r2, [r7, #12]
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d104      	bne.n	8000da0 <init_table16+0x3a>
            delay(d);
 8000d96:	893b      	ldrh	r3, [r7, #8]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb85 	bl	80004a8 <delay>
 8000d9e:	e005      	b.n	8000dac <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8000da0:	893a      	ldrh	r2, [r7, #8]
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fda4 	bl	80008f4 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	3b04      	subs	r3, #4
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8000db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dcdd      	bgt.n	8000d78 <init_table16+0x12>
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <reset>:



void reset(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <reset+0x84>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000dd2:	f7ff fcdb 	bl	800078c <setWriteDir>
    CTL_INIT();
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	481d      	ldr	r0, [pc, #116]	; (8000e50 <reset+0x88>)
 8000dda:	f7ff fbb3 	bl	8000544 <PIN_OUTPUT>
 8000dde:	2108      	movs	r1, #8
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <reset+0x88>)
 8000de2:	f7ff fbaf 	bl	8000544 <PIN_OUTPUT>
 8000de6:	2104      	movs	r1, #4
 8000de8:	4819      	ldr	r0, [pc, #100]	; (8000e50 <reset+0x88>)
 8000dea:	f7ff fbab 	bl	8000544 <PIN_OUTPUT>
 8000dee:	2102      	movs	r1, #2
 8000df0:	4817      	ldr	r0, [pc, #92]	; (8000e50 <reset+0x88>)
 8000df2:	f7ff fba7 	bl	8000544 <PIN_OUTPUT>
 8000df6:	2101      	movs	r1, #1
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <reset+0x88>)
 8000dfa:	f7ff fba3 	bl	8000544 <PIN_OUTPUT>
    CS_IDLE;
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <reset+0x88>)
 8000e02:	f7ff fb79 	bl	80004f8 <PIN_HIGH>
    RD_IDLE;
 8000e06:	2110      	movs	r1, #16
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <reset+0x88>)
 8000e0a:	f7ff fb75 	bl	80004f8 <PIN_HIGH>
    WR_IDLE;
 8000e0e:	2108      	movs	r1, #8
 8000e10:	480f      	ldr	r0, [pc, #60]	; (8000e50 <reset+0x88>)
 8000e12:	f7ff fb71 	bl	80004f8 <PIN_HIGH>
    RESET_IDLE;
 8000e16:	2101      	movs	r1, #1
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <reset+0x88>)
 8000e1a:	f7ff fb6d 	bl	80004f8 <PIN_HIGH>
    delay(50);
 8000e1e:	2032      	movs	r0, #50	; 0x32
 8000e20:	f7ff fb42 	bl	80004a8 <delay>
    RESET_ACTIVE;
 8000e24:	2101      	movs	r1, #1
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <reset+0x88>)
 8000e28:	f7ff fb56 	bl	80004d8 <PIN_LOW>
    delay(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f7ff fb3b 	bl	80004a8 <delay>
    RESET_IDLE;
 8000e32:	2101      	movs	r1, #1
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <reset+0x88>)
 8000e36:	f7ff fb5f 	bl	80004f8 <PIN_HIGH>
    delay(100);
 8000e3a:	2064      	movs	r0, #100	; 0x64
 8000e3c:	f7ff fb34 	bl	80004a8 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8000e40:	2100      	movs	r1, #0
 8000e42:	20b0      	movs	r0, #176	; 0xb0
 8000e44:	f7ff fc53 	bl	80006ee <WriteCmdData>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000076 	.word	0x20000076
 8000e50:	40010800 	.word	0x40010800

08000e54 <read16bits>:

static uint16_t read16bits(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4862      	ldr	r0, [pc, #392]	; (8000fe8 <read16bits+0x194>)
 8000e5e:	f7ff fb4b 	bl	80004f8 <PIN_HIGH>
 8000e62:	2110      	movs	r1, #16
 8000e64:	4860      	ldr	r0, [pc, #384]	; (8000fe8 <read16bits+0x194>)
 8000e66:	f7ff fb37 	bl	80004d8 <PIN_LOW>
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	485e      	ldr	r0, [pc, #376]	; (8000fe8 <read16bits+0x194>)
 8000e6e:	f7ff fb33 	bl	80004d8 <PIN_LOW>
 8000e72:	2110      	movs	r1, #16
 8000e74:	485c      	ldr	r0, [pc, #368]	; (8000fe8 <read16bits+0x194>)
 8000e76:	f7ff fb2f 	bl	80004d8 <PIN_LOW>
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	485a      	ldr	r0, [pc, #360]	; (8000fe8 <read16bits+0x194>)
 8000e7e:	f7ff fb2b 	bl	80004d8 <PIN_LOW>
 8000e82:	4b5a      	ldr	r3, [pc, #360]	; (8000fec <read16bits+0x198>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b57      	ldr	r3, [pc, #348]	; (8000fec <read16bits+0x198>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <read16bits+0x194>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	0b5b      	lsrs	r3, r3, #13
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <read16bits+0x198>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <read16bits+0x198>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <read16bits+0x198>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <read16bits+0x198>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <read16bits+0x194>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	2110      	movs	r1, #16
 8000f06:	4838      	ldr	r0, [pc, #224]	; (8000fe8 <read16bits+0x194>)
 8000f08:	f7ff faf6 	bl	80004f8 <PIN_HIGH>
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4836      	ldr	r0, [pc, #216]	; (8000fe8 <read16bits+0x194>)
 8000f10:	f7ff faf2 	bl	80004f8 <PIN_HIGH>
    READ_8(lo);
 8000f14:	2110      	movs	r1, #16
 8000f16:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <read16bits+0x194>)
 8000f18:	f7ff faee 	bl	80004f8 <PIN_HIGH>
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <read16bits+0x194>)
 8000f20:	f7ff fada 	bl	80004d8 <PIN_LOW>
 8000f24:	2110      	movs	r1, #16
 8000f26:	4830      	ldr	r0, [pc, #192]	; (8000fe8 <read16bits+0x194>)
 8000f28:	f7ff fad6 	bl	80004d8 <PIN_LOW>
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	482e      	ldr	r0, [pc, #184]	; (8000fe8 <read16bits+0x194>)
 8000f30:	f7ff fad2 	bl	80004d8 <PIN_LOW>
 8000f34:	2110      	movs	r1, #16
 8000f36:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <read16bits+0x194>)
 8000f38:	f7ff face 	bl	80004d8 <PIN_LOW>
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <read16bits+0x198>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <read16bits+0x198>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <read16bits+0x194>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	0b5b      	lsrs	r3, r3, #13
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <read16bits+0x198>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <read16bits+0x198>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <read16bits+0x198>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <read16bits+0x198>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <read16bits+0x194>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	717b      	strb	r3, [r7, #5]
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <read16bits+0x194>)
 8000fc2:	f7ff fa99 	bl	80004f8 <PIN_HIGH>
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <read16bits+0x194>)
 8000fca:	f7ff fa95 	bl	80004f8 <PIN_HIGH>
    return (ret << 8) | lo;
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001000:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <readReg+0x10c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <readReg+0x1c>
        reset();
 8001008:	f7ff fede 	bl	8000dc8 <reset>
    CS_ACTIVE;
 800100c:	2102      	movs	r1, #2
 800100e:	483c      	ldr	r0, [pc, #240]	; (8001100 <readReg+0x110>)
 8001010:	f7ff fa62 	bl	80004d8 <PIN_LOW>
    WriteCmd(reg);
 8001014:	2104      	movs	r1, #4
 8001016:	483a      	ldr	r0, [pc, #232]	; (8001100 <readReg+0x110>)
 8001018:	f7ff fa5e 	bl	80004d8 <PIN_LOW>
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <readReg+0x110>)
 800102a:	4a36      	ldr	r2, [pc, #216]	; (8001104 <readReg+0x114>)
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <readReg+0x118>)
 8001030:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	035b      	lsls	r3, r3, #13
 800103a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	109b      	asrs	r3, r3, #2
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	431a      	orrs	r2, r3
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <readReg+0x110>)
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <readReg+0x118>)
 8001050:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001054:	6113      	str	r3, [r2, #16]
 8001056:	2108      	movs	r1, #8
 8001058:	4829      	ldr	r0, [pc, #164]	; (8001100 <readReg+0x110>)
 800105a:	f7ff fa3d 	bl	80004d8 <PIN_LOW>
 800105e:	2108      	movs	r1, #8
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <readReg+0x110>)
 8001062:	f7ff fa49 	bl	80004f8 <PIN_HIGH>
 8001066:	2108      	movs	r1, #8
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <readReg+0x110>)
 800106a:	f7ff fa45 	bl	80004f8 <PIN_HIGH>
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <readReg+0x110>)
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <readReg+0x114>)
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <readReg+0x118>)
 8001076:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	035b      	lsls	r3, r3, #13
 8001080:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	109b      	asrs	r3, r3, #2
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	431a      	orrs	r2, r3
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <readReg+0x110>)
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <readReg+0x118>)
 8001096:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800109a:	6113      	str	r3, [r2, #16]
 800109c:	2108      	movs	r1, #8
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <readReg+0x110>)
 80010a0:	f7ff fa1a 	bl	80004d8 <PIN_LOW>
 80010a4:	2108      	movs	r1, #8
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <readReg+0x110>)
 80010a8:	f7ff fa26 	bl	80004f8 <PIN_HIGH>
 80010ac:	2108      	movs	r1, #8
 80010ae:	4814      	ldr	r0, [pc, #80]	; (8001100 <readReg+0x110>)
 80010b0:	f7ff fa22 	bl	80004f8 <PIN_HIGH>
 80010b4:	2104      	movs	r1, #4
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <readReg+0x110>)
 80010b8:	f7ff fa1e 	bl	80004f8 <PIN_HIGH>
    setReadDir();
 80010bc:	f7ff fb3c 	bl	8000738 <setReadDir>
    delay(1);    //1us should be adequate
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff f9f1 	bl	80004a8 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 80010c6:	f7ff fec5 	bl	8000e54 <read16bits>
 80010ca:	4603      	mov	r3, r0
 80010cc:	81bb      	strh	r3, [r7, #12]
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	daf3      	bge.n	80010c6 <readReg+0xd6>
    RD_IDLE;
 80010de:	2110      	movs	r1, #16
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <readReg+0x110>)
 80010e2:	f7ff fa09 	bl	80004f8 <PIN_HIGH>
    CS_IDLE;
 80010e6:	2102      	movs	r1, #2
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <readReg+0x110>)
 80010ea:	f7ff fa05 	bl	80004f8 <PIN_HIGH>
    setWriteDir();
 80010ee:	f7ff fb4d 	bl	800078c <setWriteDir>
    return ret;
 80010f2:	89bb      	ldrh	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000076 	.word	0x20000076
 8001100:	40010800 	.word	0x40010800
 8001104:	80200000 	.word	0x80200000
 8001108:	40010c00 	.word	0x40010c00

0800110c <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff68 	bl	8000ff0 <readReg>
 8001120:	4603      	mov	r3, r0
 8001122:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff61 	bl	8000ff0 <readReg>
 800112e:	4603      	mov	r3, r0
 8001130:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff4d 	bl	8000ff0 <readReg>
 8001156:	4603      	mov	r3, r0
 8001158:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff46 	bl	8000ff0 <readReg>
 8001164:	4603      	mov	r3, r0
 8001166:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	2102      	movs	r1, #2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff3f 	bl	8000ff0 <readReg>
 8001172:	4603      	mov	r3, r0
 8001174:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	89ba      	ldrh	r2, [r7, #12]
 800117c:	0212      	lsls	r2, r2, #8
 800117e:	4313      	orrs	r3, r2
 8001180:	897a      	ldrh	r2, [r7, #10]
 8001182:	0a12      	lsrs	r2, r2, #8
 8001184:	b292      	uxth	r2, r2
 8001186:	4313      	orrs	r3, r2
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <tft_init>:


void tft_init(uint16_t ID)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 80011a2:	4bcf      	ldr	r3, [pc, #828]	; (80014e0 <tft_init+0x350>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80011a8:	4ace      	ldr	r2, [pc, #824]	; (80014e4 <tft_init+0x354>)
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	8013      	strh	r3, [r2, #0]
 80011ae:	4bcd      	ldr	r3, [pc, #820]	; (80014e4 <tft_init+0x354>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	f24c 5205 	movw	r2, #50437	; 0xc505
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f000 84f6 	beq.w	8001ba8 <tft_init+0xa18>
 80011bc:	f24c 5205 	movw	r2, #50437	; 0xc505
 80011c0:	4293      	cmp	r3, r2
 80011c2:	f300 8547 	bgt.w	8001c54 <tft_init+0xac4>
 80011c6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80011ca:	4293      	cmp	r3, r2
 80011cc:	f000 84f5 	beq.w	8001bba <tft_init+0xa2a>
 80011d0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f300 853d 	bgt.w	8001c54 <tft_init+0xac4>
 80011da:	f24b 5205 	movw	r2, #46341	; 0xb505
 80011de:	4293      	cmp	r3, r2
 80011e0:	f000 84e2 	beq.w	8001ba8 <tft_init+0xa18>
 80011e4:	f24b 5205 	movw	r2, #46341	; 0xb505
 80011e8:	4293      	cmp	r3, r2
 80011ea:	f300 8533 	bgt.w	8001c54 <tft_init+0xac4>
 80011ee:	f64a 4211 	movw	r2, #44049	; 0xac11
 80011f2:	4293      	cmp	r3, r2
 80011f4:	f000 844f 	beq.w	8001a96 <tft_init+0x906>
 80011f8:	f64a 4211 	movw	r2, #44049	; 0xac11
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f300 8529 	bgt.w	8001c54 <tft_init+0xac4>
 8001202:	f649 0206 	movw	r2, #38918	; 0x9806
 8001206:	4293      	cmp	r3, r2
 8001208:	f000 84e6 	beq.w	8001bd8 <tft_init+0xa48>
 800120c:	f649 0206 	movw	r2, #38918	; 0x9806
 8001210:	4293      	cmp	r3, r2
 8001212:	f300 851f 	bgt.w	8001c54 <tft_init+0xac4>
 8001216:	f249 7297 	movw	r2, #38807	; 0x9797
 800121a:	4293      	cmp	r3, r2
 800121c:	f000 825c 	beq.w	80016d8 <tft_init+0x548>
 8001220:	f249 7297 	movw	r2, #38807	; 0x9797
 8001224:	4293      	cmp	r3, r2
 8001226:	f300 8515 	bgt.w	8001c54 <tft_init+0xac4>
 800122a:	f249 5295 	movw	r2, #38293	; 0x9595
 800122e:	4293      	cmp	r3, r2
 8001230:	f000 8307 	beq.w	8001842 <tft_init+0x6b2>
 8001234:	f249 5295 	movw	r2, #38293	; 0x9595
 8001238:	4293      	cmp	r3, r2
 800123a:	f300 850b 	bgt.w	8001c54 <tft_init+0xac4>
 800123e:	f249 4288 	movw	r2, #38024	; 0x9488
 8001242:	4293      	cmp	r3, r2
 8001244:	f300 8506 	bgt.w	8001c54 <tft_init+0xac4>
 8001248:	f249 4287 	movw	r2, #38023	; 0x9487
 800124c:	4293      	cmp	r3, r2
 800124e:	f280 8494 	bge.w	8001b7a <tft_init+0x9ea>
 8001252:	f249 4286 	movw	r2, #38022	; 0x9486
 8001256:	4293      	cmp	r3, r2
 8001258:	f000 8475 	beq.w	8001b46 <tft_init+0x9b6>
 800125c:	f249 4286 	movw	r2, #38022	; 0x9486
 8001260:	4293      	cmp	r3, r2
 8001262:	f300 84f7 	bgt.w	8001c54 <tft_init+0xac4>
 8001266:	f249 4281 	movw	r2, #38017	; 0x9481
 800126a:	4293      	cmp	r3, r2
 800126c:	f000 8454 	beq.w	8001b18 <tft_init+0x988>
 8001270:	f249 4281 	movw	r2, #38017	; 0x9481
 8001274:	4293      	cmp	r3, r2
 8001276:	f300 84ed 	bgt.w	8001c54 <tft_init+0xac4>
 800127a:	f249 3242 	movw	r2, #37698	; 0x9342
 800127e:	4293      	cmp	r3, r2
 8001280:	f300 84e8 	bgt.w	8001c54 <tft_init+0xac4>
 8001284:	f249 3202 	movw	r2, #37634	; 0x9302
 8001288:	4293      	cmp	r3, r2
 800128a:	f280 8155 	bge.w	8001538 <tft_init+0x3a8>
 800128e:	f249 2226 	movw	r2, #37414	; 0x9226
 8001292:	4293      	cmp	r3, r2
 8001294:	f000 8393 	beq.w	80019be <tft_init+0x82e>
 8001298:	f249 2226 	movw	r2, #37414	; 0x9226
 800129c:	4293      	cmp	r3, r2
 800129e:	f300 84d9 	bgt.w	8001c54 <tft_init+0xac4>
 80012a2:	f249 2225 	movw	r2, #37413	; 0x9225
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f000 838d 	beq.w	80019c6 <tft_init+0x836>
 80012ac:	f249 2225 	movw	r2, #37413	; 0x9225
 80012b0:	4293      	cmp	r3, r2
 80012b2:	f300 84cf 	bgt.w	8001c54 <tft_init+0xac4>
 80012b6:	f249 1263 	movw	r2, #37219	; 0x9163
 80012ba:	4293      	cmp	r3, r2
 80012bc:	f000 836c 	beq.w	8001998 <tft_init+0x808>
 80012c0:	f249 1263 	movw	r2, #37219	; 0x9163
 80012c4:	4293      	cmp	r3, r2
 80012c6:	f300 84c5 	bgt.w	8001c54 <tft_init+0xac4>
 80012ca:	f249 0290 	movw	r2, #37008	; 0x9090
 80012ce:	4293      	cmp	r3, r2
 80012d0:	f000 82f5 	beq.w	80018be <tft_init+0x72e>
 80012d4:	f249 0290 	movw	r2, #37008	; 0x9090
 80012d8:	4293      	cmp	r3, r2
 80012da:	f300 84bb 	bgt.w	8001c54 <tft_init+0xac4>
 80012de:	f248 3257 	movw	r2, #33623	; 0x8357
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f000 82e6 	beq.w	80018b4 <tft_init+0x724>
 80012e8:	f248 3257 	movw	r2, #33623	; 0x8357
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f300 84b1 	bgt.w	8001c54 <tft_init+0xac4>
 80012f2:	f248 3247 	movw	r2, #33607	; 0x8347
 80012f6:	4293      	cmp	r3, r2
 80012f8:	f000 82d3 	beq.w	80018a2 <tft_init+0x712>
 80012fc:	f248 3247 	movw	r2, #33607	; 0x8347
 8001300:	4293      	cmp	r3, r2
 8001302:	f300 84a7 	bgt.w	8001c54 <tft_init+0xac4>
 8001306:	f248 2230 	movw	r2, #33328	; 0x8230
 800130a:	4293      	cmp	r3, r2
 800130c:	f000 8303 	beq.w	8001916 <tft_init+0x786>
 8001310:	f248 2230 	movw	r2, #33328	; 0x8230
 8001314:	4293      	cmp	r3, r2
 8001316:	f300 849d 	bgt.w	8001c54 <tft_init+0xac4>
 800131a:	f248 0231 	movw	r2, #32817	; 0x8031
 800131e:	4293      	cmp	r3, r2
 8001320:	f000 8281 	beq.w	8001826 <tft_init+0x696>
 8001324:	f248 0231 	movw	r2, #32817	; 0x8031
 8001328:	4293      	cmp	r3, r2
 800132a:	f300 8493 	bgt.w	8001c54 <tft_init+0xac4>
 800132e:	f247 7296 	movw	r2, #30614	; 0x7796
 8001332:	4293      	cmp	r3, r2
 8001334:	f300 848e 	bgt.w	8001c54 <tft_init+0xac4>
 8001338:	f247 7283 	movw	r2, #30595	; 0x7783
 800133c:	4293      	cmp	r3, r2
 800133e:	f280 8187 	bge.w	8001650 <tft_init+0x4c0>
 8001342:	f247 7235 	movw	r2, #30517	; 0x7735
 8001346:	4293      	cmp	r3, r2
 8001348:	f000 8248 	beq.w	80017dc <tft_init+0x64c>
 800134c:	f247 7235 	movw	r2, #30517	; 0x7735
 8001350:	4293      	cmp	r3, r2
 8001352:	f300 847f 	bgt.w	8001c54 <tft_init+0xac4>
 8001356:	f247 5275 	movw	r2, #30069	; 0x7575
 800135a:	4293      	cmp	r3, r2
 800135c:	f000 8271 	beq.w	8001842 <tft_init+0x6b2>
 8001360:	f247 5275 	movw	r2, #30069	; 0x7575
 8001364:	4293      	cmp	r3, r2
 8001366:	f300 8475 	bgt.w	8001c54 <tft_init+0xac4>
 800136a:	f646 0214 	movw	r2, #26644	; 0x6814
 800136e:	4293      	cmp	r3, r2
 8001370:	f000 821f 	beq.w	80017b2 <tft_init+0x622>
 8001374:	f646 0214 	movw	r2, #26644	; 0x6814
 8001378:	4293      	cmp	r3, r2
 800137a:	f300 846b 	bgt.w	8001c54 <tft_init+0xac4>
 800137e:	f646 0213 	movw	r2, #26643	; 0x6813
 8001382:	4293      	cmp	r3, r2
 8001384:	f000 831b 	beq.w	80019be <tft_init+0x82e>
 8001388:	f646 0213 	movw	r2, #26643	; 0x6813
 800138c:	4293      	cmp	r3, r2
 800138e:	f300 8461 	bgt.w	8001c54 <tft_init+0xac4>
 8001392:	f646 0209 	movw	r2, #26633	; 0x6809
 8001396:	4293      	cmp	r3, r2
 8001398:	f000 833d 	beq.w	8001a16 <tft_init+0x886>
 800139c:	f646 0209 	movw	r2, #26633	; 0x6809
 80013a0:	4293      	cmp	r3, r2
 80013a2:	f300 8457 	bgt.w	8001c54 <tft_init+0xac4>
 80013a6:	f246 7267 	movw	r2, #26471	; 0x6767
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f000 8249 	beq.w	8001842 <tft_init+0x6b2>
 80013b0:	f246 7267 	movw	r2, #26471	; 0x6767
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f300 844d 	bgt.w	8001c54 <tft_init+0xac4>
 80013ba:	f245 4220 	movw	r2, #21536	; 0x5420
 80013be:	4293      	cmp	r3, r2
 80013c0:	f000 833e 	beq.w	8001a40 <tft_init+0x8b0>
 80013c4:	f245 4220 	movw	r2, #21536	; 0x5420
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f300 8443 	bgt.w	8001c54 <tft_init+0xac4>
 80013ce:	f245 4208 	movw	r2, #21512	; 0x5408
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f000 830f 	beq.w	80019f6 <tft_init+0x866>
 80013d8:	f245 4208 	movw	r2, #21512	; 0x5408
 80013dc:	4293      	cmp	r3, r2
 80013de:	f300 8439 	bgt.w	8001c54 <tft_init+0xac4>
 80013e2:	f245 3210 	movw	r2, #21264	; 0x5310
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f000 81ce 	beq.w	8001788 <tft_init+0x5f8>
 80013ec:	f245 3210 	movw	r2, #21264	; 0x5310
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f300 842f 	bgt.w	8001c54 <tft_init+0xac4>
 80013f6:	f245 2252 	movw	r2, #21074	; 0x5252
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f000 822d 	beq.w	800185a <tft_init+0x6ca>
 8001400:	f245 2252 	movw	r2, #21074	; 0x5252
 8001404:	4293      	cmp	r3, r2
 8001406:	f300 8425 	bgt.w	8001c54 <tft_init+0xac4>
 800140a:	f244 7247 	movw	r2, #18247	; 0x4747
 800140e:	4293      	cmp	r3, r2
 8001410:	f000 8212 	beq.w	8001838 <tft_init+0x6a8>
 8001414:	f244 7247 	movw	r2, #18247	; 0x4747
 8001418:	4293      	cmp	r3, r2
 800141a:	f300 841b 	bgt.w	8001c54 <tft_init+0xac4>
 800141e:	f244 5235 	movw	r2, #17717	; 0x4535
 8001422:	4293      	cmp	r3, r2
 8001424:	f000 81a7 	beq.w	8001776 <tft_init+0x5e6>
 8001428:	f244 5235 	movw	r2, #17717	; 0x4535
 800142c:	4293      	cmp	r3, r2
 800142e:	f300 8411 	bgt.w	8001c54 <tft_init+0xac4>
 8001432:	f244 5232 	movw	r2, #17714	; 0x4532
 8001436:	4293      	cmp	r3, r2
 8001438:	f000 8194 	beq.w	8001764 <tft_init+0x5d4>
 800143c:	f244 5232 	movw	r2, #17714	; 0x4532
 8001440:	4293      	cmp	r3, r2
 8001442:	f300 8407 	bgt.w	8001c54 <tft_init+0xac4>
 8001446:	f242 0253 	movw	r2, #8275	; 0x2053
 800144a:	4293      	cmp	r3, r2
 800144c:	f000 831e 	beq.w	8001a8c <tft_init+0x8fc>
 8001450:	f242 0253 	movw	r2, #8275	; 0x2053
 8001454:	4293      	cmp	r3, r2
 8001456:	f300 83fd 	bgt.w	8001c54 <tft_init+0xac4>
 800145a:	f241 6202 	movw	r2, #5634	; 0x1602
 800145e:	4293      	cmp	r3, r2
 8001460:	f000 830b 	beq.w	8001a7a <tft_init+0x8ea>
 8001464:	f241 6202 	movw	r2, #5634	; 0x1602
 8001468:	4293      	cmp	r3, r2
 800146a:	f300 83f3 	bgt.w	8001c54 <tft_init+0xac4>
 800146e:	f241 5281 	movw	r2, #5505	; 0x1581
 8001472:	4293      	cmp	r3, r2
 8001474:	f000 834b 	beq.w	8001b0e <tft_init+0x97e>
 8001478:	f241 5281 	movw	r2, #5505	; 0x1581
 800147c:	4293      	cmp	r3, r2
 800147e:	f300 83e9 	bgt.w	8001c54 <tft_init+0xac4>
 8001482:	f5b3 5fac 	cmp.w	r3, #5504	; 0x1580
 8001486:	f000 8164 	beq.w	8001752 <tft_init+0x5c2>
 800148a:	f5b3 5fac 	cmp.w	r3, #5504	; 0x1580
 800148e:	f300 83e1 	bgt.w	8001c54 <tft_init+0xac4>
 8001492:	f241 5226 	movw	r2, #5414	; 0x1526
 8001496:	4293      	cmp	r3, r2
 8001498:	f000 8152 	beq.w	8001740 <tft_init+0x5b0>
 800149c:	f241 5226 	movw	r2, #5414	; 0x1526
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f300 83d7 	bgt.w	8001c54 <tft_init+0xac4>
 80014a6:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80014aa:	f000 8140 	beq.w	800172e <tft_init+0x59e>
 80014ae:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80014b2:	f300 83cf 	bgt.w	8001c54 <tft_init+0xac4>
 80014b6:	f241 5211 	movw	r2, #5393	; 0x1511
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f000 8123 	beq.w	8001706 <tft_init+0x576>
 80014c0:	f241 5211 	movw	r2, #5393	; 0x1511
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f300 83c5 	bgt.w	8001c54 <tft_init+0xac4>
 80014ca:	f241 5205 	movw	r2, #5381	; 0x1505
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f000 8296 	beq.w	8001a00 <tft_init+0x870>
 80014d4:	f241 5205 	movw	r2, #5381	; 0x1505
 80014d8:	4293      	cmp	r3, r2
 80014da:	f300 83bb 	bgt.w	8001c54 <tft_init+0xac4>
 80014de:	e003      	b.n	80014e8 <tft_init+0x358>
 80014e0:	2000007c 	.word	0x2000007c
 80014e4:	20000080 	.word	0x20000080
 80014e8:	f241 2289 	movw	r2, #4745	; 0x1289
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f000 80ff 	beq.w	80016f0 <tft_init+0x560>
 80014f2:	f241 2289 	movw	r2, #4745	; 0x1289
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f300 83ac 	bgt.w	8001c54 <tft_init+0xac4>
 80014fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001500:	f000 80e1 	beq.w	80016c6 <tft_init+0x536>
 8001504:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001508:	f300 83a4 	bgt.w	8001c54 <tft_init+0xac4>
 800150c:	f240 1239 	movw	r2, #313	; 0x139
 8001510:	4293      	cmp	r3, r2
 8001512:	f000 80cf 	beq.w	80016b4 <tft_init+0x524>
 8001516:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800151a:	f280 839b 	bge.w	8001c54 <tft_init+0xac4>
 800151e:	2b99      	cmp	r3, #153	; 0x99
 8001520:	f000 81e4 	beq.w	80018ec <tft_init+0x75c>
 8001524:	2b99      	cmp	r3, #153	; 0x99
 8001526:	f300 8395 	bgt.w	8001c54 <tft_init+0xac4>
 800152a:	2b01      	cmp	r3, #1
 800152c:	f000 825e 	beq.w	80019ec <tft_init+0x85c>
 8001530:	2b65      	cmp	r3, #101	; 0x65
 8001532:	f000 81a4 	beq.w	800187e <tft_init+0x6ee>
 8001536:	e38d      	b.n	8001c54 <tft_init+0xac4>
 8001538:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 800153c:	3b02      	subs	r3, #2
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	f200 8388 	bhi.w	8001c54 <tft_init+0xac4>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <tft_init+0x3bc>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	08001aa1 	.word	0x08001aa1
 8001550:	08001c55 	.word	0x08001c55
 8001554:	08001c55 	.word	0x08001c55
 8001558:	08001c55 	.word	0x08001c55
 800155c:	08001c55 	.word	0x08001c55
 8001560:	08001c55 	.word	0x08001c55
 8001564:	08001c55 	.word	0x08001c55
 8001568:	08001c55 	.word	0x08001c55
 800156c:	08001c55 	.word	0x08001c55
 8001570:	08001c55 	.word	0x08001c55
 8001574:	08001c55 	.word	0x08001c55
 8001578:	08001c55 	.word	0x08001c55
 800157c:	08001c55 	.word	0x08001c55
 8001580:	08001c55 	.word	0x08001c55
 8001584:	08001c55 	.word	0x08001c55
 8001588:	08001c55 	.word	0x08001c55
 800158c:	08001c55 	.word	0x08001c55
 8001590:	08001c55 	.word	0x08001c55
 8001594:	08001c55 	.word	0x08001c55
 8001598:	08001c55 	.word	0x08001c55
 800159c:	08001c55 	.word	0x08001c55
 80015a0:	08001c55 	.word	0x08001c55
 80015a4:	08001c55 	.word	0x08001c55
 80015a8:	08001c55 	.word	0x08001c55
 80015ac:	08001c55 	.word	0x08001c55
 80015b0:	08001c55 	.word	0x08001c55
 80015b4:	08001c55 	.word	0x08001c55
 80015b8:	08001c55 	.word	0x08001c55
 80015bc:	08001c55 	.word	0x08001c55
 80015c0:	08001c55 	.word	0x08001c55
 80015c4:	08001a01 	.word	0x08001a01
 80015c8:	08001c55 	.word	0x08001c55
 80015cc:	08001c55 	.word	0x08001c55
 80015d0:	08001c55 	.word	0x08001c55
 80015d4:	08001c55 	.word	0x08001c55
 80015d8:	08001a21 	.word	0x08001a21
 80015dc:	08001a41 	.word	0x08001a41
 80015e0:	08001a69 	.word	0x08001a69
 80015e4:	08001a21 	.word	0x08001a21
 80015e8:	08001ab5 	.word	0x08001ab5
 80015ec:	08001c55 	.word	0x08001c55
 80015f0:	08001c55 	.word	0x08001c55
 80015f4:	08001c55 	.word	0x08001c55
 80015f8:	08001c55 	.word	0x08001c55
 80015fc:	08001c55 	.word	0x08001c55
 8001600:	08001c55 	.word	0x08001c55
 8001604:	08001c55 	.word	0x08001c55
 8001608:	08001a2b 	.word	0x08001a2b
 800160c:	08001c55 	.word	0x08001c55
 8001610:	08001c55 	.word	0x08001c55
 8001614:	08001c55 	.word	0x08001c55
 8001618:	08001a2b 	.word	0x08001a2b
 800161c:	08001c55 	.word	0x08001c55
 8001620:	08001c55 	.word	0x08001c55
 8001624:	08001aab 	.word	0x08001aab
 8001628:	08001c55 	.word	0x08001c55
 800162c:	08001c55 	.word	0x08001c55
 8001630:	08001c55 	.word	0x08001c55
 8001634:	08001c55 	.word	0x08001c55
 8001638:	08001c55 	.word	0x08001c55
 800163c:	08001c55 	.word	0x08001c55
 8001640:	08001c55 	.word	0x08001c55
 8001644:	08001acb 	.word	0x08001acb
 8001648:	08001ad5 	.word	0x08001ad5
 800164c:	08001ae7 	.word	0x08001ae7
 8001650:	f5a3 43ef 	sub.w	r3, r3, #30592	; 0x7780
 8001654:	3b03      	subs	r3, #3
 8001656:	2b13      	cmp	r3, #19
 8001658:	f200 82fc 	bhi.w	8001c54 <tft_init+0xac4>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <tft_init+0x4d4>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001803 	.word	0x08001803
 8001668:	08001c55 	.word	0x08001c55
 800166c:	08001c55 	.word	0x08001c55
 8001670:	08001c55 	.word	0x08001c55
 8001674:	08001c55 	.word	0x08001c55
 8001678:	08001c55 	.word	0x08001c55
 800167c:	08001815 	.word	0x08001815
 8001680:	08001c55 	.word	0x08001c55
 8001684:	08001c55 	.word	0x08001c55
 8001688:	08001c55 	.word	0x08001c55
 800168c:	08001c55 	.word	0x08001c55
 8001690:	08001c55 	.word	0x08001c55
 8001694:	08001c55 	.word	0x08001c55
 8001698:	08001c55 	.word	0x08001c55
 800169c:	08001c55 	.word	0x08001c55
 80016a0:	08001c55 	.word	0x08001c55
 80016a4:	08001bbb 	.word	0x08001bbb
 80016a8:	08001c55 	.word	0x08001c55
 80016ac:	08001c55 	.word	0x08001c55
 80016b0:	08001b71 	.word	0x08001b71
    0x0007, 0x0017,
};
*/
#ifdef SUPPORT_0139
    case 0x0139:
        _lcd_capable = REV_SCREEN | XSA_XEA_16BIT;    //remove AUTO_READINC
 80016b4:	4b9c      	ldr	r3, [pc, #624]	; (8001928 <tft_init+0x798>)
 80016b6:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 80016ba:	801a      	strh	r2, [r3, #0]
            0x0007, 0x0014,     //Display Control: VLE1=0, SPT=0, GON=1, REV=1, D=0 (halt)
            0x0007, 0x0016,     //Display Control: VLE1=0, SPT=0, GON=1, REV=1, D=2 (blank)
            0x0007, 0x0017,     //Display Control: VLE1=0, SPT=0, GON=1, REV=1, D=3 (normal)
//            0x0007, 0x0217,     //Display Control: VLE1=1, SPT=0, GON=1, REV=1, D=3
        };
        init_table16(S6D0139_regValues, sizeof(S6D0139_regValues));
 80016bc:	2158      	movs	r1, #88	; 0x58
 80016be:	489b      	ldr	r0, [pc, #620]	; (800192c <tft_init+0x79c>)
 80016c0:	f7ff fb51 	bl	8000d66 <init_table16>
        break;
 80016c4:	e2cc      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_0154
    case 0x0154:
        _lcd_capable = AUTO_READINC | REV_SCREEN;
 80016c6:	4b98      	ldr	r3, [pc, #608]	; (8001928 <tft_init+0x798>)
 80016c8:	f241 0202 	movw	r2, #4098	; 0x1002
 80016cc:	801a      	strh	r2, [r3, #0]
            0x0007, 0x0012,     //GON=1, REV=0, D=2
            TFTLCD_DELAY, 40,
            0x0007, 0x0013,     //GON=1, REV=0, D=3
            0x0007, 0x0017,     //GON=1, REV=1, D=3 DISPLAY ON
        };
        init_table16(S6D0154_regValues, sizeof(S6D0154_regValues));
 80016ce:	219c      	movs	r1, #156	; 0x9c
 80016d0:	4897      	ldr	r0, [pc, #604]	; (8001930 <tft_init+0x7a0>)
 80016d2:	f7ff fb48 	bl	8000d66 <init_table16>

        break;
 80016d6:	e2c3      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_1289
    case 0x9797:
        is9797 = 1;
 80016d8:	4b96      	ldr	r3, [pc, #600]	; (8001934 <tft_init+0x7a4>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
//        _lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN | AUTO_READINC | READ_24BITS;
// deliberately set READ_BGR to disable Software Scroll in graphictest_kbv example
        _lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN | AUTO_READINC | READ_24BITS | READ_BGR;
 80016de:	4b92      	ldr	r3, [pc, #584]	; (8001928 <tft_init+0x798>)
 80016e0:	f241 0236 	movw	r2, #4150	; 0x1036
 80016e4:	801a      	strh	r2, [r3, #0]
        _lcd_ID = 0x1289;
 80016e6:	4b94      	ldr	r3, [pc, #592]	; (8001938 <tft_init+0x7a8>)
 80016e8:	f241 2289 	movw	r2, #4745	; 0x1289
 80016ec:	801a      	strh	r2, [r3, #0]
        goto common_1289;
 80016ee:	e003      	b.n	80016f8 <tft_init+0x568>
    case 0x1289:
        _lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN | AUTO_READINC;
 80016f0:	4b8d      	ldr	r3, [pc, #564]	; (8001928 <tft_init+0x798>)
 80016f2:	f241 0222 	movw	r2, #4130	; 0x1022
 80016f6:	801a      	strh	r2, [r3, #0]
      common_1289:
	    dummy=1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
            0x003B, 0x0302,
            0x0023, 0x0000,
            0x0024, 0x0000,
            0x0025, 0x8000,
        };
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
 80016fc:	2178      	movs	r1, #120	; 0x78
 80016fe:	488f      	ldr	r0, [pc, #572]	; (800193c <tft_init+0x7ac>)
 8001700:	f7ff fb31 	bl	8000d66 <init_table16>
        break;
 8001704:	e2ac      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <tft_init+0x798>)
 8001708:	2203      	movs	r2, #3
 800170a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800170c:	4b8c      	ldr	r3, [pc, #560]	; (8001940 <tft_init+0x7b0>)
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	2303      	movs	r3, #3
 8001712:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001714:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <tft_init+0x7b4>)
 8001716:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800171e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001720:	4b89      	ldr	r3, [pc, #548]	; (8001948 <tft_init+0x7b8>)
 8001722:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800172a:	801a      	strh	r2, [r3, #0]
        break;
 800172c:	e298      	b.n	8001c60 <tft_init+0xad0>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800172e:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <tft_init+0x798>)
 8001730:	f240 4213 	movw	r2, #1043	; 0x413
 8001734:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001736:	4b85      	ldr	r3, [pc, #532]	; (800194c <tft_init+0x7bc>)
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2306      	movs	r3, #6
 800173c:	837b      	strh	r3, [r7, #26]
        break;
 800173e:	e28f      	b.n	8001c60 <tft_init+0xad0>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <tft_init+0x798>)
 8001742:	f240 4213 	movw	r2, #1043	; 0x413
 8001746:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <tft_init+0x7c0>)
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	230c      	movs	r3, #12
 800174e:	837b      	strh	r3, [r7, #26]
        break;
 8001750:	e286      	b.n	8001c60 <tft_init+0xad0>

#ifdef SUPPORT_1580
    case 0x1580:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS | READ_NODUMMY; //thanks vanhan123
 8001752:	4b75      	ldr	r3, [pc, #468]	; (8001928 <tft_init+0x798>)
 8001754:	f241 1244 	movw	r2, #4420	; 0x1144
 8001758:	801a      	strh	r2, [r3, #0]
            0x93, 0x0701,
            /******************************************/
            0x07, 0x0100,
            TFTLCD_DELAY, 100,
        };
        init_table16(R61580_DEM240320C, sizeof(R61580_DEM240320C));
 800175a:	21cc      	movs	r1, #204	; 0xcc
 800175c:	487d      	ldr	r0, [pc, #500]	; (8001954 <tft_init+0x7c4>)
 800175e:	f7ff fb02 	bl	8000d66 <init_table16>
//        init_table16(R61580_regValues, sizeof(R61580_regValues));
        break;
 8001762:	e27d      	b.n	8001c60 <tft_init+0xad0>
//My approach to get it working: the parameters by waveshare did no make it function allright
//I started with remming lines to see if this helped. Basically the stuff in range 41-93
//gives problems.
//The other lines that are REMmed give no problems, but it seems default values are OK as well.
case 0x4532:    // thanks Leodino
	_lcd_capable = 0 | REV_SCREEN;  // | INVERT_GS;
 8001764:	4b70      	ldr	r3, [pc, #448]	; (8001928 <tft_init+0x798>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	801a      	strh	r2, [r3, #0]
		TFTLCD_DELAY,50,
		0x0007,0x0133, //Display Control 1 PTDE[1:0] BASEE GON DTE COL D[1:0]
		TFTLCD_DELAY,50,
		//0x00A0,0x0000, //Test Register 1 (RA0h)
		};
	init_table16(LGDP4532_regValues, sizeof(LGDP4532_regValues));
 800176c:	215c      	movs	r1, #92	; 0x5c
 800176e:	487a      	ldr	r0, [pc, #488]	; (8001958 <tft_init+0x7c8>)
 8001770:	f7ff faf9 	bl	8000d66 <init_table16>
	break;
 8001774:	e274      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_4535
    case 0x4535:
        _lcd_capable = 0 | REV_SCREEN;  // | INVERT_GS;
 8001776:	4b6c      	ldr	r3, [pc, #432]	; (8001928 <tft_init+0x798>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	801a      	strh	r2, [r3, #0]
            0x0007, 0x0021,
            0x0007, 0x0023,
            0x0007, 0x0033,
            0x0007, 0x0133,
        };
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
 800177e:	219c      	movs	r1, #156	; 0x9c
 8001780:	4876      	ldr	r0, [pc, #472]	; (800195c <tft_init+0x7cc>)
 8001782:	f7ff faf0 	bl	8000d66 <init_table16>
        break;
 8001786:	e26b      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001788:	4b67      	ldr	r3, [pc, #412]	; (8001928 <tft_init+0x798>)
 800178a:	f640 6213 	movw	r2, #3603	; 0xe13
 800178e:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <tft_init+0x7d0>)
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	2302      	movs	r3, #2
 8001796:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <tft_init+0x7b4>)
 800179a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017a2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <tft_init+0x7b8>)
 80017a6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ae:	801a      	strh	r2, [r3, #0]
        break;
 80017b0:	e256      	b.n	8001c60 <tft_init+0xad0>

#ifdef SUPPORT_68140
    case 0x6814:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80017b2:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <tft_init+0x798>)
 80017b4:	f240 4203 	movw	r2, #1027	; 0x403
 80017b8:	801a      	strh	r2, [r3, #0]
		static const uint8_t RM68140_regValues_max[]  = {        //
            0x3A, 1, 0x55,      //Pixel format .kbv my Mega Shield
        };
        table8_ads = RM68140_regValues_max, table_size = sizeof(RM68140_regValues_max);
 80017ba:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <tft_init+0x7d4>)
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	2303      	movs	r3, #3
 80017c0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80017c2:	4b60      	ldr	r3, [pc, #384]	; (8001944 <tft_init+0x7b4>)
 80017c4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017cc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <tft_init+0x7b8>)
 80017d0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017d8:	801a      	strh	r2, [r3, #0]
        break;
 80017da:	e241      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_7735
    case 0x7735:                //
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80017dc:	4b52      	ldr	r3, [pc, #328]	; (8001928 <tft_init+0x798>)
 80017de:	f241 4213 	movw	r2, #5139	; 0x1413
 80017e2:	801a      	strh	r2, [r3, #0]
            0xC2, 2, 0x0A, 0x00,        // [0A 00]
            0xC3, 2, 0x8A, 0x2A,        // [8A 26]
            0xC4, 2, 0x8A, 0xEE,        // [8A EE]
            0xC5, 1, 0x0E,              // [05] VMCTR1 VCOM
        };
        table8_ads = table7735S, table_size = sizeof(table7735S);   //
 80017e4:	4b60      	ldr	r3, [pc, #384]	; (8001968 <tft_init+0x7d8>)
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	232c      	movs	r3, #44	; 0x2c
 80017ea:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80017ec:	4b55      	ldr	r3, [pc, #340]	; (8001944 <tft_init+0x7b4>)
 80017ee:	613b      	str	r3, [r7, #16]
        *p16 = 160;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	22a0      	movs	r2, #160	; 0xa0
 80017f4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <tft_init+0x7b8>)
 80017f8:	613b      	str	r3, [r7, #16]
        *p16 = 128;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	801a      	strh	r2, [r3, #0]
        break;
 8001800:	e22e      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_7781
    case 0x7783:
        _lcd_capable = AUTO_READINC | REV_SCREEN | INVERT_GS;
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <tft_init+0x798>)
 8001804:	f241 1202 	movw	r2, #4354	; 0x1102
 8001808:	801a      	strh	r2, [r3, #0]

            // Display On
            0x0007, 0x0133,     // Display Control (R07h)
            TFTLCD_DELAY, 50,
        };
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
 800180a:	2190      	movs	r1, #144	; 0x90
 800180c:	4857      	ldr	r0, [pc, #348]	; (800196c <tft_init+0x7dc>)
 800180e:	f7ff faaa 	bl	8000d66 <init_table16>
        break;
 8001812:	e225      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <tft_init+0x798>)
 8001816:	f240 4213 	movw	r2, #1043	; 0x413
 800181a:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <tft_init+0x7e0>)
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	2341      	movs	r3, #65	; 0x41
 8001822:	837b      	strh	r3, [r7, #26]
        break;
 8001824:	e21c      	b.n	8001c60 <tft_init+0xad0>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <tft_init+0x798>)
 8001828:	f241 4213 	movw	r2, #5139	; 0x1413
 800182c:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <tft_init+0x7e4>)
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	2312      	movs	r3, #18
 8001834:	837b      	strh	r3, [r7, #26]
        break;
 8001836:	e213      	b.n	8001c60 <tft_init+0xad0>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <tft_init+0x798>)
 800183a:	f241 6213 	movw	r2, #5651	; 0x1613
 800183e:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 8001840:	e003      	b.n	800184a <tft_init+0x6ba>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <tft_init+0x798>)
 8001844:	f241 4201 	movw	r2, #5121	; 0x1401
 8001848:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 800184a:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <tft_init+0x7e8>)
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 8001850:	2170      	movs	r1, #112	; 0x70
 8001852:	484a      	ldr	r0, [pc, #296]	; (800197c <tft_init+0x7ec>)
 8001854:	f7ff fa2e 	bl	8000cb4 <init_table>
        break;
 8001858:	e202      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_8352A
	case 0x5252:       //HX8352-A
        _lcd_capable = MIPI_DCS_REV1 | MV_AXIS;
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <tft_init+0x798>)
 800185c:	f240 4201 	movw	r2, #1025	; 0x401
 8001860:	801a      	strh	r2, [r3, #0]
        is8347 = 1;
 8001862:	4b45      	ldr	r3, [pc, #276]	; (8001978 <tft_init+0x7e8>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
            0x24, 1, 0x3C,      //Display 2: GON=1 D=3 [A0]
            0x16, 1, 0x1C,      //Memaccess: GS=1, BGR=1, SS=1
            0x01, 1, 0x06,      //Disp Mode: INVON=1, NORON=1 [02]
            0x55, 1, 0x06,      //SM_PANEL=0, SS_PANEL=0, GS_PANEL=1, REV_PANEL=1, BGR_PANEL=0
        };
        init_table(HX8352A_regValues, sizeof(HX8352A_regValues));
 8001868:	2165      	movs	r1, #101	; 0x65
 800186a:	4845      	ldr	r0, [pc, #276]	; (8001980 <tft_init+0x7f0>)
 800186c:	f7ff fa22 	bl	8000cb4 <init_table>
        p16 = (int16_t *) & height;
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <tft_init+0x7b4>)
 8001872:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800187a:	801a      	strh	r2, [r3, #0]
        break;
 800187c:	e1f0      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_8352B
    case 0x0065:       //HX8352-B
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <tft_init+0x798>)
 8001880:	f241 4213 	movw	r2, #5139	; 0x1413
 8001884:	801a      	strh	r2, [r3, #0]
        is8347 = 1;
 8001886:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <tft_init+0x7e8>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
            0x80, 2, 0x00, 0x00,     //CAC
            0x82, 2, 0x00, 0x00,     //RAC
            0x17, 1, 0x05,      //COLMOD = 565

        };
        init_table(HX8352B_regValues, sizeof(HX8352B_regValues));
 800188c:	2187      	movs	r1, #135	; 0x87
 800188e:	483d      	ldr	r0, [pc, #244]	; (8001984 <tft_init+0x7f4>)
 8001890:	f7ff fa10 	bl	8000cb4 <init_table>
        p16 = (int16_t *) & height;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <tft_init+0x7b4>)
 8001896:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800189e:	801a      	strh	r2, [r3, #0]
        break;
 80018a0:	e1de      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_8347A
    case 0x8347:
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <tft_init+0x798>)
 80018a4:	f241 4201 	movw	r2, #5121	; 0x1401
 80018a8:	801a      	strh	r2, [r3, #0]
            (0x57), 1, 0x02,    //?
            (0x55), 1, 0x00,    //?
            (0x57), 1, 0x00,    //?
        };
        // Atmel ASF code uses VCOM2-3: 0x38, 0x12. 50ms delays and no TEST mode changes.
        init_table(HX8347A_NHD_regValues, sizeof(HX8347A_NHD_regValues));
 80018aa:	217e      	movs	r1, #126	; 0x7e
 80018ac:	4836      	ldr	r0, [pc, #216]	; (8001988 <tft_init+0x7f8>)
 80018ae:	f7ff fa01 	bl	8000cb4 <init_table>
        //        init_table(HX8347A_CMO32_regValues, sizeof(HX8347A_CMO32_regValues));
        //        init_table(HX8347A_CMO24_regValues, sizeof(HX8347A_CMO24_regValues));
        //        init_table(HX8347A_ITDB02_regValues, sizeof(HX8347A_ITDB02_regValues));
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
 80018b2:	e1d5      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <tft_init+0x798>)
 80018b6:	f241 4203 	movw	r2, #5123	; 0x1403
 80018ba:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80018bc:	e003      	b.n	80018c6 <tft_init+0x736>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <tft_init+0x798>)
 80018c0:	f241 4213 	movw	r2, #5139	; 0x1413
 80018c4:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <tft_init+0x7fc>)
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	2302      	movs	r3, #2
 80018d0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <tft_init+0x7b4>)
 80018d4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018dc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <tft_init+0x7b8>)
 80018e0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018e8:	801a      	strh	r2, [r3, #0]
        break;
 80018ea:	e1b9      	b.n	8001c60 <tft_init+0xad0>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <tft_init+0x798>)
 80018ee:	f241 4213 	movw	r2, #5139	; 0x1413
 80018f2:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <tft_init+0x800>)
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	2341      	movs	r3, #65	; 0x41
 80018fa:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <tft_init+0x7b4>)
 80018fe:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001906:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <tft_init+0x7b8>)
 800190a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001912:	801a      	strh	r2, [r3, #0]
        break;
 8001914:	e1a4      	b.n	8001c60 <tft_init+0xad0>

#ifdef SUPPORT_8230
    case 0x8230:    //thanks Auzman
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | INVERT_RGB | READ_BGR;
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <tft_init+0x798>)
 8001918:	f641 1204 	movw	r2, #6404	; 0x1904
 800191c:	801a      	strh	r2, [r3, #0]
            0x0090, 0x0010, //set clocks/Line
            0x0000, 0x0001,
            TFTLCD_DELAY, 200, // Delay 200 ms
            0x0007, 0x0173, //Display on setting
        };
        init_table16(UC8230_regValues, sizeof(UC8230_regValues));
 800191e:	219c      	movs	r1, #156	; 0x9c
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <tft_init+0x804>)
 8001922:	f7ff fa20 	bl	8000d66 <init_table16>
        break;
 8001926:	e19b      	b.n	8001c60 <tft_init+0xad0>
 8001928:	2000007e 	.word	0x2000007e
 800192c:	080051dc 	.word	0x080051dc
 8001930:	08005234 	.word	0x08005234
 8001934:	20000079 	.word	0x20000079
 8001938:	20000080 	.word	0x20000080
 800193c:	080052d0 	.word	0x080052d0
 8001940:	08005348 	.word	0x08005348
 8001944:	08000589 	.word	0x08000589
 8001948:	08000575 	.word	0x08000575
 800194c:	0800534c 	.word	0x0800534c
 8001950:	08005354 	.word	0x08005354
 8001954:	08005360 	.word	0x08005360
 8001958:	0800542c 	.word	0x0800542c
 800195c:	08005488 	.word	0x08005488
 8001960:	08005524 	.word	0x08005524
 8001964:	08005528 	.word	0x08005528
 8001968:	0800552c 	.word	0x0800552c
 800196c:	08005558 	.word	0x08005558
 8001970:	080055e8 	.word	0x080055e8
 8001974:	0800562c 	.word	0x0800562c
 8001978:	20000077 	.word	0x20000077
 800197c:	08005640 	.word	0x08005640
 8001980:	080056b0 	.word	0x080056b0
 8001984:	08005718 	.word	0x08005718
 8001988:	080057a0 	.word	0x080057a0
 800198c:	08005820 	.word	0x08005820
 8001990:	08005824 	.word	0x08005824
 8001994:	08005868 	.word	0x08005868
#endif

#ifdef SUPPORT_9163
    case 0x9163:                //
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001998:	4b9a      	ldr	r3, [pc, #616]	; (8001c04 <tft_init+0xa74>)
 800199a:	f240 4213 	movw	r2, #1043	; 0x413
 800199e:	801a      	strh	r2, [r3, #0]
            0xC0, 2, 0x0A, 0x02, // [0A 05] PWCTR1 if LCM==10
            0xC1, 1, 0x02,       // [07] PWCTR2
            0xC5, 2, 0x50, 0x63, // [43 4D] VMCTR1
            0xC7, 1, 0,          // [40] VCOMOFFS
        };
        table8_ads = table9163C, table_size = sizeof(table9163C);   //
 80019a0:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <tft_init+0xa78>)
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	231b      	movs	r3, #27
 80019a6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80019a8:	4b98      	ldr	r3, [pc, #608]	; (8001c0c <tft_init+0xa7c>)
 80019aa:	613b      	str	r3, [r7, #16]
        *p16 = 160;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	22a0      	movs	r2, #160	; 0xa0
 80019b0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80019b2:	4b97      	ldr	r3, [pc, #604]	; (8001c10 <tft_init+0xa80>)
 80019b4:	613b      	str	r3, [r7, #16]
        *p16 = 128;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	801a      	strh	r2, [r3, #0]
        break;
 80019bc:	e150      	b.n	8001c60 <tft_init+0xad0>
#define ILI9225C_INVOFF  0x20
#define ILI9225C_INVON   0x21

    case 0x6813:
    case 0x9226:
        _lcd_ID = 0x9225;                //fall through
 80019be:	4b95      	ldr	r3, [pc, #596]	; (8001c14 <tft_init+0xa84>)
 80019c0:	f249 2225 	movw	r2, #37413	; 0x9225
 80019c4:	801a      	strh	r2, [r3, #0]
    case 0x9225:
        _lcd_capable = REV_SCREEN | READ_BGR;     //thanks tongbajiel
 80019c6:	4b8f      	ldr	r3, [pc, #572]	; (8001c04 <tft_init+0xa74>)
 80019c8:	f241 0204 	movw	r2, #4100	; 0x1004
 80019cc:	801a      	strh	r2, [r3, #0]

            ILI9225_DISP_CTRL1, 0x0012,
            TFTLCD_DELAY, 50,
            ILI9225_DISP_CTRL1, 0x1017,
        };
        init_table16(ILI9225_regValues, sizeof(ILI9225_regValues));
 80019ce:	21c0      	movs	r1, #192	; 0xc0
 80019d0:	4891      	ldr	r0, [pc, #580]	; (8001c18 <tft_init+0xa88>)
 80019d2:	f7ff f9c8 	bl	8000d66 <init_table16>
        p16 = (int16_t *) & height;
 80019d6:	4b8d      	ldr	r3, [pc, #564]	; (8001c0c <tft_init+0xa7c>)
 80019d8:	613b      	str	r3, [r7, #16]
        *p16 = 220;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	22dc      	movs	r2, #220	; 0xdc
 80019de:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80019e0:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <tft_init+0xa80>)
 80019e2:	613b      	str	r3, [r7, #16]
        *p16 = 176;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	22b0      	movs	r2, #176	; 0xb0
 80019e8:	801a      	strh	r2, [r3, #0]
        break;
 80019ea:	e139      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80019ec:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <tft_init+0xa74>)
 80019ee:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80019f2:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80019f4:	e008      	b.n	8001a08 <tft_init+0x878>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <tft_init+0xa74>)
 80019f8:	f241 0204 	movw	r2, #4100	; 0x1004
 80019fc:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80019fe:	e003      	b.n	8001a08 <tft_init+0x878>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001a00:	4b80      	ldr	r3, [pc, #512]	; (8001c04 <tft_init+0xa74>)
 8001a02:	f241 0204 	movw	r2, #4100	; 0x1004
 8001a06:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001a0c:	21d8      	movs	r1, #216	; 0xd8
 8001a0e:	4883      	ldr	r0, [pc, #524]	; (8001c1c <tft_init+0xa8c>)
 8001a10:	f7ff f9a9 	bl	8000d66 <init_table16>
        break;
 8001a14:	e124      	b.n	8001c60 <tft_init+0xad0>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001a16:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <tft_init+0xa74>)
 8001a18:	f241 1202 	movw	r2, #4354	; 0x1102
 8001a1c:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001a1e:	e008      	b.n	8001a32 <tft_init+0x8a2>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001a20:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <tft_init+0xa74>)
 8001a22:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001a26:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001a28:	e003      	b.n	8001a32 <tft_init+0x8a2>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <tft_init+0xa74>)
 8001a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a30:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001a36:	21cc      	movs	r1, #204	; 0xcc
 8001a38:	4879      	ldr	r0, [pc, #484]	; (8001c20 <tft_init+0xa90>)
 8001a3a:	f7ff f994 	bl	8000d66 <init_table16>
        break;
 8001a3e:	e10f      	b.n	8001c60 <tft_init+0xad0>

#if defined(SUPPORT_9326_5420)
	case 0x5420:
    case 0x9326:
        _lcd_capable = REV_SCREEN | READ_BGR;
 8001a40:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <tft_init+0xa74>)
 8001a42:	f241 0204 	movw	r2, #4100	; 0x1004
 8001a46:	801a      	strh	r2, [r3, #0]
         0x0010, 0x0010,     // DIVI[1:0];RTNI[4:0]
         0x0011, 0x0600,     // NOWI[2:0];SDTI[2:0]
         0x0020, 0x0002,     // DIVE[1:0];RTNE[5:0]
         0x0007, 0x0173,     //  262K color and display ON
		 };
        init_table16(ILI9326_CPT28_regValues, sizeof(ILI9326_CPT28_regValues));
 8001a48:	21bc      	movs	r1, #188	; 0xbc
 8001a4a:	4876      	ldr	r0, [pc, #472]	; (8001c24 <tft_init+0xa94>)
 8001a4c:	f7ff f98b 	bl	8000d66 <init_table16>
        p16 = (int16_t *) & height;
 8001a50:	4b6e      	ldr	r3, [pc, #440]	; (8001c0c <tft_init+0xa7c>)
 8001a52:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a5a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <tft_init+0xa80>)
 8001a5e:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	22f0      	movs	r2, #240	; 0xf0
 8001a64:	801a      	strh	r2, [r3, #0]
        break;
 8001a66:	e0fb      	b.n	8001c60 <tft_init+0xad0>
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <tft_init+0xa74>)
 8001a6a:	f240 4203 	movw	r2, #1027	; 0x403
 8001a6e:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <tft_init+0xa98>)
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	231e      	movs	r3, #30
 8001a76:	837b      	strh	r3, [r7, #26]
//        p16 = (int16_t *) & height;
//        *p16 = 400;
//        p16 = (int16_t *) & width;
//        *p16 = 240;
        break;
 8001a78:	e0f2      	b.n	8001c60 <tft_init+0xad0>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <tft_init+0xa74>)
 8001a7c:	f240 4203 	movw	r2, #1027	; 0x403
 8001a80:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8001a82:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <tft_init+0xa9c>)
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	2306      	movs	r3, #6
 8001a88:	837b      	strh	r3, [r7, #26]
        break;
 8001a8a:	e0e9      	b.n	8001c60 <tft_init+0xad0>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001a8c:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <tft_init+0xa74>)
 8001a8e:	f241 4217 	movw	r2, #5143	; 0x1417
 8001a92:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001a94:	e012      	b.n	8001abc <tft_init+0x92c>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <tft_init+0xa74>)
 8001a98:	f241 4213 	movw	r2, #5139	; 0x1413
 8001a9c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001a9e:	e00d      	b.n	8001abc <tft_init+0x92c>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001aa0:	4b58      	ldr	r3, [pc, #352]	; (8001c04 <tft_init+0xa74>)
 8001aa2:	f240 4203 	movw	r2, #1027	; 0x403
 8001aa6:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001aa8:	e008      	b.n	8001abc <tft_init+0x92c>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <tft_init+0xa74>)
 8001aac:	f240 4213 	movw	r2, #1043	; 0x413
 8001ab0:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001ab2:	e003      	b.n	8001abc <tft_init+0x92c>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <tft_init+0xa74>)
 8001ab6:	f241 6203 	movw	r2, #5635	; 0x1603
 8001aba:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <tft_init+0xaa0>)
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	837b      	strh	r3, [r7, #26]
        break;
 8001ac8:	e0ca      	b.n	8001c60 <tft_init+0xad0>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001aca:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <tft_init+0xa74>)
 8001acc:	f241 4213 	movw	r2, #5139	; 0x1413
 8001ad0:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001ad2:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <tft_init+0xa74>)
 8001ad6:	f240 4213 	movw	r2, #1043	; 0x413
 8001ada:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <tft_init+0xaa4>)
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	2365      	movs	r3, #101	; 0x65
 8001ae2:	837b      	strh	r3, [r7, #26]
        break;
 8001ae4:	e0bc      	b.n	8001c60 <tft_init+0xad0>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <tft_init+0xa74>)
 8001ae8:	f241 5213 	movw	r2, #5395	; 0x1513
 8001aec:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <tft_init+0xaa8>)
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	2338      	movs	r3, #56	; 0x38
 8001af4:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <tft_init+0xa7c>)
 8001af8:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	22f0      	movs	r2, #240	; 0xf0
 8001afe:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <tft_init+0xa80>)
 8001b02:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b0a:	801a      	strh	r2, [r3, #0]
        break;
 8001b0c:	e0a8      	b.n	8001c60 <tft_init+0xad0>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <tft_init+0xa74>)
 8001b10:	f240 4213 	movw	r2, #1043	; 0x413
 8001b14:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001b16:	e003      	b.n	8001b20 <tft_init+0x990>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <tft_init+0xa74>)
 8001b1a:	f240 4207 	movw	r2, #1031	; 0x407
 8001b1e:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <tft_init+0xaac>)
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	2345      	movs	r3, #69	; 0x45
 8001b2a:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <tft_init+0xa7c>)
 8001b2e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b36:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <tft_init+0xa80>)
 8001b3a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b42:	801a      	strh	r2, [r3, #0]
        break;
 8001b44:	e08c      	b.n	8001c60 <tft_init+0xad0>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <tft_init+0xa74>)
 8001b48:	f240 4203 	movw	r2, #1027	; 0x403
 8001b4c:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <tft_init+0xab0>)
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	233b      	movs	r3, #59	; 0x3b
 8001b54:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <tft_init+0xa7c>)
 8001b58:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b60:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <tft_init+0xa80>)
 8001b64:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b6c:	801a      	strh	r2, [r3, #0]
        break;
 8001b6e:	e077      	b.n	8001c60 <tft_init+0xad0>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <tft_init+0xa74>)
 8001b72:	f240 4203 	movw	r2, #1027	; 0x403
 8001b76:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001b78:	e003      	b.n	8001b82 <tft_init+0x9f2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <tft_init+0xa74>)
 8001b7c:	f240 4213 	movw	r2, #1043	; 0x413
 8001b80:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <tft_init+0xab4>)
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	232b      	movs	r3, #43	; 0x2b
 8001b8c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <tft_init+0xa7c>)
 8001b90:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b98:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <tft_init+0xa80>)
 8001b9c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ba4:	801a      	strh	r2, [r3, #0]
        break;
 8001ba6:	e05b      	b.n	8001c60 <tft_init+0xad0>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <tft_init+0xa74>)
 8001baa:	f241 0208 	movw	r2, #4104	; 0x1008
 8001bae:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001bb0:	21b0      	movs	r1, #176	; 0xb0
 8001bb2:	4825      	ldr	r0, [pc, #148]	; (8001c48 <tft_init+0xab8>)
 8001bb4:	f7ff f8d7 	bl	8000d66 <init_table16>
        break;
 8001bb8:	e052      	b.n	8001c60 <tft_init+0xad0>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <tft_init+0xa74>)
 8001bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc0:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001bc2:	21c0      	movs	r1, #192	; 0xc0
 8001bc4:	4821      	ldr	r0, [pc, #132]	; (8001c4c <tft_init+0xabc>)
 8001bc6:	f7ff f8ce 	bl	8000d66 <init_table16>
        p16 = (int16_t *) & height;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <tft_init+0xa7c>)
 8001bcc:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bd4:	801a      	strh	r2, [r3, #0]
        break;
 8001bd6:	e043      	b.n	8001c60 <tft_init+0xad0>
#endif

#ifdef SUPPORT_9806
    case 0x9806:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <tft_init+0xa74>)
 8001bda:	f240 4213 	movw	r2, #1043	; 0x413
 8001bde:	801a      	strh	r2, [r3, #0]
            (0xC1), 4, /* Power Control 2*/0x17, 0x85, 0x85, 0x20,
            (0xE0), 16, 0x00, 0x0C, 0x15, 0x0D, 0x0F, 0x0C, 0x07, 0x05, 0x07, 0x0B, 0x10, 0x10, 0x0D, 0x17, 0x0F, 0x00,
            (0xE1), 16, 0x00, 0x0D, 0x15, 0x0E, 0x10, 0x0D, 0x08, 0x06, 0x07, 0x0C, 0x11, 0x11, 0x0E, 0x17, 0x0F, 0x00,
            (0x35), 1, /*Tearing Effect ON*/0x00,
        };
        table8_ads = ILI9806_regValues, table_size = sizeof(ILI9806_regValues);
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <tft_init+0xac0>)
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	2394      	movs	r3, #148	; 0x94
 8001be6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <tft_init+0xa7c>)
 8001bea:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001bf2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <tft_init+0xa80>)
 8001bf6:	613b      	str	r3, [r7, #16]
        *p16 = 854;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f240 3256 	movw	r2, #854	; 0x356
 8001bfe:	801a      	strh	r2, [r3, #0]
        break;
 8001c00:	e02e      	b.n	8001c60 <tft_init+0xad0>
 8001c02:	bf00      	nop
 8001c04:	2000007e 	.word	0x2000007e
 8001c08:	08005904 	.word	0x08005904
 8001c0c:	08000589 	.word	0x08000589
 8001c10:	08000575 	.word	0x08000575
 8001c14:	20000080 	.word	0x20000080
 8001c18:	08005920 	.word	0x08005920
 8001c1c:	080059e0 	.word	0x080059e0
 8001c20:	08005ab8 	.word	0x08005ab8
 8001c24:	08005b84 	.word	0x08005b84
 8001c28:	08005c40 	.word	0x08005c40
 8001c2c:	08005c60 	.word	0x08005c60
 8001c30:	08005c68 	.word	0x08005c68
 8001c34:	08005c6c 	.word	0x08005c6c
 8001c38:	08005cd4 	.word	0x08005cd4
 8001c3c:	08005d0c 	.word	0x08005d0c
 8001c40:	08005d54 	.word	0x08005d54
 8001c44:	08005d90 	.word	0x08005d90
 8001c48:	08005dbc 	.word	0x08005dbc
 8001c4c:	08005e6c 	.word	0x08005e6c
 8001c50:	08005f2c 	.word	0x08005f2c
#endif
    default:
        p16 = (int16_t *) & width;
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <tft_init+0xb78>)
 8001c56:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
        break;
 8001c5e:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <tft_init+0xb7c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <tft_init+0xb80>)
 8001c76:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <tft_init+0xb0a>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001c7e:	2109      	movs	r1, #9
 8001c80:	4824      	ldr	r0, [pc, #144]	; (8001d14 <tft_init+0xb84>)
 8001c82:	f7ff f817 	bl	8000cb4 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001c86:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	69f8      	ldr	r0, [r7, #28]
 8001c8e:	f7ff f811 	bl	8000cb4 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001c92:	2106      	movs	r1, #6
 8001c94:	4820      	ldr	r0, [pc, #128]	; (8001d18 <tft_init+0xb88>)
 8001c96:	f7ff f80d 	bl	8000cb4 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 fe7a 	bl	8002994 <setRotation>
    invertDisplay(false);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 fda7 	bl	80037f4 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <tft_init+0xb8c>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f249 4288 	movw	r2, #38024	; 0x9488
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d125      	bne.n	8001cfe <tft_init+0xb6e>
		is555 = 0;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <tft_init+0xb90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8001cb8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f001 fa2a 	bl	8003118 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7fe fcf9 	bl	80006be <readPixel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d112      	bne.n	8001cfe <tft_init+0xb6e>
			uint8_t pixfmt = 0x06;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8001cdc:	f107 030f 	add.w	r3, r7, #15
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	203a      	movs	r0, #58	; 0x3a
 8001ce6:	f7fe fd14 	bl	8000712 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <tft_init+0xb7c>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f023 0310 	bic.w	r3, r3, #16
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <tft_init+0xb7c>)
 8001cf6:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <tft_init+0xb90>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	08000575 	.word	0x08000575
 8001d0c:	2000007e 	.word	0x2000007e
 8001d10:	20000082 	.word	0x20000082
 8001d14:	08005fc0 	.word	0x08005fc0
 8001d18:	08005fcc 	.word	0x08005fcc
 8001d1c:	20000080 	.word	0x20000080
 8001d20:	20000078 	.word	0x20000078

08001d24 <readID>:




uint16_t readID(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff f95f 	bl	8000ff0 <readReg>
 8001d32:	4603      	mov	r3, r0
 8001d34:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8001d36:	89fb      	ldrh	r3, [r7, #14]
 8001d38:	f245 4208 	movw	r2, #21512	; 0x5408
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <readID+0x22>
        return 0x5408;
 8001d40:	f245 4308 	movw	r3, #21512	; 0x5408
 8001d44:	e128      	b.n	8001f98 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	f245 4220 	movw	r2, #21536	; 0x5420
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <readID+0x32>
        return 0x5420;
 8001d50:	f245 4320 	movw	r3, #21536	; 0x5420
 8001d54:	e120      	b.n	8001f98 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	f648 1289 	movw	r2, #35209	; 0x8989
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d102      	bne.n	8001d66 <readID+0x42>
        return 0x1289;
 8001d60:	f241 2389 	movw	r3, #4745	; 0x1289
 8001d64:	e118      	b.n	8001f98 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8001d66:	2100      	movs	r1, #0
 8001d68:	2067      	movs	r0, #103	; 0x67
 8001d6a:	f7ff f941 	bl	8000ff0 <readReg>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	f244 7247 	movw	r2, #18247	; 0x4747
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d102      	bne.n	8001d82 <readID+0x5e>
        return 0x8347;
 8001d7c:	f248 3347 	movw	r3, #33607	; 0x8347
 8001d80:	e10a      	b.n	8001f98 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8001d82:	20a1      	movs	r0, #161	; 0xa1
 8001d84:	f7ff f9c2 	bl	800110c <readReg32>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
 8001d8e:	f246 1201 	movw	r2, #24833	; 0x6101
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d102      	bne.n	8001d9c <readID+0x78>
        return 0x1963;
 8001d96:	f641 1363 	movw	r3, #6499	; 0x1963
 8001d9a:	e0fd      	b.n	8001f98 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d102      	bne.n	8001dac <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8001da6:	f241 5326 	movw	r3, #5414	; 0x1526
 8001daa:	e0f5      	b.n	8001f98 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8001dac:	20bf      	movs	r0, #191	; 0xbf
 8001dae:	f7ff f9c8 	bl	8001142 <readReg40>
 8001db2:	4603      	mov	r3, r0
 8001db4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	f248 3257 	movw	r2, #33623	; 0x8357
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d102      	bne.n	8001dc6 <readID+0xa2>
        return 0x8357;
 8001dc0:	f248 3357 	movw	r3, #33623	; 0x8357
 8001dc4:	e0e8      	b.n	8001f98 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	f249 4281 	movw	r2, #38017	; 0x9481
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d102      	bne.n	8001dd6 <readID+0xb2>
        return 0x9481;
 8001dd0:	f249 4381 	movw	r3, #38017	; 0x9481
 8001dd4:	e0e0      	b.n	8001f98 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	f241 5211 	movw	r2, #5393	; 0x1511
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <readID+0xc2>
        return 0x1511;
 8001de0:	f241 5311 	movw	r3, #5393	; 0x1511
 8001de4:	e0d8      	b.n	8001f98 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001dec:	d102      	bne.n	8001df4 <readID+0xd0>
        return 0x1520;
 8001dee:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8001df2:	e0d1      	b.n	8001f98 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	f241 5226 	movw	r2, #5414	; 0x1526
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d102      	bne.n	8001e04 <readID+0xe0>
        return 0x1526;
 8001dfe:	f241 5326 	movw	r3, #5414	; 0x1526
 8001e02:	e0c9      	b.n	8001f98 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	f241 5281 	movw	r2, #5505	; 0x1581
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d102      	bne.n	8001e14 <readID+0xf0>
        return 0x1581;
 8001e0e:	f241 5381 	movw	r3, #5505	; 0x1581
 8001e12:	e0c1      	b.n	8001f98 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001e1a:	d102      	bne.n	8001e22 <readID+0xfe>
        return 0x6814;
 8001e1c:	f646 0314 	movw	r3, #26644	; 0x6814
 8001e20:	e0ba      	b.n	8001f98 <readID+0x274>
    ret = readReg32(0xD4);
 8001e22:	20d4      	movs	r0, #212	; 0xd4
 8001e24:	f7ff f972 	bl	800110c <readReg32>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d102      	bne.n	8001e3c <readID+0x118>
        return 0x5310;
 8001e36:	f245 3310 	movw	r3, #21264	; 0x5310
 8001e3a:	e0ad      	b.n	8001f98 <readID+0x274>
    ret = readReg32(0xD7);
 8001e3c:	20d7      	movs	r0, #215	; 0xd7
 8001e3e:	f7ff f965 	bl	800110c <readReg32>
 8001e42:	4603      	mov	r3, r0
 8001e44:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	f248 0231 	movw	r2, #32817	; 0x8031
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <readID+0x132>
        return 0x8031;
 8001e50:	f248 0331 	movw	r3, #32817	; 0x8031
 8001e54:	e0a0      	b.n	8001f98 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8001e56:	20ef      	movs	r0, #239	; 0xef
 8001e58:	f7ff f973 	bl	8001142 <readReg40>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	f249 3227 	movw	r2, #37671	; 0x9327
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d102      	bne.n	8001e70 <readID+0x14c>
        return 0x9327;
 8001e6a:	f249 3327 	movw	r3, #37671	; 0x9327
 8001e6e:	e093      	b.n	8001f98 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8001e70:	20fe      	movs	r0, #254	; 0xfe
 8001e72:	f7ff f94b 	bl	800110c <readReg32>
 8001e76:	4603      	mov	r3, r0
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d102      	bne.n	8001e8c <readID+0x168>
        return 0x2053;
 8001e86:	f242 0353 	movw	r3, #8275	; 0x2053
 8001e8a:	e085      	b.n	8001f98 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f7ff f93d 	bl	800110c <readReg32>
 8001e92:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d122      	bne.n	8001eea <readID+0x1c6>
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eaa:	d11e      	bne.n	8001eea <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8001eac:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <readID+0x27c>)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	8019      	strh	r1, [r3, #0]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	0c12      	lsrs	r2, r2, #16
 8001eba:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	20b9      	movs	r0, #185	; 0xb9
 8001ec4:	f7fe fc25 	bl	8000712 <pushCommand>
        msb = readReg(0xD0,0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	20d0      	movs	r0, #208	; 0xd0
 8001ecc:	f7ff f890 	bl	8000ff0 <readReg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b99      	cmp	r3, #153	; 0x99
 8001ed8:	d101      	bne.n	8001ede <readID+0x1ba>
 8001eda:	2399      	movs	r3, #153	; 0x99
 8001edc:	e05c      	b.n	8001f98 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b90      	cmp	r3, #144	; 0x90
 8001ee2:	d102      	bne.n	8001eea <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8001ee4:	f249 0390 	movw	r3, #37008	; 0x9090
 8001ee8:	e056      	b.n	8001f98 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	f241 5226 	movw	r2, #5414	; 0x1526
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8001ef4:	f241 5326 	movw	r3, #5414	; 0x1526
 8001ef8:	e04e      	b.n	8001f98 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <readID+0x1e6>
        return 0x7735;
 8001f04:	f247 7335 	movw	r3, #30517	; 0x7735
 8001f08:	e046      	b.n	8001f98 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	f248 5252 	movw	r2, #34130	; 0x8552
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d102      	bne.n	8001f1a <readID+0x1f6>
        return 0x7789;
 8001f14:	f247 7389 	movw	r3, #30601	; 0x7789
 8001f18:	e03e      	b.n	8001f98 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d102      	bne.n	8001f2a <readID+0x206>
        return 0xAC11;
 8001f24:	f64a 4311 	movw	r3, #44049	; 0xac11
 8001f28:	e036      	b.n	8001f98 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8001f2a:	20d3      	movs	r0, #211	; 0xd3
 8001f2c:	f7ff f8ee 	bl	800110c <readReg32>
 8001f30:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	f249 1263 	movw	r2, #37219	; 0x9163
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <readID+0x222>
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	e028      	b.n	8001f98 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8001f46:	20d3      	movs	r0, #211	; 0xd3
 8001f48:	f7ff f8e0 	bl	800110c <readReg32>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b93      	cmp	r3, #147	; 0x93
 8001f5c:	d00b      	beq.n	8001f76 <readID+0x252>
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b94      	cmp	r3, #148	; 0x94
 8001f62:	d008      	beq.n	8001f76 <readID+0x252>
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b98      	cmp	r3, #152	; 0x98
 8001f68:	d005      	beq.n	8001f76 <readID+0x252>
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b77      	cmp	r3, #119	; 0x77
 8001f6e:	d002      	beq.n	8001f76 <readID+0x252>
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b16      	cmp	r3, #22
 8001f74:	d101      	bne.n	8001f7a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8001f76:	89fb      	ldrh	r3, [r7, #14]
 8001f78:	e00e      	b.n	8001f98 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	2bd3      	cmp	r3, #211	; 0xd3
 8001f7e:	d004      	beq.n	8001f8a <readID+0x266>
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <readID+0x26a>
        return ret;             //16-bit write-only bus
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	e004      	b.n	8001f98 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff f82d 	bl	8000ff0 <readReg>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	080051b8 	.word	0x080051b8

08001fa4 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	81fb      	strh	r3, [r7, #14]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	81bb      	strh	r3, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8001fba:	4b8d      	ldr	r3, [pc, #564]	; (80021f0 <readGRAM+0x24c>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fcc:	2300      	movs	r3, #0
 8001fce:	843b      	strh	r3, [r7, #32]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8001fd4:	4b87      	ldr	r3, [pc, #540]	; (80021f4 <readGRAM+0x250>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <readGRAM+0x48>
 8001fdc:	4b86      	ldr	r3, [pc, #536]	; (80021f8 <readGRAM+0x254>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <readGRAM+0x48>
        _MR = 0x2E;
 8001fe8:	232e      	movs	r3, #46	; 0x2e
 8001fea:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8001fec:	4b83      	ldr	r3, [pc, #524]	; (80021fc <readGRAM+0x258>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f241 6202 	movw	r2, #5634	; 0x1602
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <readGRAM+0x58>
 8001ff8:	232e      	movs	r3, #46	; 0x2e
 8001ffa:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001ffc:	89fa      	ldrh	r2, [r7, #14]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	b21c      	sxth	r4, r3
 800200a:	89ba      	ldrh	r2, [r7, #12]
 800200c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800200e:	4413      	add	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29b      	uxth	r3, r3
 8002016:	b21b      	sxth	r3, r3
 8002018:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800201c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002020:	4622      	mov	r2, r4
 8002022:	f001 f92f 	bl	8003284 <setAddrWindow>
    while (n > 0) {
 8002026:	f000 bc8c 	b.w	8002942 <readGRAM+0x99e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <readGRAM+0x254>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <readGRAM+0x25c>)
 8002038:	8818      	ldrh	r0, [r3, #0]
 800203a:	89fa      	ldrh	r2, [r7, #14]
 800203c:	8bfb      	ldrh	r3, [r7, #30]
 800203e:	4413      	add	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fb53 	bl	80006ee <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002048:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <readGRAM+0x260>)
 800204a:	8818      	ldrh	r0, [r3, #0]
 800204c:	89ba      	ldrh	r2, [r7, #12]
 800204e:	8c3b      	ldrh	r3, [r7, #32]
 8002050:	4413      	add	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fb4a 	bl	80006ee <WriteCmdData>
        }
        CS_ACTIVE;
 800205a:	2102      	movs	r1, #2
 800205c:	486a      	ldr	r0, [pc, #424]	; (8002208 <readGRAM+0x264>)
 800205e:	f7fe fa3b 	bl	80004d8 <PIN_LOW>
        WriteCmd(_MR);
 8002062:	2104      	movs	r1, #4
 8002064:	4868      	ldr	r0, [pc, #416]	; (8002208 <readGRAM+0x264>)
 8002066:	f7fe fa37 	bl	80004d8 <PIN_LOW>
 800206a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	777b      	strb	r3, [r7, #29]
 8002072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002074:	773b      	strb	r3, [r7, #28]
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <readGRAM+0x264>)
 8002078:	4a64      	ldr	r2, [pc, #400]	; (800220c <readGRAM+0x268>)
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <readGRAM+0x26c>)
 800207e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	7f7b      	ldrb	r3, [r7, #29]
 8002086:	035b      	lsls	r3, r3, #13
 8002088:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	109b      	asrs	r3, r3, #2
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	431a      	orrs	r2, r3
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <readGRAM+0x264>)
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	7f7b      	ldrb	r3, [r7, #29]
 800209c:	4a5c      	ldr	r2, [pc, #368]	; (8002210 <readGRAM+0x26c>)
 800209e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80020a2:	6113      	str	r3, [r2, #16]
 80020a4:	2108      	movs	r1, #8
 80020a6:	4858      	ldr	r0, [pc, #352]	; (8002208 <readGRAM+0x264>)
 80020a8:	f7fe fa16 	bl	80004d8 <PIN_LOW>
 80020ac:	2108      	movs	r1, #8
 80020ae:	4856      	ldr	r0, [pc, #344]	; (8002208 <readGRAM+0x264>)
 80020b0:	f7fe fa22 	bl	80004f8 <PIN_HIGH>
 80020b4:	2108      	movs	r1, #8
 80020b6:	4854      	ldr	r0, [pc, #336]	; (8002208 <readGRAM+0x264>)
 80020b8:	f7fe fa1e 	bl	80004f8 <PIN_HIGH>
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <readGRAM+0x264>)
 80020be:	4a53      	ldr	r2, [pc, #332]	; (800220c <readGRAM+0x268>)
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <readGRAM+0x26c>)
 80020c4:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	7f3b      	ldrb	r3, [r7, #28]
 80020cc:	035b      	lsls	r3, r3, #13
 80020ce:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80020d2:	7f3b      	ldrb	r3, [r7, #28]
 80020d4:	109b      	asrs	r3, r3, #2
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	431a      	orrs	r2, r3
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <readGRAM+0x264>)
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	7f3b      	ldrb	r3, [r7, #28]
 80020e2:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <readGRAM+0x26c>)
 80020e4:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80020e8:	6113      	str	r3, [r2, #16]
 80020ea:	2108      	movs	r1, #8
 80020ec:	4846      	ldr	r0, [pc, #280]	; (8002208 <readGRAM+0x264>)
 80020ee:	f7fe f9f3 	bl	80004d8 <PIN_LOW>
 80020f2:	2108      	movs	r1, #8
 80020f4:	4844      	ldr	r0, [pc, #272]	; (8002208 <readGRAM+0x264>)
 80020f6:	f7fe f9ff 	bl	80004f8 <PIN_HIGH>
 80020fa:	2108      	movs	r1, #8
 80020fc:	4842      	ldr	r0, [pc, #264]	; (8002208 <readGRAM+0x264>)
 80020fe:	f7fe f9fb 	bl	80004f8 <PIN_HIGH>
 8002102:	2104      	movs	r1, #4
 8002104:	4840      	ldr	r0, [pc, #256]	; (8002208 <readGRAM+0x264>)
 8002106:	f7fe f9f7 	bl	80004f8 <PIN_HIGH>
        setReadDir();
 800210a:	f7fe fb15 	bl	8000738 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800210e:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <readGRAM+0x254>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 813e 	bne.w	8002398 <readGRAM+0x3f4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <readGRAM+0x254>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <readGRAM+0x190>
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <readGRAM+0x258>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f241 2289 	movw	r2, #4745	; 0x1289
 8002130:	4293      	cmp	r3, r2
 8002132:	d16f      	bne.n	8002214 <readGRAM+0x270>
            READ_8(r);
 8002134:	2110      	movs	r1, #16
 8002136:	4834      	ldr	r0, [pc, #208]	; (8002208 <readGRAM+0x264>)
 8002138:	f7fe f9de 	bl	80004f8 <PIN_HIGH>
 800213c:	2110      	movs	r1, #16
 800213e:	4832      	ldr	r0, [pc, #200]	; (8002208 <readGRAM+0x264>)
 8002140:	f7fe f9ca 	bl	80004d8 <PIN_LOW>
 8002144:	2110      	movs	r1, #16
 8002146:	4830      	ldr	r0, [pc, #192]	; (8002208 <readGRAM+0x264>)
 8002148:	f7fe f9c6 	bl	80004d8 <PIN_LOW>
 800214c:	2110      	movs	r1, #16
 800214e:	482e      	ldr	r0, [pc, #184]	; (8002208 <readGRAM+0x264>)
 8002150:	f7fe f9c2 	bl	80004d8 <PIN_LOW>
 8002154:	2110      	movs	r1, #16
 8002156:	482c      	ldr	r0, [pc, #176]	; (8002208 <readGRAM+0x264>)
 8002158:	f7fe f9be 	bl	80004d8 <PIN_LOW>
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <readGRAM+0x26c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <readGRAM+0x26c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <readGRAM+0x264>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	0b5b      	lsrs	r3, r3, #13
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <readGRAM+0x26c>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <readGRAM+0x26c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <readGRAM+0x26c>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <readGRAM+0x26c>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <readGRAM+0x264>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	75fb      	strb	r3, [r7, #23]
 80021de:	2110      	movs	r1, #16
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <readGRAM+0x264>)
 80021e2:	f7fe f989 	bl	80004f8 <PIN_HIGH>
 80021e6:	2110      	movs	r1, #16
 80021e8:	4807      	ldr	r0, [pc, #28]	; (8002208 <readGRAM+0x264>)
 80021ea:	f7fe f985 	bl	80004f8 <PIN_HIGH>
 80021ee:	e0d3      	b.n	8002398 <readGRAM+0x3f4>
 80021f0:	2000008c 	.word	0x2000008c
 80021f4:	20000077 	.word	0x20000077
 80021f8:	2000007e 	.word	0x2000007e
 80021fc:	20000080 	.word	0x20000080
 8002200:	20000088 	.word	0x20000088
 8002204:	2000008a 	.word	0x2000008a
 8002208:	40010800 	.word	0x40010800
 800220c:	80200000 	.word	0x80200000
 8002210:	40010c00 	.word	0x40010c00
        } else {
            READ_16(dummy);
 8002214:	2110      	movs	r1, #16
 8002216:	4893      	ldr	r0, [pc, #588]	; (8002464 <readGRAM+0x4c0>)
 8002218:	f7fe f96e 	bl	80004f8 <PIN_HIGH>
 800221c:	2110      	movs	r1, #16
 800221e:	4891      	ldr	r0, [pc, #580]	; (8002464 <readGRAM+0x4c0>)
 8002220:	f7fe f95a 	bl	80004d8 <PIN_LOW>
 8002224:	2110      	movs	r1, #16
 8002226:	488f      	ldr	r0, [pc, #572]	; (8002464 <readGRAM+0x4c0>)
 8002228:	f7fe f956 	bl	80004d8 <PIN_LOW>
 800222c:	2110      	movs	r1, #16
 800222e:	488d      	ldr	r0, [pc, #564]	; (8002464 <readGRAM+0x4c0>)
 8002230:	f7fe f952 	bl	80004d8 <PIN_LOW>
 8002234:	2110      	movs	r1, #16
 8002236:	488b      	ldr	r0, [pc, #556]	; (8002464 <readGRAM+0x4c0>)
 8002238:	f7fe f94e 	bl	80004d8 <PIN_LOW>
 800223c:	4b8a      	ldr	r3, [pc, #552]	; (8002468 <readGRAM+0x4c4>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b87      	ldr	r3, [pc, #540]	; (8002468 <readGRAM+0x4c4>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <readGRAM+0x4c0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	0b5b      	lsrs	r3, r3, #13
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <readGRAM+0x4c4>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <readGRAM+0x4c4>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b77      	ldr	r3, [pc, #476]	; (8002468 <readGRAM+0x4c4>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b73      	ldr	r3, [pc, #460]	; (8002468 <readGRAM+0x4c4>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <readGRAM+0x4c0>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	76fb      	strb	r3, [r7, #27]
 80022be:	2110      	movs	r1, #16
 80022c0:	4868      	ldr	r0, [pc, #416]	; (8002464 <readGRAM+0x4c0>)
 80022c2:	f7fe f919 	bl	80004f8 <PIN_HIGH>
 80022c6:	2110      	movs	r1, #16
 80022c8:	4866      	ldr	r0, [pc, #408]	; (8002464 <readGRAM+0x4c0>)
 80022ca:	f7fe f915 	bl	80004f8 <PIN_HIGH>
 80022ce:	2110      	movs	r1, #16
 80022d0:	4864      	ldr	r0, [pc, #400]	; (8002464 <readGRAM+0x4c0>)
 80022d2:	f7fe f911 	bl	80004f8 <PIN_HIGH>
 80022d6:	2110      	movs	r1, #16
 80022d8:	4862      	ldr	r0, [pc, #392]	; (8002464 <readGRAM+0x4c0>)
 80022da:	f7fe f8fd 	bl	80004d8 <PIN_LOW>
 80022de:	2110      	movs	r1, #16
 80022e0:	4860      	ldr	r0, [pc, #384]	; (8002464 <readGRAM+0x4c0>)
 80022e2:	f7fe f8f9 	bl	80004d8 <PIN_LOW>
 80022e6:	2110      	movs	r1, #16
 80022e8:	485e      	ldr	r0, [pc, #376]	; (8002464 <readGRAM+0x4c0>)
 80022ea:	f7fe f8f5 	bl	80004d8 <PIN_LOW>
 80022ee:	2110      	movs	r1, #16
 80022f0:	485c      	ldr	r0, [pc, #368]	; (8002464 <readGRAM+0x4c0>)
 80022f2:	f7fe f8f1 	bl	80004d8 <PIN_LOW>
 80022f6:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <readGRAM+0x4c4>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b59      	ldr	r3, [pc, #356]	; (8002468 <readGRAM+0x4c4>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	b29b      	uxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <readGRAM+0x4c0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	0b5b      	lsrs	r3, r3, #13
 8002318:	b29b      	uxth	r3, r3
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	b29b      	uxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <readGRAM+0x4c4>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	b29b      	uxth	r3, r3
 8002330:	4313      	orrs	r3, r2
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <readGRAM+0x4c4>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	b29b      	uxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <readGRAM+0x4c4>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	b29b      	uxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <readGRAM+0x4c4>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	b29b      	uxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <readGRAM+0x4c0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	b29b      	uxth	r3, r3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	b29b      	uxth	r3, r3
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	b29b      	uxth	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	833b      	strh	r3, [r7, #24]
 8002378:	2110      	movs	r1, #16
 800237a:	483a      	ldr	r0, [pc, #232]	; (8002464 <readGRAM+0x4c0>)
 800237c:	f7fe f8bc 	bl	80004f8 <PIN_HIGH>
 8002380:	2110      	movs	r1, #16
 8002382:	4838      	ldr	r0, [pc, #224]	; (8002464 <readGRAM+0x4c0>)
 8002384:	f7fe f8b8 	bl	80004f8 <PIN_HIGH>
 8002388:	7efb      	ldrb	r3, [r7, #27]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <readGRAM+0x4c8>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	f241 5211 	movw	r2, #5393	; 0x1511
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f040 82a5 	bne.w	80028f0 <readGRAM+0x94c>
 80023a6:	2110      	movs	r1, #16
 80023a8:	482e      	ldr	r0, [pc, #184]	; (8002464 <readGRAM+0x4c0>)
 80023aa:	f7fe f8a5 	bl	80004f8 <PIN_HIGH>
 80023ae:	2110      	movs	r1, #16
 80023b0:	482c      	ldr	r0, [pc, #176]	; (8002464 <readGRAM+0x4c0>)
 80023b2:	f7fe f891 	bl	80004d8 <PIN_LOW>
 80023b6:	2110      	movs	r1, #16
 80023b8:	482a      	ldr	r0, [pc, #168]	; (8002464 <readGRAM+0x4c0>)
 80023ba:	f7fe f88d 	bl	80004d8 <PIN_LOW>
 80023be:	2110      	movs	r1, #16
 80023c0:	4828      	ldr	r0, [pc, #160]	; (8002464 <readGRAM+0x4c0>)
 80023c2:	f7fe f889 	bl	80004d8 <PIN_LOW>
 80023c6:	2110      	movs	r1, #16
 80023c8:	4826      	ldr	r0, [pc, #152]	; (8002464 <readGRAM+0x4c0>)
 80023ca:	f7fe f885 	bl	80004d8 <PIN_LOW>
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <readGRAM+0x4c4>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <readGRAM+0x4c4>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <readGRAM+0x4c0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0b5b      	lsrs	r3, r3, #13
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <readGRAM+0x4c4>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <readGRAM+0x4c4>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <readGRAM+0x4c4>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <readGRAM+0x4c4>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <readGRAM+0x4c0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	75fb      	strb	r3, [r7, #23]
 8002450:	2110      	movs	r1, #16
 8002452:	4804      	ldr	r0, [pc, #16]	; (8002464 <readGRAM+0x4c0>)
 8002454:	f7fe f850 	bl	80004f8 <PIN_HIGH>
 8002458:	2110      	movs	r1, #16
 800245a:	4802      	ldr	r0, [pc, #8]	; (8002464 <readGRAM+0x4c0>)
 800245c:	f7fe f84c 	bl	80004f8 <PIN_HIGH>
        while (n)
 8002460:	e246      	b.n	80028f0 <readGRAM+0x94c>
 8002462:	bf00      	nop
 8002464:	40010800 	.word	0x40010800
 8002468:	40010c00 	.word	0x40010c00
 800246c:	20000080 	.word	0x20000080
        {
            if (_lcd_capable & READ_24BITS)
 8002470:	4b9a      	ldr	r3, [pc, #616]	; (80026dc <readGRAM+0x738>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8135 	beq.w	80026e8 <readGRAM+0x744>
            {
                READ_8(r);
 800247e:	2110      	movs	r1, #16
 8002480:	4897      	ldr	r0, [pc, #604]	; (80026e0 <readGRAM+0x73c>)
 8002482:	f7fe f839 	bl	80004f8 <PIN_HIGH>
 8002486:	2110      	movs	r1, #16
 8002488:	4895      	ldr	r0, [pc, #596]	; (80026e0 <readGRAM+0x73c>)
 800248a:	f7fe f825 	bl	80004d8 <PIN_LOW>
 800248e:	2110      	movs	r1, #16
 8002490:	4893      	ldr	r0, [pc, #588]	; (80026e0 <readGRAM+0x73c>)
 8002492:	f7fe f821 	bl	80004d8 <PIN_LOW>
 8002496:	2110      	movs	r1, #16
 8002498:	4891      	ldr	r0, [pc, #580]	; (80026e0 <readGRAM+0x73c>)
 800249a:	f7fe f81d 	bl	80004d8 <PIN_LOW>
 800249e:	2110      	movs	r1, #16
 80024a0:	488f      	ldr	r0, [pc, #572]	; (80026e0 <readGRAM+0x73c>)
 80024a2:	f7fe f819 	bl	80004d8 <PIN_LOW>
 80024a6:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <readGRAM+0x740>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <readGRAM+0x740>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b87      	ldr	r3, [pc, #540]	; (80026e0 <readGRAM+0x73c>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0b5b      	lsrs	r3, r3, #13
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <readGRAM+0x740>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <readGRAM+0x740>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <readGRAM+0x740>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <readGRAM+0x740>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <readGRAM+0x73c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	75fb      	strb	r3, [r7, #23]
 8002528:	2110      	movs	r1, #16
 800252a:	486d      	ldr	r0, [pc, #436]	; (80026e0 <readGRAM+0x73c>)
 800252c:	f7fd ffe4 	bl	80004f8 <PIN_HIGH>
 8002530:	2110      	movs	r1, #16
 8002532:	486b      	ldr	r0, [pc, #428]	; (80026e0 <readGRAM+0x73c>)
 8002534:	f7fd ffe0 	bl	80004f8 <PIN_HIGH>
                READ_8(g);
 8002538:	2110      	movs	r1, #16
 800253a:	4869      	ldr	r0, [pc, #420]	; (80026e0 <readGRAM+0x73c>)
 800253c:	f7fd ffdc 	bl	80004f8 <PIN_HIGH>
 8002540:	2110      	movs	r1, #16
 8002542:	4867      	ldr	r0, [pc, #412]	; (80026e0 <readGRAM+0x73c>)
 8002544:	f7fd ffc8 	bl	80004d8 <PIN_LOW>
 8002548:	2110      	movs	r1, #16
 800254a:	4865      	ldr	r0, [pc, #404]	; (80026e0 <readGRAM+0x73c>)
 800254c:	f7fd ffc4 	bl	80004d8 <PIN_LOW>
 8002550:	2110      	movs	r1, #16
 8002552:	4863      	ldr	r0, [pc, #396]	; (80026e0 <readGRAM+0x73c>)
 8002554:	f7fd ffc0 	bl	80004d8 <PIN_LOW>
 8002558:	2110      	movs	r1, #16
 800255a:	4861      	ldr	r0, [pc, #388]	; (80026e0 <readGRAM+0x73c>)
 800255c:	f7fd ffbc 	bl	80004d8 <PIN_LOW>
 8002560:	4b60      	ldr	r3, [pc, #384]	; (80026e4 <readGRAM+0x740>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <readGRAM+0x740>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <readGRAM+0x73c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	0b5b      	lsrs	r3, r3, #13
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <readGRAM+0x740>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <readGRAM+0x740>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <readGRAM+0x740>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <readGRAM+0x740>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <readGRAM+0x73c>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	757b      	strb	r3, [r7, #21]
 80025e2:	2110      	movs	r1, #16
 80025e4:	483e      	ldr	r0, [pc, #248]	; (80026e0 <readGRAM+0x73c>)
 80025e6:	f7fd ff87 	bl	80004f8 <PIN_HIGH>
 80025ea:	2110      	movs	r1, #16
 80025ec:	483c      	ldr	r0, [pc, #240]	; (80026e0 <readGRAM+0x73c>)
 80025ee:	f7fd ff83 	bl	80004f8 <PIN_HIGH>
                READ_8(b);
 80025f2:	2110      	movs	r1, #16
 80025f4:	483a      	ldr	r0, [pc, #232]	; (80026e0 <readGRAM+0x73c>)
 80025f6:	f7fd ff7f 	bl	80004f8 <PIN_HIGH>
 80025fa:	2110      	movs	r1, #16
 80025fc:	4838      	ldr	r0, [pc, #224]	; (80026e0 <readGRAM+0x73c>)
 80025fe:	f7fd ff6b 	bl	80004d8 <PIN_LOW>
 8002602:	2110      	movs	r1, #16
 8002604:	4836      	ldr	r0, [pc, #216]	; (80026e0 <readGRAM+0x73c>)
 8002606:	f7fd ff67 	bl	80004d8 <PIN_LOW>
 800260a:	2110      	movs	r1, #16
 800260c:	4834      	ldr	r0, [pc, #208]	; (80026e0 <readGRAM+0x73c>)
 800260e:	f7fd ff63 	bl	80004d8 <PIN_LOW>
 8002612:	2110      	movs	r1, #16
 8002614:	4832      	ldr	r0, [pc, #200]	; (80026e0 <readGRAM+0x73c>)
 8002616:	f7fd ff5f 	bl	80004d8 <PIN_LOW>
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <readGRAM+0x740>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <readGRAM+0x740>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <readGRAM+0x73c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <readGRAM+0x740>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <readGRAM+0x740>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <readGRAM+0x740>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <readGRAM+0x740>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <readGRAM+0x73c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	753b      	strb	r3, [r7, #20]
 800269c:	2110      	movs	r1, #16
 800269e:	4810      	ldr	r0, [pc, #64]	; (80026e0 <readGRAM+0x73c>)
 80026a0:	f7fd ff2a 	bl	80004f8 <PIN_HIGH>
 80026a4:	2110      	movs	r1, #16
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <readGRAM+0x73c>)
 80026a8:	f7fd ff26 	bl	80004f8 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <readGRAM+0x738>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <readGRAM+0x726>
                    ret = color565(b, g, r);
 80026b8:	7dfa      	ldrb	r2, [r7, #23]
 80026ba:	7d79      	ldrb	r1, [r7, #21]
 80026bc:	7d3b      	ldrb	r3, [r7, #20]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ffd8 	bl	8000674 <color565>
 80026c4:	4603      	mov	r3, r0
 80026c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026c8:	e0f7      	b.n	80028ba <readGRAM+0x916>
                else
                    ret = color565(r, g, b);
 80026ca:	7d3a      	ldrb	r2, [r7, #20]
 80026cc:	7d79      	ldrb	r1, [r7, #21]
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ffcf 	bl	8000674 <color565>
 80026d6:	4603      	mov	r3, r0
 80026d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026da:	e0ee      	b.n	80028ba <readGRAM+0x916>
 80026dc:	2000007e 	.word	0x2000007e
 80026e0:	40010800 	.word	0x40010800
 80026e4:	40010c00 	.word	0x40010c00
            } else
            {
                READ_16(ret);
 80026e8:	2110      	movs	r1, #16
 80026ea:	48a6      	ldr	r0, [pc, #664]	; (8002984 <readGRAM+0x9e0>)
 80026ec:	f7fd ff04 	bl	80004f8 <PIN_HIGH>
 80026f0:	2110      	movs	r1, #16
 80026f2:	48a4      	ldr	r0, [pc, #656]	; (8002984 <readGRAM+0x9e0>)
 80026f4:	f7fd fef0 	bl	80004d8 <PIN_LOW>
 80026f8:	2110      	movs	r1, #16
 80026fa:	48a2      	ldr	r0, [pc, #648]	; (8002984 <readGRAM+0x9e0>)
 80026fc:	f7fd feec 	bl	80004d8 <PIN_LOW>
 8002700:	2110      	movs	r1, #16
 8002702:	48a0      	ldr	r0, [pc, #640]	; (8002984 <readGRAM+0x9e0>)
 8002704:	f7fd fee8 	bl	80004d8 <PIN_LOW>
 8002708:	2110      	movs	r1, #16
 800270a:	489e      	ldr	r0, [pc, #632]	; (8002984 <readGRAM+0x9e0>)
 800270c:	f7fd fee4 	bl	80004d8 <PIN_LOW>
 8002710:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <readGRAM+0x9e4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b9a      	ldr	r3, [pc, #616]	; (8002988 <readGRAM+0x9e4>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b95      	ldr	r3, [pc, #596]	; (8002984 <readGRAM+0x9e0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	0b5b      	lsrs	r3, r3, #13
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b92      	ldr	r3, [pc, #584]	; (8002988 <readGRAM+0x9e4>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4313      	orrs	r3, r2
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <readGRAM+0x9e4>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b8a      	ldr	r3, [pc, #552]	; (8002988 <readGRAM+0x9e4>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4313      	orrs	r3, r2
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <readGRAM+0x9e4>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b81      	ldr	r3, [pc, #516]	; (8002984 <readGRAM+0x9e0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	75bb      	strb	r3, [r7, #22]
 8002792:	2110      	movs	r1, #16
 8002794:	487b      	ldr	r0, [pc, #492]	; (8002984 <readGRAM+0x9e0>)
 8002796:	f7fd feaf 	bl	80004f8 <PIN_HIGH>
 800279a:	2110      	movs	r1, #16
 800279c:	4879      	ldr	r0, [pc, #484]	; (8002984 <readGRAM+0x9e0>)
 800279e:	f7fd feab 	bl	80004f8 <PIN_HIGH>
 80027a2:	2110      	movs	r1, #16
 80027a4:	4877      	ldr	r0, [pc, #476]	; (8002984 <readGRAM+0x9e0>)
 80027a6:	f7fd fea7 	bl	80004f8 <PIN_HIGH>
 80027aa:	2110      	movs	r1, #16
 80027ac:	4875      	ldr	r0, [pc, #468]	; (8002984 <readGRAM+0x9e0>)
 80027ae:	f7fd fe93 	bl	80004d8 <PIN_LOW>
 80027b2:	2110      	movs	r1, #16
 80027b4:	4873      	ldr	r0, [pc, #460]	; (8002984 <readGRAM+0x9e0>)
 80027b6:	f7fd fe8f 	bl	80004d8 <PIN_LOW>
 80027ba:	2110      	movs	r1, #16
 80027bc:	4871      	ldr	r0, [pc, #452]	; (8002984 <readGRAM+0x9e0>)
 80027be:	f7fd fe8b 	bl	80004d8 <PIN_LOW>
 80027c2:	2110      	movs	r1, #16
 80027c4:	486f      	ldr	r0, [pc, #444]	; (8002984 <readGRAM+0x9e0>)
 80027c6:	f7fd fe87 	bl	80004d8 <PIN_LOW>
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <readGRAM+0x9e4>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <readGRAM+0x9e4>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <readGRAM+0x9e0>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b63      	ldr	r3, [pc, #396]	; (8002988 <readGRAM+0x9e4>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	b29b      	uxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <readGRAM+0x9e4>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	b29b      	uxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <readGRAM+0x9e4>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	b29b      	uxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <readGRAM+0x9e4>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	b29b      	uxth	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b52      	ldr	r3, [pc, #328]	; (8002984 <readGRAM+0x9e0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	b29b      	uxth	r3, r3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	b29b      	uxth	r3, r3
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	b29b      	uxth	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800284c:	2110      	movs	r1, #16
 800284e:	484d      	ldr	r0, [pc, #308]	; (8002984 <readGRAM+0x9e0>)
 8002850:	f7fd fe52 	bl	80004f8 <PIN_HIGH>
 8002854:	2110      	movs	r1, #16
 8002856:	484b      	ldr	r0, [pc, #300]	; (8002984 <readGRAM+0x9e0>)
 8002858:	f7fd fe4e 	bl	80004f8 <PIN_HIGH>
 800285c:	7dbb      	ldrb	r3, [r7, #22]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	b21a      	sxth	r2, r3
 8002862:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002866:	4313      	orrs	r3, r2
 8002868:	b21b      	sxth	r3, r3
 800286a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <readGRAM+0x9e8>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <readGRAM+0x8e8>
                    ret = (ret >> 8) | (ret << 8);
 8002878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	b29b      	uxth	r3, r3
 800287e:	b21a      	sxth	r2, r3
 8002880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	b21b      	sxth	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b21b      	sxth	r3, r3
 800288a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <readGRAM+0x9e8>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <readGRAM+0x916>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002898:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800289c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028a4:	0adb      	lsrs	r3, r3, #11
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028b0:	02db      	lsls	r3, r3, #11
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <readGRAM+0x9ec>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <readGRAM+0x92a>
 80028c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe88 	bl	80005da <color555_to_565>
 80028ca:	4603      	mov	r3, r0
 80028cc:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	60ba      	str	r2, [r7, #8]
 80028d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028d6:	801a      	strh	r2, [r3, #0]
            n--;
 80028d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <readGRAM+0x9e8>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <readGRAM+0x958>
        while (n)
 80028f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f adbb 	bne.w	8002470 <readGRAM+0x4cc>
 80028fa:	e000      	b.n	80028fe <readGRAM+0x95a>
                break;
 80028fc:	bf00      	nop
        }
        if (++col >= w) {
 80028fe:	8bfb      	ldrh	r3, [r7, #30]
 8002900:	3301      	adds	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	83fb      	strh	r3, [r7, #30]
 8002906:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800290a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290e:	429a      	cmp	r2, r3
 8002910:	db0d      	blt.n	800292e <readGRAM+0x98a>
            col = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8002916:	8c3b      	ldrh	r3, [r7, #32]
 8002918:	3301      	adds	r3, #1
 800291a:	b29b      	uxth	r3, r3
 800291c:	843b      	strh	r3, [r7, #32]
 800291e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002922:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002926:	429a      	cmp	r2, r3
 8002928:	db01      	blt.n	800292e <readGRAM+0x98a>
                row = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800292e:	2110      	movs	r1, #16
 8002930:	4814      	ldr	r0, [pc, #80]	; (8002984 <readGRAM+0x9e0>)
 8002932:	f7fd fde1 	bl	80004f8 <PIN_HIGH>
        CS_IDLE;
 8002936:	2102      	movs	r1, #2
 8002938:	4812      	ldr	r0, [pc, #72]	; (8002984 <readGRAM+0x9e0>)
 800293a:	f7fd fddd 	bl	80004f8 <PIN_HIGH>
        setWriteDir();
 800293e:	f7fd ff25 	bl	800078c <setWriteDir>
    while (n > 0) {
 8002942:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002946:	2b00      	cmp	r3, #0
 8002948:	f73f ab6f 	bgt.w	800202a <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <readGRAM+0x9e8>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d110      	bne.n	800297a <readGRAM+0x9d6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002958:	f7fd fe0c 	bl	8000574 <width>
 800295c:	4603      	mov	r3, r0
 800295e:	3b01      	subs	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	b21c      	sxth	r4, r3
 8002964:	f7fd fe10 	bl	8000588 <height>
 8002968:	4603      	mov	r3, r0
 800296a:	3b01      	subs	r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	b21b      	sxth	r3, r3
 8002970:	4622      	mov	r2, r4
 8002972:	2100      	movs	r1, #0
 8002974:	2000      	movs	r0, #0
 8002976:	f000 fc85 	bl	8003284 <setAddrWindow>
    return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	372c      	adds	r7, #44	; 0x2c
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	40010800 	.word	0x40010800
 8002988:	40010c00 	.word	0x40010c00
 800298c:	2000007e 	.word	0x2000007e
 8002990:	20000078 	.word	0x20000078

08002994 <setRotation>:

void setRotation(uint8_t r)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800299e:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <setRotation+0x280>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b9a      	ldr	r3, [pc, #616]	; (8002c18 <setRotation+0x284>)
 80029ae:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80029b0:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <setRotation+0x284>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <setRotation+0x2e>
 80029bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80029c0:	e001      	b.n	80029c6 <setRotation+0x32>
 80029c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80029c6:	4b95      	ldr	r3, [pc, #596]	; (8002c1c <setRotation+0x288>)
 80029c8:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80029ca:	4b93      	ldr	r3, [pc, #588]	; (8002c18 <setRotation+0x284>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <setRotation+0x48>
 80029d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80029da:	e001      	b.n	80029e0 <setRotation+0x4c>
 80029dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80029e0:	4b8f      	ldr	r3, [pc, #572]	; (8002c20 <setRotation+0x28c>)
 80029e2:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80029e4:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <setRotation+0x284>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d817      	bhi.n	8002a1c <setRotation+0x88>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <setRotation+0x60>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a0b 	.word	0x08002a0b
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a17 	.word	0x08002a17
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002a04:	2348      	movs	r3, #72	; 0x48
 8002a06:	72fb      	strb	r3, [r7, #11]
       break;
 8002a08:	e008      	b.n	8002a1c <setRotation+0x88>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002a0a:	2328      	movs	r3, #40	; 0x28
 8002a0c:	72fb      	strb	r3, [r7, #11]
       break;
 8002a0e:	e005      	b.n	8002a1c <setRotation+0x88>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002a10:	2398      	movs	r3, #152	; 0x98
 8002a12:	72fb      	strb	r3, [r7, #11]
       break;
 8002a14:	e002      	b.n	8002a1c <setRotation+0x88>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002a16:	23f8      	movs	r3, #248	; 0xf8
 8002a18:	72fb      	strb	r3, [r7, #11]
       break;
 8002a1a:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <setRotation+0x290>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <setRotation+0xa0>
       val ^= 0x80;
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002a34:	4b7b      	ldr	r3, [pc, #492]	; (8002c24 <setRotation+0x290>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <setRotation+0xb6>
       val ^= 0x40;
 8002a40:	7afb      	ldrb	r3, [r7, #11]
 8002a42:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <setRotation+0x290>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <setRotation+0xcc>
       val ^= 0x08;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f083 0308 	eor.w	r3, r3, #8
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <setRotation+0x290>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8119 	beq.w	8002ca0 <setRotation+0x30c>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002a6e:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <setRotation+0x294>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f646 0214 	movw	r2, #26644	; 0x6814
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d128      	bne.n	8002acc <setRotation+0x138>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	105b      	asrs	r3, r3, #1
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
 8002a8c:	105b      	asrs	r3, r3, #1
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002aa4:	8a3b      	ldrh	r3, [r7, #16]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002ab8:	233b      	movs	r3, #59	; 0x3b
 8002aba:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002abc:	f107 0308 	add.w	r3, r7, #8
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	20b6      	movs	r0, #182	; 0xb6
 8002ac6:	f7fd ffcf 	bl	8000a68 <WriteCmdParamN>
           goto common_MC;
 8002aca:	e0c0      	b.n	8002c4e <setRotation+0x2ba>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002acc:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <setRotation+0x294>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	f641 1263 	movw	r2, #6499	; 0x1963
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00b      	beq.n	8002af0 <setRotation+0x15c>
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <setRotation+0x294>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f249 4281 	movw	r2, #38017	; 0x9481
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d005      	beq.n	8002af0 <setRotation+0x15c>
 8002ae4:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <setRotation+0x294>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f241 5211 	movw	r2, #5393	; 0x1511
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d139      	bne.n	8002b64 <setRotation+0x1d0>
           if (val & 0x80)
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da04      	bge.n	8002b02 <setRotation+0x16e>
               val |= 0x01;    //GS
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <setRotation+0x182>
               val |= 0x02;    //SS
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002b16:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <setRotation+0x294>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d104      	bne.n	8002b2c <setRotation+0x198>
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <setRotation+0x294>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f249 4281 	movw	r2, #38017	; 0x9481
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d104      	bne.n	8002b42 <setRotation+0x1ae>
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <setRotation+0x294>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	f241 5211 	movw	r2, #5393	; 0x1511
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d160      	bne.n	8002c10 <setRotation+0x27c>
               val &= ~0x10;   //remove ML
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	f023 0310 	bic.w	r3, r3, #16
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002b62:	e055      	b.n	8002c10 <setRotation+0x27c>
      }
       else if (is8347) {
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <setRotation+0x298>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d06f      	beq.n	8002c4c <setRotation+0x2b8>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <setRotation+0x29c>)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <setRotation+0x2a0>)
 8002b74:	2206      	movs	r2, #6
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <setRotation+0x2a4>)
 8002b7a:	2222      	movs	r2, #34	; 0x22
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <setRotation+0x2a8>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <setRotation+0x2ac>)
 8002b86:	2204      	movs	r2, #4
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <setRotation+0x2b0>)
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <setRotation+0x2b4>)
 8002b92:	2208      	movs	r2, #8
 8002b94:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <setRotation+0x294>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2b65      	cmp	r3, #101	; 0x65
 8002b9c:	d121      	bne.n	8002be2 <setRotation+0x24e>
               val |= 0x01;    //GS=1
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <setRotation+0x22a>
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <setRotation+0x242>
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <setRotation+0x29c>)
 8002bca:	2282      	movs	r2, #130	; 0x82
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <setRotation+0x2a0>)
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e005      	b.n	8002be2 <setRotation+0x24e>
               else _MC = 0x80, _MP = 0x82;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <setRotation+0x29c>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <setRotation+0x2a0>)
 8002bde:	2282      	movs	r2, #130	; 0x82
 8002be0:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <setRotation+0x294>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f245 2252 	movw	r2, #21074	; 0x5252
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d145      	bne.n	8002c7a <setRotation+0x2e6>
               val |= 0x02;   //VERT_SCROLLON
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03b      	beq.n	8002c7a <setRotation+0x2e6>
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002c0e:	e034      	b.n	8002c7a <setRotation+0x2e6>
           goto common_MC;
 8002c10:	bf00      	nop
 8002c12:	e01c      	b.n	8002c4e <setRotation+0x2ba>
 8002c14:	20000082 	.word	0x20000082
 8002c18:	2000007a 	.word	0x2000007a
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	20000006 	.word	0x20000006
 8002c24:	2000007e 	.word	0x2000007e
 8002c28:	20000080 	.word	0x20000080
 8002c2c:	20000077 	.word	0x20000077
 8002c30:	20000088 	.word	0x20000088
 8002c34:	2000008a 	.word	0x2000008a
 8002c38:	2000008c 	.word	0x2000008c
 8002c3c:	2000008e 	.word	0x2000008e
 8002c40:	20000090 	.word	0x20000090
 8002c44:	20000092 	.word	0x20000092
 8002c48:	20000094 	.word	0x20000094
       }
     common_MC:
 8002c4c:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002c4e:	4b90      	ldr	r3, [pc, #576]	; (8002e90 <setRotation+0x4fc>)
 8002c50:	222a      	movs	r2, #42	; 0x2a
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <setRotation+0x500>)
 8002c56:	222b      	movs	r2, #43	; 0x2b
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <setRotation+0x504>)
 8002c5c:	222c      	movs	r2, #44	; 0x2c
 8002c5e:	801a      	strh	r2, [r3, #0]
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <setRotation+0x508>)
 8002c62:	222a      	movs	r2, #42	; 0x2a
 8002c64:	801a      	strh	r2, [r3, #0]
 8002c66:	4b8e      	ldr	r3, [pc, #568]	; (8002ea0 <setRotation+0x50c>)
 8002c68:	222a      	movs	r2, #42	; 0x2a
 8002c6a:	801a      	strh	r2, [r3, #0]
 8002c6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ea4 <setRotation+0x510>)
 8002c6e:	222b      	movs	r2, #43	; 0x2b
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <setRotation+0x514>)
 8002c74:	222b      	movs	r2, #43	; 0x2b
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	e000      	b.n	8002c7c <setRotation+0x2e8>
			goto common_BGR;
 8002c7a:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8002c7c:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <setRotation+0x518>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <setRotation+0x2f4>
 8002c84:	2316      	movs	r3, #22
 8002c86:	e000      	b.n	8002c8a <setRotation+0x2f6>
 8002c88:	2336      	movs	r3, #54	; 0x36
 8002c8a:	f107 020b 	add.w	r2, r7, #11
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fee9 	bl	8000a68 <WriteCmdParamN>
       _lcd_madctl = val;
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <setRotation+0x51c>)
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	e1db      	b.n	8003058 <setRotation+0x6c4>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8002ca0:	4b84      	ldr	r3, [pc, #528]	; (8002eb4 <setRotation+0x520>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	f000 80b0 	beq.w	8002e0e <setRotation+0x47a>
 8002cae:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f300 8100 	bgt.w	8002eb8 <setRotation+0x524>
 8002cb8:	f249 3226 	movw	r2, #37670	; 0x9326
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f000 80a6 	beq.w	8002e0e <setRotation+0x47a>
 8002cc2:	f249 3226 	movw	r2, #37670	; 0x9326
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f300 80f6 	bgt.w	8002eb8 <setRotation+0x524>
 8002ccc:	f249 2225 	movw	r2, #37413	; 0x9225
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02a      	beq.n	8002d2a <setRotation+0x396>
 8002cd4:	f249 2225 	movw	r2, #37413	; 0x9225
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	f300 80ed 	bgt.w	8002eb8 <setRotation+0x524>
 8002cde:	f247 7293 	movw	r2, #30611	; 0x7793
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f000 8093 	beq.w	8002e0e <setRotation+0x47a>
 8002ce8:	f247 7293 	movw	r2, #30611	; 0x7793
 8002cec:	4293      	cmp	r3, r2
 8002cee:	f300 80e3 	bgt.w	8002eb8 <setRotation+0x524>
 8002cf2:	f245 4220 	movw	r2, #21536	; 0x5420
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f000 8089 	beq.w	8002e0e <setRotation+0x47a>
 8002cfc:	f245 4220 	movw	r2, #21536	; 0x5420
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f300 80d9 	bgt.w	8002eb8 <setRotation+0x524>
 8002d06:	f241 2289 	movw	r2, #4745	; 0x1289
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f000 8133 	beq.w	8002f76 <setRotation+0x5e2>
 8002d10:	f241 2289 	movw	r2, #4745	; 0x1289
 8002d14:	4293      	cmp	r3, r2
 8002d16:	f300 80cf 	bgt.w	8002eb8 <setRotation+0x524>
 8002d1a:	f240 1239 	movw	r2, #313	; 0x139
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d030      	beq.n	8002d84 <setRotation+0x3f0>
 8002d22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002d26:	d03a      	beq.n	8002d9e <setRotation+0x40a>
 8002d28:	e0c6      	b.n	8002eb8 <setRotation+0x524>
#if defined(SUPPORT_9225)
       case 0x9225:
           _SC = 0x37, _EC = 0x36, _SP = 0x39, _EP = 0x38;
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <setRotation+0x508>)
 8002d2c:	2237      	movs	r2, #55	; 0x37
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <setRotation+0x50c>)
 8002d32:	2236      	movs	r2, #54	; 0x36
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <setRotation+0x510>)
 8002d38:	2239      	movs	r2, #57	; 0x39
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <setRotation+0x514>)
 8002d3e:	2238      	movs	r2, #56	; 0x38
 8002d40:	801a      	strh	r2, [r3, #0]
           _MC = 0x20, _MP = 0x21, _MW = 0x22;
 8002d42:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <setRotation+0x4fc>)
 8002d44:	2220      	movs	r2, #32
 8002d46:	801a      	strh	r2, [r3, #0]
 8002d48:	4b52      	ldr	r3, [pc, #328]	; (8002e94 <setRotation+0x500>)
 8002d4a:	2221      	movs	r2, #33	; 0x21
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <setRotation+0x504>)
 8002d50:	2222      	movs	r2, #34	; 0x22
 8002d52:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 9) : 0;
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, GS | SS_v | 0x001C);       // set Driver Output Control
 8002d6c:	8a3a      	ldrh	r2, [r7, #16]
 8002d6e:	89fb      	ldrh	r3, [r7, #14]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f043 031c 	orr.w	r3, r3, #28
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7fd fcb6 	bl	80006ee <WriteCmdData>
           goto common_ORG;
 8002d82:	e0c9      	b.n	8002f18 <setRotation+0x584>
#endif
#if defined(SUPPORT_0139) || defined(SUPPORT_0154)
#ifdef SUPPORT_0139
       case 0x0139:
           _SC = 0x46, _EC = 0x46, _SP = 0x48, _EP = 0x47;
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <setRotation+0x508>)
 8002d86:	2246      	movs	r2, #70	; 0x46
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <setRotation+0x50c>)
 8002d8c:	2246      	movs	r2, #70	; 0x46
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <setRotation+0x510>)
 8002d92:	2248      	movs	r2, #72	; 0x48
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <setRotation+0x514>)
 8002d98:	2247      	movs	r2, #71	; 0x47
 8002d9a:	801a      	strh	r2, [r3, #0]
           goto common_S6D;
 8002d9c:	e00c      	b.n	8002db8 <setRotation+0x424>
#endif
#ifdef SUPPORT_0154
       case 0x0154:
           _SC = 0x37, _EC = 0x36, _SP = 0x39, _EP = 0x38;
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <setRotation+0x508>)
 8002da0:	2237      	movs	r2, #55	; 0x37
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <setRotation+0x50c>)
 8002da6:	2236      	movs	r2, #54	; 0x36
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <setRotation+0x510>)
 8002dac:	2239      	movs	r2, #57	; 0x39
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <setRotation+0x514>)
 8002db2:	2238      	movs	r2, #56	; 0x38
 8002db4:	801a      	strh	r2, [r3, #0]
           goto common_S6D;
 8002db6:	bf00      	nop
#endif
         common_S6D:
           _MC = 0x20, _MP = 0x21, _MW = 0x22;
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <setRotation+0x4fc>)
 8002dba:	2220      	movs	r2, #32
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <setRotation+0x500>)
 8002dc0:	2221      	movs	r2, #33	; 0x21
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <setRotation+0x504>)
 8002dc6:	2222      	movs	r2, #34	; 0x22
 8002dc8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 9) : 0;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	81fb      	strh	r3, [r7, #14]
           // S6D0139 requires NL = 0x27,  S6D0154 NL = 0x28
           WriteCmdData(0x01, GS | SS_v | ((_lcd_ID == 0x0139) ? 0x27 : 0x28));
 8002de2:	8a3a      	ldrh	r2, [r7, #16]
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <setRotation+0x520>)
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	f240 1139 	movw	r1, #313	; 0x139
 8002df4:	428a      	cmp	r2, r1
 8002df6:	d101      	bne.n	8002dfc <setRotation+0x468>
 8002df8:	2227      	movs	r2, #39	; 0x27
 8002dfa:	e000      	b.n	8002dfe <setRotation+0x46a>
 8002dfc:	2228      	movs	r2, #40	; 0x28
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fd fc71 	bl	80006ee <WriteCmdData>
           goto common_ORG;
 8002e0c:	e084      	b.n	8002f18 <setRotation+0x584>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <setRotation+0x4fc>)
 8002e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <setRotation+0x500>)
 8002e18:	f240 2201 	movw	r2, #513	; 0x201
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <setRotation+0x504>)
 8002e20:	f240 2202 	movw	r2, #514	; 0x202
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <setRotation+0x508>)
 8002e28:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <setRotation+0x50c>)
 8002e30:	f240 2211 	movw	r2, #529	; 0x211
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <setRotation+0x510>)
 8002e38:	f240 2212 	movw	r2, #530	; 0x212
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <setRotation+0x514>)
 8002e40:	f240 2213 	movw	r2, #531	; 0x213
 8002e44:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e54:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002e56:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002e5a:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <setRotation+0x520>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	f249 3226 	movw	r2, #37670	; 0x9326
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d005      	beq.n	8002e74 <setRotation+0x4e0>
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <setRotation+0x520>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f245 4220 	movw	r2, #21536	; 0x5420
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <setRotation+0x4e6>
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8002e7a:	8a3a      	ldrh	r2, [r7, #16]
 8002e7c:	8abb      	ldrh	r3, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e88:	f7fd fc31 	bl	80006ee <WriteCmdData>
           goto common_SS;
 8002e8c:	e039      	b.n	8002f02 <setRotation+0x56e>
 8002e8e:	bf00      	nop
 8002e90:	20000088 	.word	0x20000088
 8002e94:	2000008a 	.word	0x2000008a
 8002e98:	2000008c 	.word	0x2000008c
 8002e9c:	2000008e 	.word	0x2000008e
 8002ea0:	20000090 	.word	0x20000090
 8002ea4:	20000092 	.word	0x20000092
 8002ea8:	20000094 	.word	0x20000094
 8002eac:	20000077 	.word	0x20000077
 8002eb0:	20000084 	.word	0x20000084
 8002eb4:	20000080 	.word	0x20000080
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8002eb8:	4b8a      	ldr	r3, [pc, #552]	; (80030e4 <setRotation+0x750>)
 8002eba:	2220      	movs	r2, #32
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <setRotation+0x754>)
 8002ec0:	2221      	movs	r2, #33	; 0x21
 8002ec2:	801a      	strh	r2, [r3, #0]
 8002ec4:	4b89      	ldr	r3, [pc, #548]	; (80030ec <setRotation+0x758>)
 8002ec6:	2222      	movs	r2, #34	; 0x22
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <setRotation+0x75c>)
 8002ecc:	2250      	movs	r2, #80	; 0x50
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <setRotation+0x760>)
 8002ed2:	2251      	movs	r2, #81	; 0x51
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <setRotation+0x764>)
 8002ed8:	2252      	movs	r2, #82	; 0x52
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	4b87      	ldr	r3, [pc, #540]	; (80030fc <setRotation+0x768>)
 8002ede:	2253      	movs	r2, #83	; 0x53
 8002ee0:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002eec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ef0:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8002ef2:	8a3b      	ldrh	r3, [r7, #16]
 8002ef4:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	2060      	movs	r0, #96	; 0x60
 8002efe:	f7fd fbf6 	bl	80006ee <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	4619      	mov	r1, r3
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7fd fbeb 	bl	80006ee <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8002f18:	7afb      	ldrb	r3, [r7, #11]
 8002f1a:	109b      	asrs	r3, r3, #2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	82fb      	strh	r3, [r7, #22]
#ifdef SUPPORT_8230
           if (_lcd_ID == 0x8230) {    // UC8230 has strange BGR and READ_BGR behaviour
 8002f24:	4b76      	ldr	r3, [pc, #472]	; (8003100 <setRotation+0x76c>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	f248 2230 	movw	r2, #33328	; 0x8230
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d10c      	bne.n	8002f4a <setRotation+0x5b6>
               if (rotation == 1 || rotation == 2) {
 8002f30:	4b74      	ldr	r3, [pc, #464]	; (8003104 <setRotation+0x770>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d003      	beq.n	8002f40 <setRotation+0x5ac>
 8002f38:	4b72      	ldr	r3, [pc, #456]	; (8003104 <setRotation+0x770>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d104      	bne.n	8002f4a <setRotation+0x5b6>
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f083 0308 	eor.w	r3, r3, #8
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	72fb      	strb	r3, [r7, #11]
               }
           }
#endif
           if (val & 0x08)
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <setRotation+0x5c8>
               ORG |= 0x1000;  //BGR
 8002f54:	8afb      	ldrh	r3, [r7, #22]
 8002f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5a:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8002f5c:	8afb      	ldrh	r3, [r7, #22]
 8002f5e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <setRotation+0x774>)
 8002f66:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8002f68:	4b67      	ldr	r3, [pc, #412]	; (8003108 <setRotation+0x774>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2003      	movs	r0, #3
 8002f70:	f7fd fbbd 	bl	80006ee <WriteCmdData>
           break;
 8002f74:	e070      	b.n	8003058 <setRotation+0x6c4>
#ifdef SUPPORT_1289
       case 0x1289:
           _MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <setRotation+0x750>)
 8002f78:	224e      	movs	r2, #78	; 0x4e
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <setRotation+0x754>)
 8002f7e:	224f      	movs	r2, #79	; 0x4f
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <setRotation+0x758>)
 8002f84:	2222      	movs	r2, #34	; 0x22
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <setRotation+0x75c>)
 8002f8a:	2244      	movs	r2, #68	; 0x44
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <setRotation+0x760>)
 8002f90:	2244      	movs	r2, #68	; 0x44
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <setRotation+0x764>)
 8002f96:	2245      	movs	r2, #69	; 0x45
 8002f98:	801a      	strh	r2, [r3, #0]
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <setRotation+0x768>)
 8002f9c:	2246      	movs	r2, #70	; 0x46
 8002f9e:	801a      	strh	r2, [r3, #0]
           if (rotation & 1)
 8002fa0:	4b58      	ldr	r3, [pc, #352]	; (8003104 <setRotation+0x770>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <setRotation+0x624>
               val ^= 0xD0;    // exchange Landscape modes
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	f083 032f 	eor.w	r3, r3, #47	; 0x2f
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	72fb      	strb	r3, [r7, #11]
           GS = (val & 0x80) ? (1 << 14) : 0;    //called TB (top-bottom), CAD=0
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 9) : 0;   //called RL (right-left)
 8002fc4:	7afb      	ldrb	r3, [r7, #11]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fce:	81fb      	strh	r3, [r7, #14]
           ORG = (val & 0x20) ? (1 << 3) : 0;  //called AM
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	109b      	asrs	r3, r3, #2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	82fb      	strh	r3, [r7, #22]
           _lcd_drivOut = GS | SS_v | (REV << 13) | 0x013F;      //REV=0, BGR=0, MUX=319
 8002fdc:	8a3a      	ldrh	r2, [r7, #16]
 8002fde:	89fb      	ldrh	r3, [r7, #14]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	b21a      	sxth	r2, r3
 8002fe6:	8a7b      	ldrh	r3, [r7, #18]
 8002fe8:	035b      	lsls	r3, r3, #13
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	4313      	orrs	r3, r2
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	f443 739f 	orr.w	r3, r3, #318	; 0x13e
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <setRotation+0x778>)
 8002ffe:	801a      	strh	r2, [r3, #0]
           if (val & 0x08)
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <setRotation+0x684>
               _lcd_drivOut |= 0x0800; //BGR
 800300a:	4b40      	ldr	r3, [pc, #256]	; (800310c <setRotation+0x778>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b3d      	ldr	r3, [pc, #244]	; (800310c <setRotation+0x778>)
 8003016:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x01, _lcd_drivOut);   // set Driver Output Control
 8003018:	4b3c      	ldr	r3, [pc, #240]	; (800310c <setRotation+0x778>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	2001      	movs	r0, #1
 8003020:	f7fd fb65 	bl	80006ee <WriteCmdData>
           if (is9797) WriteCmdData(0x11, ORG | 0x4C30); else  // DFM=2, DEN=1, WM=1, TY=0
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <setRotation+0x77c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <setRotation+0x6ae>
 800302c:	8afb      	ldrh	r3, [r7, #22]
 800302e:	f443 4398 	orr.w	r3, r3, #19456	; 0x4c00
 8003032:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003036:	b29b      	uxth	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	2011      	movs	r0, #17
 800303c:	f7fd fb57 	bl	80006ee <WriteCmdData>
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
 8003040:	e009      	b.n	8003056 <setRotation+0x6c2>
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
 8003042:	8afb      	ldrh	r3, [r7, #22]
 8003044:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8003048:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800304c:	b29b      	uxth	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	2011      	movs	r0, #17
 8003052:	f7fd fb4c 	bl	80006ee <WriteCmdData>
           break;
 8003056:	bf00      	nop
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <setRotation+0x770>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <setRotation+0x718>
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <setRotation+0x780>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11d      	bne.n	80030ac <setRotation+0x718>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003070:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <setRotation+0x750>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	81bb      	strh	r3, [r7, #12]
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <setRotation+0x754>)
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <setRotation+0x750>)
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <setRotation+0x754>)
 8003080:	89bb      	ldrh	r3, [r7, #12]
 8003082:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <setRotation+0x75c>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	81bb      	strh	r3, [r7, #12]
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <setRotation+0x764>)
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <setRotation+0x75c>)
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <setRotation+0x764>)
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <setRotation+0x760>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	81bb      	strh	r3, [r7, #12]
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <setRotation+0x768>)
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <setRotation+0x760>)
 80030a4:	801a      	strh	r2, [r3, #0]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <setRotation+0x768>)
 80030a8:	89bb      	ldrh	r3, [r7, #12]
 80030aa:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80030ac:	f7fd fa62 	bl	8000574 <width>
 80030b0:	4603      	mov	r3, r0
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b21c      	sxth	r4, r3
 80030b8:	f7fd fa66 	bl	8000588 <height>
 80030bc:	4603      	mov	r3, r0
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	4622      	mov	r2, r4
 80030c6:	2100      	movs	r1, #0
 80030c8:	2000      	movs	r0, #0
 80030ca:	f000 f8db 	bl	8003284 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80030ce:	2200      	movs	r2, #0
 80030d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 f9f9 	bl	80034cc <vertScroll>
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000088 	.word	0x20000088
 80030e8:	2000008a 	.word	0x2000008a
 80030ec:	2000008c 	.word	0x2000008c
 80030f0:	2000008e 	.word	0x2000008e
 80030f4:	20000090 	.word	0x20000090
 80030f8:	20000092 	.word	0x20000092
 80030fc:	20000094 	.word	0x20000094
 8003100:	20000080 	.word	0x20000080
 8003104:	2000007a 	.word	0x2000007a
 8003108:	20000084 	.word	0x20000084
 800310c:	20000086 	.word	0x20000086
 8003110:	20000079 	.word	0x20000079
 8003114:	2000007e 	.word	0x2000007e

08003118 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
 8003122:	460b      	mov	r3, r1
 8003124:	80bb      	strh	r3, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f2c0 8098 	blt.w	8003264 <drawPixel+0x14c>
 8003134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f2c0 8093 	blt.w	8003264 <drawPixel+0x14c>
 800313e:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003142:	f7fd fa17 	bl	8000574 <width>
 8003146:	4603      	mov	r3, r0
 8003148:	429c      	cmp	r4, r3
 800314a:	f280 808b 	bge.w	8003264 <drawPixel+0x14c>
 800314e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003152:	f7fd fa19 	bl	8000588 <height>
 8003156:	4603      	mov	r3, r0
 8003158:	429c      	cmp	r4, r3
 800315a:	f280 8083 	bge.w	8003264 <drawPixel+0x14c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <drawPixel+0x154>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <drawPixel+0x5a>
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd fa17 	bl	800059c <color565_to_555>
 800316e:	4603      	mov	r3, r0
 8003170:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8003172:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003176:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800317a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800317e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003182:	f000 f87f 	bl	8003284 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <drawPixel+0x158>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d062      	beq.n	8003254 <drawPixel+0x13c>
 800318e:	2102      	movs	r1, #2
 8003190:	4838      	ldr	r0, [pc, #224]	; (8003274 <drawPixel+0x15c>)
 8003192:	f7fd f9a1 	bl	80004d8 <PIN_LOW>
 8003196:	2104      	movs	r1, #4
 8003198:	4836      	ldr	r0, [pc, #216]	; (8003274 <drawPixel+0x15c>)
 800319a:	f7fd f99d 	bl	80004d8 <PIN_LOW>
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <drawPixel+0x160>)
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <drawPixel+0x160>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	73bb      	strb	r3, [r7, #14]
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <drawPixel+0x15c>)
 80031b0:	4a32      	ldr	r2, [pc, #200]	; (800327c <drawPixel+0x164>)
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <drawPixel+0x168>)
 80031b6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	035b      	lsls	r3, r3, #13
 80031c0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	109b      	asrs	r3, r3, #2
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	431a      	orrs	r2, r3
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <drawPixel+0x15c>)
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <drawPixel+0x168>)
 80031d6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80031da:	6113      	str	r3, [r2, #16]
 80031dc:	2108      	movs	r1, #8
 80031de:	4825      	ldr	r0, [pc, #148]	; (8003274 <drawPixel+0x15c>)
 80031e0:	f7fd f97a 	bl	80004d8 <PIN_LOW>
 80031e4:	2108      	movs	r1, #8
 80031e6:	4823      	ldr	r0, [pc, #140]	; (8003274 <drawPixel+0x15c>)
 80031e8:	f7fd f986 	bl	80004f8 <PIN_HIGH>
 80031ec:	2108      	movs	r1, #8
 80031ee:	4821      	ldr	r0, [pc, #132]	; (8003274 <drawPixel+0x15c>)
 80031f0:	f7fd f982 	bl	80004f8 <PIN_HIGH>
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <drawPixel+0x15c>)
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <drawPixel+0x164>)
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <drawPixel+0x168>)
 80031fc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	035b      	lsls	r3, r3, #13
 8003206:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800320a:	7bbb      	ldrb	r3, [r7, #14]
 800320c:	109b      	asrs	r3, r3, #2
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	431a      	orrs	r2, r3
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <drawPixel+0x15c>)
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	4a19      	ldr	r2, [pc, #100]	; (8003280 <drawPixel+0x168>)
 800321c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003220:	6113      	str	r3, [r2, #16]
 8003222:	2108      	movs	r1, #8
 8003224:	4813      	ldr	r0, [pc, #76]	; (8003274 <drawPixel+0x15c>)
 8003226:	f7fd f957 	bl	80004d8 <PIN_LOW>
 800322a:	2108      	movs	r1, #8
 800322c:	4811      	ldr	r0, [pc, #68]	; (8003274 <drawPixel+0x15c>)
 800322e:	f7fd f963 	bl	80004f8 <PIN_HIGH>
 8003232:	2108      	movs	r1, #8
 8003234:	480f      	ldr	r0, [pc, #60]	; (8003274 <drawPixel+0x15c>)
 8003236:	f7fd f95f 	bl	80004f8 <PIN_HIGH>
 800323a:	2104      	movs	r1, #4
 800323c:	480d      	ldr	r0, [pc, #52]	; (8003274 <drawPixel+0x15c>)
 800323e:	f7fd f95b 	bl	80004f8 <PIN_HIGH>
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd facb 	bl	80007e0 <write24>
 800324a:	2102      	movs	r1, #2
 800324c:	4809      	ldr	r0, [pc, #36]	; (8003274 <drawPixel+0x15c>)
 800324e:	f7fd f953 	bl	80004f8 <PIN_HIGH>
 8003252:	e008      	b.n	8003266 <drawPixel+0x14e>
   WriteCmdData(_MW, color);
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <drawPixel+0x160>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	887a      	ldrh	r2, [r7, #2]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fa46 	bl	80006ee <WriteCmdData>
 8003262:	e000      	b.n	8003266 <drawPixel+0x14e>
       return;
 8003264:	bf00      	nop
}
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	20000078 	.word	0x20000078
 8003270:	20000079 	.word	0x20000079
 8003274:	40010800 	.word	0x40010800
 8003278:	2000008c 	.word	0x2000008c
 800327c:	80200000 	.word	0x80200000
 8003280:	40010c00 	.word	0x40010c00

08003284 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b087      	sub	sp, #28
 8003288:	af02      	add	r7, sp, #8
 800328a:	4604      	mov	r4, r0
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4623      	mov	r3, r4
 8003294:	80fb      	strh	r3, [r7, #6]
 8003296:	4603      	mov	r3, r0
 8003298:	80bb      	strh	r3, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	807b      	strh	r3, [r7, #2]
 800329e:	4613      	mov	r3, r2
 80032a0:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80032a2:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <setAddrWindow+0x220>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f249 3227 	movw	r2, #37671	; 0x9327
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d117      	bne.n	80032de <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80032ae:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <setAddrWindow+0x224>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d107      	bne.n	80032c6 <setAddrWindow+0x42>
 80032b6:	88bb      	ldrh	r3, [r7, #4]
 80032b8:	3320      	adds	r3, #32
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	80bb      	strh	r3, [r7, #4]
 80032be:	883b      	ldrh	r3, [r7, #0]
 80032c0:	3320      	adds	r3, #32
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80032c6:	4b78      	ldr	r3, [pc, #480]	; (80034a8 <setAddrWindow+0x224>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d107      	bne.n	80032de <setAddrWindow+0x5a>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	3320      	adds	r3, #32
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	80fb      	strh	r3, [r7, #6]
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	3320      	adds	r3, #32
 80032da:	b29b      	uxth	r3, r3
 80032dc:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80032de:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <setAddrWindow+0x220>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	f241 5226 	movw	r2, #5414	; 0x1526
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d128      	bne.n	800333c <setAddrWindow+0xb8>
 80032ea:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <setAddrWindow+0x224>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d022      	beq.n	800333c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	81fb      	strh	r3, [r7, #14]
 8003300:	883a      	ldrh	r2, [r7, #0]
 8003302:	88bb      	ldrh	r3, [r7, #4]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b29b      	uxth	r3, r3
 8003308:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 800330a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <setAddrWindow+0x9c>
 8003312:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003316:	b29b      	uxth	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	803b      	strh	r3, [r7, #0]
 800331e:	e00d      	b.n	800333c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <setAddrWindow+0xb8>
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	89bb      	ldrh	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	807b      	strh	r3, [r7, #2]
 8003332:	883a      	ldrh	r2, [r7, #0]
 8003334:	89bb      	ldrh	r3, [r7, #12]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29b      	uxth	r3, r3
 800333a:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 800333c:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <setAddrWindow+0x228>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d054      	beq.n	80033f2 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <setAddrWindow+0x22c>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b2d8      	uxtb	r0, r3
 800334e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003352:	121b      	asrs	r3, r3, #8
 8003354:	b21b      	sxth	r3, r3
 8003356:	b2d9      	uxtb	r1, r3
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003360:	121b      	asrs	r3, r3, #8
 8003362:	b21b      	sxth	r3, r3
 8003364:	b2dc      	uxtb	r4, r3
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4623      	mov	r3, r4
 800336e:	f7fd fc7d 	bl	8000c6c <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <setAddrWindow+0x230>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b2d8      	uxtb	r0, r3
 8003378:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800337c:	121b      	asrs	r3, r3, #8
 800337e:	b21b      	sxth	r3, r3
 8003380:	b2d9      	uxtb	r1, r3
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	f9b7 3000 	ldrsh.w	r3, [r7]
 800338a:	121b      	asrs	r3, r3, #8
 800338c:	b21b      	sxth	r3, r3
 800338e:	b2dc      	uxtb	r4, r3
 8003390:	883b      	ldrh	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	4623      	mov	r3, r4
 8003398:	f7fd fc68 	bl	8000c6c <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <setAddrWindow+0x234>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07b      	beq.n	800349c <setAddrWindow+0x218>
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <setAddrWindow+0x220>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	2b65      	cmp	r3, #101	; 0x65
 80033aa:	d177      	bne.n	800349c <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80033ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b0:	121b      	asrs	r3, r3, #8
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	723b      	strb	r3, [r7, #8]
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <setAddrWindow+0x238>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	f107 0208 	add.w	r2, r7, #8
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fb4d 	bl	8000a68 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80033ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033d2:	121b      	asrs	r3, r3, #8
 80033d4:	b21b      	sxth	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	723b      	strb	r3, [r7, #8]
 80033da:	88bb      	ldrh	r3, [r7, #4]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <setAddrWindow+0x23c>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f107 0208 	add.w	r2, r7, #8
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fb3c 	bl	8000a68 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80033f0:	e054      	b.n	800349c <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 80033f2:	4b32      	ldr	r3, [pc, #200]	; (80034bc <setAddrWindow+0x238>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f977 	bl	80006ee <WriteCmdData>
       WriteCmdData(_MP, y);
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <setAddrWindow+0x23c>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	88ba      	ldrh	r2, [r7, #4]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f970 	bl	80006ee <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800340e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003416:	429a      	cmp	r2, r3
 8003418:	d105      	bne.n	8003426 <setAddrWindow+0x1a2>
 800341a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800341e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d03a      	beq.n	800349c <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003426:	4b21      	ldr	r3, [pc, #132]	; (80034ac <setAddrWindow+0x228>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <setAddrWindow+0x224>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800343e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b21a      	sxth	r2, r3
 8003446:	88bb      	ldrh	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	80bb      	strh	r3, [r7, #4]
 800344c:	88bb      	ldrh	r3, [r7, #4]
 800344e:	803b      	strh	r3, [r7, #0]
 8003450:	e008      	b.n	8003464 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003452:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	b21a      	sxth	r2, r3
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4313      	orrs	r3, r2
 800345e:	80fb      	strh	r3, [r7, #6]
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <setAddrWindow+0x22c>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd f93e 	bl	80006ee <WriteCmdData>
           WriteCmdData(_SP, y);
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <setAddrWindow+0x230>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	88ba      	ldrh	r2, [r7, #4]
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f937 	bl	80006ee <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <setAddrWindow+0x240>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f930 	bl	80006ee <WriteCmdData>
           WriteCmdData(_EP, y1);
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <setAddrWindow+0x244>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	883a      	ldrh	r2, [r7, #0]
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f929 	bl	80006ee <WriteCmdData>
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	20000080 	.word	0x20000080
 80034a8:	2000007a 	.word	0x2000007a
 80034ac:	2000007e 	.word	0x2000007e
 80034b0:	2000008e 	.word	0x2000008e
 80034b4:	20000092 	.word	0x20000092
 80034b8:	20000077 	.word	0x20000077
 80034bc:	20000088 	.word	0x20000088
 80034c0:	2000008a 	.word	0x2000008a
 80034c4:	20000090 	.word	0x20000090
 80034c8:	20000094 	.word	0x20000094

080034cc <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
 80034d6:	460b      	mov	r3, r1
 80034d8:	80bb      	strh	r3, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80034de:	4ba9      	ldr	r3, [pc, #676]	; (8003784 <vertScroll+0x2b8>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f249 3227 	movw	r2, #37671	; 0x9327
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10b      	bne.n	8003502 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 80034ea:	4ba7      	ldr	r3, [pc, #668]	; (8003788 <vertScroll+0x2bc>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <vertScroll+0x2e>
 80034f2:	4ba5      	ldr	r3, [pc, #660]	; (8003788 <vertScroll+0x2bc>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d103      	bne.n	8003502 <vertScroll+0x36>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	3320      	adds	r3, #32
 80034fe:	b29b      	uxth	r3, r3
 8003500:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800350e:	b29b      	uxth	r3, r3
 8003510:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003516:	4b9b      	ldr	r3, [pc, #620]	; (8003784 <vertScroll+0x2b8>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f249 3227 	movw	r2, #37671	; 0x9327
 800351e:	4293      	cmp	r3, r2
 8003520:	d103      	bne.n	800352a <vertScroll+0x5e>
 8003522:	8afb      	ldrh	r3, [r7, #22]
 8003524:	3320      	adds	r3, #32
 8003526:	b29b      	uxth	r3, r3
 8003528:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 800352a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800352e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003532:	425b      	negs	r3, r3
 8003534:	429a      	cmp	r2, r3
 8003536:	dd05      	ble.n	8003544 <vertScroll+0x78>
 8003538:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800353c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	db01      	blt.n	8003548 <vertScroll+0x7c>
 8003544:	2300      	movs	r3, #0
 8003546:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	4413      	add	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	da04      	bge.n	8003564 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 800355a:	8aba      	ldrh	r2, [r7, #20]
 800355c:	88bb      	ldrh	r3, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003572:	4b86      	ldr	r3, [pc, #536]	; (800378c <vertScroll+0x2c0>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d073      	beq.n	8003666 <vertScroll+0x19a>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800357e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003582:	121b      	asrs	r3, r3, #8
 8003584:	b21b      	sxth	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8003590:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003594:	121b      	asrs	r3, r3, #8
 8003596:	b21b      	sxth	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 800359c:	88bb      	ldrh	r3, [r7, #4]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80035a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035a6:	121b      	asrs	r3, r3, #8
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80035ae:	8afb      	ldrh	r3, [r7, #22]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80035b4:	4b76      	ldr	r3, [pc, #472]	; (8003790 <vertScroll+0x2c4>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <vertScroll+0xf4>
 80035bc:	230e      	movs	r3, #14
 80035be:	e000      	b.n	80035c2 <vertScroll+0xf6>
 80035c0:	2333      	movs	r3, #51	; 0x33
 80035c2:	f107 020c 	add.w	r2, r7, #12
 80035c6:	2106      	movs	r1, #6
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fa4d 	bl	8000a68 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80035ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035d2:	121b      	asrs	r3, r3, #8
 80035d4:	b21b      	sxth	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80035da:	8abb      	ldrh	r3, [r7, #20]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80035e0:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <vertScroll+0x2c4>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <vertScroll+0x120>
 80035e8:	2314      	movs	r3, #20
 80035ea:	e000      	b.n	80035ee <vertScroll+0x122>
 80035ec:	2337      	movs	r3, #55	; 0x37
 80035ee:	f107 020c 	add.w	r2, r7, #12
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fa37 	bl	8000a68 <WriteCmdParamN>
		if (is8347) {
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <vertScroll+0x2c4>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01f      	beq.n	8003642 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003602:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <vertScroll+0x152>
 800360a:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <vertScroll+0x2b8>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	f248 3247 	movw	r2, #33607	; 0x8347
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <vertScroll+0x14e>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <vertScroll+0x154>
 800361a:	2308      	movs	r3, #8
 800361c:	e000      	b.n	8003620 <vertScroll+0x154>
 800361e:	2300      	movs	r3, #0
 8003620:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003622:	4b58      	ldr	r3, [pc, #352]	; (8003784 <vertScroll+0x2b8>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	f248 3247 	movw	r2, #33607	; 0x8347
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <vertScroll+0x166>
 800362e:	2318      	movs	r3, #24
 8003630:	e000      	b.n	8003634 <vertScroll+0x168>
 8003632:	2301      	movs	r3, #1
 8003634:	f107 020c 	add.w	r2, r7, #12
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fa14 	bl	8000a68 <WriteCmdParamN>
 8003640:	e0b9      	b.n	80037b6 <vertScroll+0x2ea>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80b5 	bne.w	80037b6 <vertScroll+0x2ea>
 800364c:	4b4f      	ldr	r3, [pc, #316]	; (800378c <vertScroll+0x2c0>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80ae 	beq.w	80037b6 <vertScroll+0x2ea>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 800365a:	2200      	movs	r2, #0
 800365c:	2100      	movs	r1, #0
 800365e:	2013      	movs	r0, #19
 8003660:	f7fd fa02 	bl	8000a68 <WriteCmdParamN>
 8003664:	e0a7      	b.n	80037b6 <vertScroll+0x2ea>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <vertScroll+0x2b8>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800366e:	4293      	cmp	r3, r2
 8003670:	d076      	beq.n	8003760 <vertScroll+0x294>
 8003672:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003676:	4293      	cmp	r3, r2
 8003678:	f300 808e 	bgt.w	8003798 <vertScroll+0x2cc>
 800367c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003680:	4293      	cmp	r3, r2
 8003682:	d06d      	beq.n	8003760 <vertScroll+0x294>
 8003684:	f249 3226 	movw	r2, #37670	; 0x9326
 8003688:	4293      	cmp	r3, r2
 800368a:	f300 8085 	bgt.w	8003798 <vertScroll+0x2cc>
 800368e:	f249 2225 	movw	r2, #37413	; 0x9225
 8003692:	4293      	cmp	r3, r2
 8003694:	d04b      	beq.n	800372e <vertScroll+0x262>
 8003696:	f249 2225 	movw	r2, #37413	; 0x9225
 800369a:	4293      	cmp	r3, r2
 800369c:	dc7c      	bgt.n	8003798 <vertScroll+0x2cc>
 800369e:	f247 7293 	movw	r2, #30611	; 0x7793
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d05c      	beq.n	8003760 <vertScroll+0x294>
 80036a6:	f247 7293 	movw	r2, #30611	; 0x7793
 80036aa:	4293      	cmp	r3, r2
 80036ac:	dc74      	bgt.n	8003798 <vertScroll+0x2cc>
 80036ae:	f247 7283 	movw	r2, #30595	; 0x7783
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01b      	beq.n	80036ee <vertScroll+0x222>
 80036b6:	f247 7283 	movw	r2, #30595	; 0x7783
 80036ba:	4293      	cmp	r3, r2
 80036bc:	dc6c      	bgt.n	8003798 <vertScroll+0x2cc>
 80036be:	f245 4220 	movw	r2, #21536	; 0x5420
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04c      	beq.n	8003760 <vertScroll+0x294>
 80036c6:	f245 4220 	movw	r2, #21536	; 0x5420
 80036ca:	4293      	cmp	r3, r2
 80036cc:	dc64      	bgt.n	8003798 <vertScroll+0x2cc>
 80036ce:	f241 2289 	movw	r2, #4745	; 0x1289
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03e      	beq.n	8003754 <vertScroll+0x288>
 80036d6:	f241 2289 	movw	r2, #4745	; 0x1289
 80036da:	4293      	cmp	r3, r2
 80036dc:	dc5c      	bgt.n	8003798 <vertScroll+0x2cc>
 80036de:	f240 1239 	movw	r2, #313	; 0x139
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <vertScroll+0x23a>
 80036e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80036ea:	d020      	beq.n	800372e <vertScroll+0x262>
 80036ec:	e054      	b.n	8003798 <vertScroll+0x2cc>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <vertScroll+0x2c8>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	2061      	movs	r0, #97	; 0x61
 80036f6:	f7fc fffa 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80036fa:	8abb      	ldrh	r3, [r7, #20]
 80036fc:	4619      	mov	r1, r3
 80036fe:	206a      	movs	r0, #106	; 0x6a
 8003700:	f7fc fff5 	bl	80006ee <WriteCmdData>
        break;
 8003704:	e057      	b.n	80037b6 <vertScroll+0x2ea>
#ifdef SUPPORT_0139
    case 0x0139:
        WriteCmdData(0x07, 0x0213 | (_lcd_rev << 2));  //VLE1=1, GON=1, REV=x, D=3
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <vertScroll+0x2c8>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	b21b      	sxth	r3, r3
 800370e:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 8003712:	f043 0303 	orr.w	r3, r3, #3
 8003716:	b21b      	sxth	r3, r3
 8003718:	b29b      	uxth	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	2007      	movs	r0, #7
 800371e:	f7fc ffe6 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x41, vsp);  //VL# check vsp
 8003722:	8abb      	ldrh	r3, [r7, #20]
 8003724:	4619      	mov	r1, r3
 8003726:	2041      	movs	r0, #65	; 0x41
 8003728:	f7fc ffe1 	bl	80006ee <WriteCmdData>
        break;
 800372c:	e043      	b.n	80037b6 <vertScroll+0x2ea>
#endif
#if defined(SUPPORT_0154) || defined(SUPPORT_9225)  //thanks tongbajiel
    case 0x9225:
	case 0x0154:
        WriteCmdData(0x31, sea);        //SEA
 800372e:	8a7b      	ldrh	r3, [r7, #18]
 8003730:	4619      	mov	r1, r3
 8003732:	2031      	movs	r0, #49	; 0x31
 8003734:	f7fc ffdb 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x32, top);        //SSA
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4619      	mov	r1, r3
 800373c:	2032      	movs	r0, #50	; 0x32
 800373e:	f7fc ffd6 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x33, vsp - top);  //SST
 8003742:	8aba      	ldrh	r2, [r7, #20]
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	2033      	movs	r0, #51	; 0x33
 800374e:	f7fc ffce 	bl	80006ee <WriteCmdData>
        break;
 8003752:	e030      	b.n	80037b6 <vertScroll+0x2ea>
#endif
#ifdef SUPPORT_1289
    case 0x1289:
        WriteCmdData(0x41, vsp);        //VL#
 8003754:	8abb      	ldrh	r3, [r7, #20]
 8003756:	4619      	mov	r1, r3
 8003758:	2041      	movs	r0, #65	; 0x41
 800375a:	f7fc ffc8 	bl	80006ee <WriteCmdData>
        break;
 800375e:	e02a      	b.n	80037b6 <vertScroll+0x2ea>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <vertScroll+0x2c8>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	b29b      	uxth	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	f240 4001 	movw	r0, #1025	; 0x401
 8003770:	f7fc ffbd 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003774:	8abb      	ldrh	r3, [r7, #20]
 8003776:	4619      	mov	r1, r3
 8003778:	f240 4004 	movw	r0, #1028	; 0x404
 800377c:	f7fc ffb7 	bl	80006ee <WriteCmdData>
        break;
 8003780:	e019      	b.n	80037b6 <vertScroll+0x2ea>
 8003782:	bf00      	nop
 8003784:	20000080 	.word	0x20000080
 8003788:	2000007a 	.word	0x2000007a
 800378c:	2000007e 	.word	0x2000007e
 8003790:	20000077 	.word	0x20000077
 8003794:	20000082 	.word	0x20000082
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <vertScroll+0x2f0>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	2061      	movs	r0, #97	; 0x61
 80037a6:	f7fc ffa2 	bl	80006ee <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80037aa:	8abb      	ldrh	r3, [r7, #20]
 80037ac:	4619      	mov	r1, r3
 80037ae:	206a      	movs	r0, #106	; 0x6a
 80037b0:	f7fc ff9d 	bl	80006ee <WriteCmdData>
        break;
 80037b4:	bf00      	nop
    }
}
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000082 	.word	0x20000082

080037c0 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <fillScreen+0x2c>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <fillScreen+0x30>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b219      	sxth	r1, r3
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	460b      	mov	r3, r1
 80037dc:	2100      	movs	r1, #0
 80037de:	2000      	movs	r0, #0
 80037e0:	f000 f8d8 	bl	8003994 <fillRect>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000004 	.word	0x20000004
 80037f0:	20000006 	.word	0x20000006

080037f4 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80037fe:	4b60      	ldr	r3, [pc, #384]	; (8003980 <invertDisplay+0x18c>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	b21a      	sxth	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	b21b      	sxth	r3, r3
 8003816:	4053      	eors	r3, r2
 8003818:	b21b      	sxth	r3, r3
 800381a:	b29a      	uxth	r2, r3
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <invertDisplay+0x190>)
 800381e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003820:	4b57      	ldr	r3, [pc, #348]	; (8003980 <invertDisplay+0x18c>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d035      	beq.n	8003898 <invertDisplay+0xa4>
        if (is8347) {
 800382c:	4b56      	ldr	r3, [pc, #344]	; (8003988 <invertDisplay+0x194>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d024      	beq.n	800387e <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <invertDisplay+0x198>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	f248 3247 	movw	r2, #33607	; 0x8347
 800383c:	4293      	cmp	r3, r2
 800383e:	d005      	beq.n	800384c <invertDisplay+0x58>
 8003840:	4b52      	ldr	r3, [pc, #328]	; (800398c <invertDisplay+0x198>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	f245 2252 	movw	r2, #21074	; 0x5252
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 800384c:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <invertDisplay+0x190>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <invertDisplay+0x64>
 8003854:	2306      	movs	r3, #6
 8003856:	e000      	b.n	800385a <invertDisplay+0x66>
 8003858:	2302      	movs	r3, #2
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e007      	b.n	800386e <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800385e:	4b49      	ldr	r3, [pc, #292]	; (8003984 <invertDisplay+0x190>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <invertDisplay+0x76>
 8003866:	2308      	movs	r3, #8
 8003868:	e000      	b.n	800386c <invertDisplay+0x78>
 800386a:	230a      	movs	r3, #10
 800386c:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800386e:	f107 030f 	add.w	r3, r7, #15
 8003872:	461a      	mov	r2, r3
 8003874:	2101      	movs	r1, #1
 8003876:	2001      	movs	r0, #1
 8003878:	f7fd f8f6 	bl	8000a68 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 800387c:	e07d      	b.n	800397a <invertDisplay+0x186>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <invertDisplay+0x190>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <invertDisplay+0x96>
 8003886:	2321      	movs	r3, #33	; 0x21
 8003888:	e000      	b.n	800388c <invertDisplay+0x98>
 800388a:	2320      	movs	r3, #32
 800388c:	2200      	movs	r2, #0
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd f8e9 	bl	8000a68 <WriteCmdParamN>
 8003896:	e070      	b.n	800397a <invertDisplay+0x186>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003898:	4b3c      	ldr	r3, [pc, #240]	; (800398c <invertDisplay+0x198>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	f24b 5209 	movw	r2, #46345	; 0xb509
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d058      	beq.n	8003956 <invertDisplay+0x162>
 80038a4:	f24b 5209 	movw	r2, #46345	; 0xb509
 80038a8:	4293      	cmp	r3, r2
 80038aa:	dc5f      	bgt.n	800396c <invertDisplay+0x178>
 80038ac:	f249 3226 	movw	r2, #37670	; 0x9326
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d050      	beq.n	8003956 <invertDisplay+0x162>
 80038b4:	f249 3226 	movw	r2, #37670	; 0x9326
 80038b8:	4293      	cmp	r3, r2
 80038ba:	dc57      	bgt.n	800396c <invertDisplay+0x178>
 80038bc:	f249 2225 	movw	r2, #37413	; 0x9225
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <invertDisplay+0x116>
 80038c4:	f249 2225 	movw	r2, #37413	; 0x9225
 80038c8:	4293      	cmp	r3, r2
 80038ca:	dc4f      	bgt.n	800396c <invertDisplay+0x178>
 80038cc:	f247 7293 	movw	r2, #30611	; 0x7793
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d040      	beq.n	8003956 <invertDisplay+0x162>
 80038d4:	f247 7293 	movw	r2, #30611	; 0x7793
 80038d8:	4293      	cmp	r3, r2
 80038da:	dc47      	bgt.n	800396c <invertDisplay+0x178>
 80038dc:	f245 4220 	movw	r2, #21536	; 0x5420
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d038      	beq.n	8003956 <invertDisplay+0x162>
 80038e4:	f245 4220 	movw	r2, #21536	; 0x5420
 80038e8:	4293      	cmp	r3, r2
 80038ea:	dc3f      	bgt.n	800396c <invertDisplay+0x178>
 80038ec:	f241 2289 	movw	r2, #4745	; 0x1289
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d017      	beq.n	8003924 <invertDisplay+0x130>
 80038f4:	f241 2289 	movw	r2, #4745	; 0x1289
 80038f8:	4293      	cmp	r3, r2
 80038fa:	dc37      	bgt.n	800396c <invertDisplay+0x178>
 80038fc:	f240 1239 	movw	r2, #313	; 0x139
 8003900:	4293      	cmp	r3, r2
 8003902:	d002      	beq.n	800390a <invertDisplay+0x116>
 8003904:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003908:	d130      	bne.n	800396c <invertDisplay+0x178>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <invertDisplay+0x190>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	b21b      	sxth	r3, r3
 8003912:	f043 0313 	orr.w	r3, r3, #19
 8003916:	b21b      	sxth	r3, r3
 8003918:	b29b      	uxth	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	2007      	movs	r0, #7
 800391e:	f7fc fee6 	bl	80006ee <WriteCmdData>
        break;
 8003922:	e02a      	b.n	800397a <invertDisplay+0x186>
#ifdef SUPPORT_1289
    case 0x1289:
        _lcd_drivOut &= ~(1 << 13);
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <invertDisplay+0x19c>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <invertDisplay+0x19c>)
 8003930:	801a      	strh	r2, [r3, #0]
        if (_lcd_rev)
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <invertDisplay+0x190>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <invertDisplay+0x154>
            _lcd_drivOut |= (1 << 13);
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <invertDisplay+0x19c>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003942:	b29a      	uxth	r2, r3
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <invertDisplay+0x19c>)
 8003946:	801a      	strh	r2, [r3, #0]
        WriteCmdData(0x01, _lcd_drivOut);
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <invertDisplay+0x19c>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	2001      	movs	r0, #1
 8003950:	f7fc fecd 	bl	80006ee <WriteCmdData>
        break;
 8003954:	e011      	b.n	800397a <invertDisplay+0x186>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <invertDisplay+0x190>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	b29b      	uxth	r3, r3
 8003960:	4619      	mov	r1, r3
 8003962:	f240 4001 	movw	r0, #1025	; 0x401
 8003966:	f7fc fec2 	bl	80006ee <WriteCmdData>
        break;
 800396a:	e006      	b.n	800397a <invertDisplay+0x186>
    default:
        WriteCmdData(0x61, _lcd_rev);
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <invertDisplay+0x190>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	2061      	movs	r0, #97	; 0x61
 8003974:	f7fc febb 	bl	80006ee <WriteCmdData>
        break;
 8003978:	bf00      	nop
    }
}
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000007e 	.word	0x2000007e
 8003984:	20000082 	.word	0x20000082
 8003988:	20000077 	.word	0x20000077
 800398c:	20000080 	.word	0x20000080
 8003990:	20000086 	.word	0x20000086

08003994 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	80fb      	strh	r3, [r7, #6]
 80039a6:	4603      	mov	r3, r0
 80039a8:	80bb      	strh	r3, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	807b      	strh	r3, [r7, #2]
 80039ae:	4613      	mov	r3, r2
 80039b0:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80039b2:	4b6e      	ldr	r3, [pc, #440]	; (8003b6c <fillRect+0x1d8>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <fillRect+0x32>
 80039ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fded 	bl	800059c <color565_to_555>
 80039c2:	4603      	mov	r3, r0
 80039c4:	853b      	strh	r3, [r7, #40]	; 0x28
#endif
    if (w < 0) {
 80039c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da08      	bge.n	80039e0 <fillRect+0x4c>
        w = -w;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	425b      	negs	r3, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	807b      	strh	r3, [r7, #2]
        x -= w;
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	887b      	ldrh	r3, [r7, #2]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	4413      	add	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	82fb      	strh	r3, [r7, #22]
    if (x < 0)
 80039ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da01      	bge.n	80039f6 <fillRect+0x62>
        x = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 80039f6:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 80039fa:	f7fc fdbb 	bl	8000574 <width>
 80039fe:	4603      	mov	r3, r0
 8003a00:	429c      	cmp	r4, r3
 8003a02:	dd03      	ble.n	8003a0c <fillRect+0x78>
        end = width();
 8003a04:	f7fc fdb6 	bl	8000574 <width>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	82fb      	strh	r3, [r7, #22]
    w = end - x;
 8003a0c:	8afa      	ldrh	r2, [r7, #22]
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da08      	bge.n	8003a30 <fillRect+0x9c>
        h = -h;
 8003a1e:	883b      	ldrh	r3, [r7, #0]
 8003a20:	425b      	negs	r3, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003a26:	88ba      	ldrh	r2, [r7, #4]
 8003a28:	883b      	ldrh	r3, [r7, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003a30:	88ba      	ldrh	r2, [r7, #4]
 8003a32:	883b      	ldrh	r3, [r7, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	82fb      	strh	r3, [r7, #22]
    if (y < 0)
 8003a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da01      	bge.n	8003a46 <fillRect+0xb2>
        y = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8003a46:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8003a4a:	f7fc fd9d 	bl	8000588 <height>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	429c      	cmp	r4, r3
 8003a52:	dd03      	ble.n	8003a5c <fillRect+0xc8>
        end = height();
 8003a54:	f7fc fd98 	bl	8000588 <height>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	82fb      	strh	r3, [r7, #22]
    h = end - y;
 8003a5c:	8afa      	ldrh	r2, [r7, #22]
 8003a5e:	88bb      	ldrh	r3, [r7, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b21c      	sxth	r4, r3
 8003a74:	88ba      	ldrh	r2, [r7, #4]
 8003a76:	883b      	ldrh	r3, [r7, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b21b      	sxth	r3, r3
 8003a82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a86:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	f7ff fbfa 	bl	8003284 <setAddrWindow>
    CS_ACTIVE;
 8003a90:	2102      	movs	r1, #2
 8003a92:	4837      	ldr	r0, [pc, #220]	; (8003b70 <fillRect+0x1dc>)
 8003a94:	f7fc fd20 	bl	80004d8 <PIN_LOW>
    WriteCmd(_MW);
 8003a98:	2104      	movs	r1, #4
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <fillRect+0x1dc>)
 8003a9c:	f7fc fd1c 	bl	80004d8 <PIN_LOW>
 8003aa0:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <fillRect+0x1e0>)
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	757b      	strb	r3, [r7, #21]
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <fillRect+0x1e0>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	753b      	strb	r3, [r7, #20]
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <fillRect+0x1dc>)
 8003ab2:	4a31      	ldr	r2, [pc, #196]	; (8003b78 <fillRect+0x1e4>)
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <fillRect+0x1e8>)
 8003ab8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	7d7b      	ldrb	r3, [r7, #21]
 8003ac0:	035b      	lsls	r3, r3, #13
 8003ac2:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003ac6:	7d7b      	ldrb	r3, [r7, #21]
 8003ac8:	109b      	asrs	r3, r3, #2
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <fillRect+0x1dc>)
 8003ad2:	611a      	str	r2, [r3, #16]
 8003ad4:	7d7b      	ldrb	r3, [r7, #21]
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <fillRect+0x1e8>)
 8003ad8:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003adc:	6113      	str	r3, [r2, #16]
 8003ade:	2108      	movs	r1, #8
 8003ae0:	4823      	ldr	r0, [pc, #140]	; (8003b70 <fillRect+0x1dc>)
 8003ae2:	f7fc fcf9 	bl	80004d8 <PIN_LOW>
 8003ae6:	2108      	movs	r1, #8
 8003ae8:	4821      	ldr	r0, [pc, #132]	; (8003b70 <fillRect+0x1dc>)
 8003aea:	f7fc fd05 	bl	80004f8 <PIN_HIGH>
 8003aee:	2108      	movs	r1, #8
 8003af0:	481f      	ldr	r0, [pc, #124]	; (8003b70 <fillRect+0x1dc>)
 8003af2:	f7fc fd01 	bl	80004f8 <PIN_HIGH>
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <fillRect+0x1dc>)
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <fillRect+0x1e4>)
 8003afa:	611a      	str	r2, [r3, #16]
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <fillRect+0x1e8>)
 8003afe:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	7d3b      	ldrb	r3, [r7, #20]
 8003b06:	035b      	lsls	r3, r3, #13
 8003b08:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003b0c:	7d3b      	ldrb	r3, [r7, #20]
 8003b0e:	109b      	asrs	r3, r3, #2
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	431a      	orrs	r2, r3
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <fillRect+0x1dc>)
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	7d3b      	ldrb	r3, [r7, #20]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <fillRect+0x1e8>)
 8003b1e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003b22:	6113      	str	r3, [r2, #16]
 8003b24:	2108      	movs	r1, #8
 8003b26:	4812      	ldr	r0, [pc, #72]	; (8003b70 <fillRect+0x1dc>)
 8003b28:	f7fc fcd6 	bl	80004d8 <PIN_LOW>
 8003b2c:	2108      	movs	r1, #8
 8003b2e:	4810      	ldr	r0, [pc, #64]	; (8003b70 <fillRect+0x1dc>)
 8003b30:	f7fc fce2 	bl	80004f8 <PIN_HIGH>
 8003b34:	2108      	movs	r1, #8
 8003b36:	480e      	ldr	r0, [pc, #56]	; (8003b70 <fillRect+0x1dc>)
 8003b38:	f7fc fcde 	bl	80004f8 <PIN_HIGH>
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	480c      	ldr	r0, [pc, #48]	; (8003b70 <fillRect+0x1dc>)
 8003b40:	f7fc fcda 	bl	80004f8 <PIN_HIGH>
    if (h > w) {
 8003b44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dd05      	ble.n	8003b5c <fillRect+0x1c8>
        end = h;
 8003b50:	883b      	ldrh	r3, [r7, #0]
 8003b52:	82fb      	strh	r3, [r7, #22]
        h = w;
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	803b      	strh	r3, [r7, #0]
        w = end;
 8003b58:	8afb      	ldrh	r3, [r7, #22]
 8003b5a:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	74fb      	strb	r3, [r7, #19]
 8003b64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b66:	74bb      	strb	r3, [r7, #18]
    while (h-- > 0) {
 8003b68:	e0e3      	b.n	8003d32 <fillRect+0x39e>
 8003b6a:	bf00      	nop
 8003b6c:	20000078 	.word	0x20000078
 8003b70:	40010800 	.word	0x40010800
 8003b74:	2000008c 	.word	0x2000008c
 8003b78:	80200000 	.word	0x80200000
 8003b7c:	40010c00 	.word	0x40010c00
        end = w;
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	82fb      	strh	r3, [r7, #22]
        while (lo-- > 0) {
            STROBE_16BIT;
        }
#else
#if defined(SUPPORT_1289)
        if (is9797) {
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <fillRect+0x408>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8084 	beq.w	8003c96 <fillRect+0x302>
             uint8_t r = color565_to_r(color);
 8003b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fd42 	bl	800061a <color565_to_r>
 8003b96:	4603      	mov	r3, r0
 8003b98:	747b      	strb	r3, [r7, #17]
             uint8_t g = color565_to_g(color);
 8003b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fd4c 	bl	800063a <color565_to_g>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	743b      	strb	r3, [r7, #16]
             uint8_t b = color565_to_b(color);
 8003ba6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fd56 	bl	800065a <color565_to_b>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
             do {
                 write8(r);
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <fillRect+0x40c>)
 8003bb4:	4a7b      	ldr	r2, [pc, #492]	; (8003da4 <fillRect+0x410>)
 8003bb6:	611a      	str	r2, [r3, #16]
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <fillRect+0x414>)
 8003bba:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	7c7b      	ldrb	r3, [r7, #17]
 8003bc2:	035b      	lsls	r3, r3, #13
 8003bc4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003bc8:	7c7b      	ldrb	r3, [r7, #17]
 8003bca:	109b      	asrs	r3, r3, #2
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <fillRect+0x40c>)
 8003bd4:	611a      	str	r2, [r3, #16]
 8003bd6:	7c7b      	ldrb	r3, [r7, #17]
 8003bd8:	4a73      	ldr	r2, [pc, #460]	; (8003da8 <fillRect+0x414>)
 8003bda:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003bde:	6113      	str	r3, [r2, #16]
 8003be0:	2108      	movs	r1, #8
 8003be2:	486f      	ldr	r0, [pc, #444]	; (8003da0 <fillRect+0x40c>)
 8003be4:	f7fc fc78 	bl	80004d8 <PIN_LOW>
 8003be8:	2108      	movs	r1, #8
 8003bea:	486d      	ldr	r0, [pc, #436]	; (8003da0 <fillRect+0x40c>)
 8003bec:	f7fc fc84 	bl	80004f8 <PIN_HIGH>
 8003bf0:	2108      	movs	r1, #8
 8003bf2:	486b      	ldr	r0, [pc, #428]	; (8003da0 <fillRect+0x40c>)
 8003bf4:	f7fc fc80 	bl	80004f8 <PIN_HIGH>
                 write8(g);
 8003bf8:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <fillRect+0x40c>)
 8003bfa:	4a6a      	ldr	r2, [pc, #424]	; (8003da4 <fillRect+0x410>)
 8003bfc:	611a      	str	r2, [r3, #16]
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	; (8003da8 <fillRect+0x414>)
 8003c00:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003c04:	611a      	str	r2, [r3, #16]
 8003c06:	7c3b      	ldrb	r3, [r7, #16]
 8003c08:	035b      	lsls	r3, r3, #13
 8003c0a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003c0e:	7c3b      	ldrb	r3, [r7, #16]
 8003c10:	109b      	asrs	r3, r3, #2
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	431a      	orrs	r2, r3
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <fillRect+0x40c>)
 8003c1a:	611a      	str	r2, [r3, #16]
 8003c1c:	7c3b      	ldrb	r3, [r7, #16]
 8003c1e:	4a62      	ldr	r2, [pc, #392]	; (8003da8 <fillRect+0x414>)
 8003c20:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003c24:	6113      	str	r3, [r2, #16]
 8003c26:	2108      	movs	r1, #8
 8003c28:	485d      	ldr	r0, [pc, #372]	; (8003da0 <fillRect+0x40c>)
 8003c2a:	f7fc fc55 	bl	80004d8 <PIN_LOW>
 8003c2e:	2108      	movs	r1, #8
 8003c30:	485b      	ldr	r0, [pc, #364]	; (8003da0 <fillRect+0x40c>)
 8003c32:	f7fc fc61 	bl	80004f8 <PIN_HIGH>
 8003c36:	2108      	movs	r1, #8
 8003c38:	4859      	ldr	r0, [pc, #356]	; (8003da0 <fillRect+0x40c>)
 8003c3a:	f7fc fc5d 	bl	80004f8 <PIN_HIGH>
                 write8(b);
 8003c3e:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <fillRect+0x40c>)
 8003c40:	4a58      	ldr	r2, [pc, #352]	; (8003da4 <fillRect+0x410>)
 8003c42:	611a      	str	r2, [r3, #16]
 8003c44:	4b58      	ldr	r3, [pc, #352]	; (8003da8 <fillRect+0x414>)
 8003c46:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003c4a:	611a      	str	r2, [r3, #16]
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	035b      	lsls	r3, r3, #13
 8003c50:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	109b      	asrs	r3, r3, #2
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <fillRect+0x40c>)
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	4a50      	ldr	r2, [pc, #320]	; (8003da8 <fillRect+0x414>)
 8003c66:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003c6a:	6113      	str	r3, [r2, #16]
 8003c6c:	2108      	movs	r1, #8
 8003c6e:	484c      	ldr	r0, [pc, #304]	; (8003da0 <fillRect+0x40c>)
 8003c70:	f7fc fc32 	bl	80004d8 <PIN_LOW>
 8003c74:	2108      	movs	r1, #8
 8003c76:	484a      	ldr	r0, [pc, #296]	; (8003da0 <fillRect+0x40c>)
 8003c78:	f7fc fc3e 	bl	80004f8 <PIN_HIGH>
 8003c7c:	2108      	movs	r1, #8
 8003c7e:	4848      	ldr	r0, [pc, #288]	; (8003da0 <fillRect+0x40c>)
 8003c80:	f7fc fc3a 	bl	80004f8 <PIN_HIGH>
             } while (--end != 0);
 8003c84:	8afb      	ldrh	r3, [r7, #22]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	82fb      	strh	r3, [r7, #22]
 8003c8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d18e      	bne.n	8003bb2 <fillRect+0x21e>
 8003c94:	e04d      	b.n	8003d32 <fillRect+0x39e>
        } else
#endif
        do {
            write8(hi);
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <fillRect+0x40c>)
 8003c98:	4a42      	ldr	r2, [pc, #264]	; (8003da4 <fillRect+0x410>)
 8003c9a:	611a      	str	r2, [r3, #16]
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <fillRect+0x414>)
 8003c9e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003ca2:	611a      	str	r2, [r3, #16]
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	035b      	lsls	r3, r3, #13
 8003ca8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
 8003cae:	109b      	asrs	r3, r3, #2
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <fillRect+0x40c>)
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	4a3a      	ldr	r2, [pc, #232]	; (8003da8 <fillRect+0x414>)
 8003cbe:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003cc2:	6113      	str	r3, [r2, #16]
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	4836      	ldr	r0, [pc, #216]	; (8003da0 <fillRect+0x40c>)
 8003cc8:	f7fc fc06 	bl	80004d8 <PIN_LOW>
 8003ccc:	2108      	movs	r1, #8
 8003cce:	4834      	ldr	r0, [pc, #208]	; (8003da0 <fillRect+0x40c>)
 8003cd0:	f7fc fc12 	bl	80004f8 <PIN_HIGH>
 8003cd4:	2108      	movs	r1, #8
 8003cd6:	4832      	ldr	r0, [pc, #200]	; (8003da0 <fillRect+0x40c>)
 8003cd8:	f7fc fc0e 	bl	80004f8 <PIN_HIGH>
            write8(lo);
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <fillRect+0x40c>)
 8003cde:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <fillRect+0x410>)
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <fillRect+0x414>)
 8003ce4:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	7cbb      	ldrb	r3, [r7, #18]
 8003cec:	035b      	lsls	r3, r3, #13
 8003cee:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003cf2:	7cbb      	ldrb	r3, [r7, #18]
 8003cf4:	109b      	asrs	r3, r3, #2
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <fillRect+0x40c>)
 8003cfe:	611a      	str	r2, [r3, #16]
 8003d00:	7cbb      	ldrb	r3, [r7, #18]
 8003d02:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <fillRect+0x414>)
 8003d04:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003d08:	6113      	str	r3, [r2, #16]
 8003d0a:	2108      	movs	r1, #8
 8003d0c:	4824      	ldr	r0, [pc, #144]	; (8003da0 <fillRect+0x40c>)
 8003d0e:	f7fc fbe3 	bl	80004d8 <PIN_LOW>
 8003d12:	2108      	movs	r1, #8
 8003d14:	4822      	ldr	r0, [pc, #136]	; (8003da0 <fillRect+0x40c>)
 8003d16:	f7fc fbef 	bl	80004f8 <PIN_HIGH>
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	4820      	ldr	r0, [pc, #128]	; (8003da0 <fillRect+0x40c>)
 8003d1e:	f7fc fbeb 	bl	80004f8 <PIN_HIGH>
        } while (--end != 0);
 8003d22:	8afb      	ldrh	r3, [r7, #22]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	82fb      	strh	r3, [r7, #22]
 8003d2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1b1      	bne.n	8003c96 <fillRect+0x302>
    while (h-- > 0) {
 8003d32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	803a      	strh	r2, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f73f af1e 	bgt.w	8003b80 <fillRect+0x1ec>
#endif
    }
    CS_IDLE;
 8003d44:	2102      	movs	r1, #2
 8003d46:	4816      	ldr	r0, [pc, #88]	; (8003da0 <fillRect+0x40c>)
 8003d48:	f7fc fbd6 	bl	80004f8 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <fillRect+0x418>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <fillRect+0x3dc>
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <fillRect+0x41c>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	f241 5226 	movw	r2, #5414	; 0x1526
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d116      	bne.n	8003d92 <fillRect+0x3fe>
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <fillRect+0x420>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <fillRect+0x3fe>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003d70:	f7fc fc00 	bl	8000574 <width>
 8003d74:	4603      	mov	r3, r0
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	b21c      	sxth	r4, r3
 8003d7c:	f7fc fc04 	bl	8000588 <height>
 8003d80:	4603      	mov	r3, r0
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	4622      	mov	r2, r4
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f7ff fa79 	bl	8003284 <setAddrWindow>
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000079 	.word	0x20000079
 8003da0:	40010800 	.word	0x40010800
 8003da4:	80200000 	.word	0x80200000
 8003da8:	40010c00 	.word	0x40010c00
 8003dac:	2000007e 	.word	0x2000007e
 8003db0:	20000080 	.word	0x20000080
 8003db4:	2000007a 	.word	0x2000007a

08003db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dba:	490d      	ldr	r1, [pc, #52]	; (8003df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dc0:	e002      	b.n	8003dc8 <LoopCopyDataInit>

08003dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dc6:	3304      	adds	r3, #4

08003dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dcc:	d3f9      	bcc.n	8003dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dd0:	4c0a      	ldr	r4, [pc, #40]	; (8003dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd4:	e001      	b.n	8003dda <LoopFillZerobss>

08003dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd8:	3204      	adds	r2, #4

08003dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ddc:	d3fb      	bcc.n	8003dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dde:	f7fc fb5c 	bl	800049a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003de2:	f001 f9b1 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003de6:	f7fc f9b1 	bl	800014c <main>
  bx lr
 8003dea:	4770      	bx	lr
  ldr r0, =_sdata
 8003dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003df4:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 8003df8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003dfc:	2000009c 	.word	0x2000009c

08003e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e00:	e7fe      	b.n	8003e00 <ADC1_2_IRQHandler>
	...

08003e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_Init+0x28>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_Init+0x28>)
 8003e0e:	f043 0310 	orr.w	r3, r3, #16
 8003e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e14:	2003      	movs	r0, #3
 8003e16:	f000 f92b 	bl	8004070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e1a:	200f      	movs	r0, #15
 8003e1c:	f000 f808 	bl	8003e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e20:	f7fc fac4 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40022000 	.word	0x40022000

08003e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_InitTick+0x54>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_InitTick+0x58>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f935 	bl	80040be <HAL_SYSTICK_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00e      	b.n	8003e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b0f      	cmp	r3, #15
 8003e62:	d80a      	bhi.n	8003e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e64:	2200      	movs	r2, #0
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e6c:	f000 f90b 	bl	8004086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e70:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <HAL_InitTick+0x5c>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000000 	.word	0x20000000
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	20000008 	.word	0x20000008

08003e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_IncTick+0x1c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_IncTick+0x20>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_IncTick+0x20>)
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	20000098 	.word	0x20000098

08003eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb8:	4b02      	ldr	r3, [pc, #8]	; (8003ec4 <HAL_GetTick+0x10>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	20000098 	.word	0x20000098

08003ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff fff0 	bl	8003eb4 <HAL_GetTick>
 8003ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d005      	beq.n	8003eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <HAL_Delay+0x44>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eee:	bf00      	nop
 8003ef0:	f7ff ffe0 	bl	8003eb4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d8f7      	bhi.n	8003ef0 <HAL_Delay+0x28>
  {
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000000c 	.word	0x2000000c

08003f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <__NVIC_SetPriorityGrouping+0x44>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <__NVIC_SetPriorityGrouping+0x44>)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	60d3      	str	r3, [r2, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <__NVIC_GetPriorityGrouping+0x18>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 0307 	and.w	r3, r3, #7
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	db0a      	blt.n	8003f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <__NVIC_SetPriority+0x4c>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	440b      	add	r3, r1
 8003f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f9c:	e00a      	b.n	8003fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <__NVIC_SetPriority+0x50>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	3b04      	subs	r3, #4
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	761a      	strb	r2, [r3, #24]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e100 	.word	0xe000e100
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f1c3 0307 	rsb	r3, r3, #7
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	bf28      	it	cs
 8003fe6:	2304      	movcs	r3, #4
 8003fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d902      	bls.n	8003ff8 <NVIC_EncodePriority+0x30>
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3b03      	subs	r3, #3
 8003ff6:	e000      	b.n	8003ffa <NVIC_EncodePriority+0x32>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	401a      	ands	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	43d9      	mvns	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	4313      	orrs	r3, r2
         );
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800403c:	d301      	bcc.n	8004042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800403e:	2301      	movs	r3, #1
 8004040:	e00f      	b.n	8004062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004042:	4a0a      	ldr	r2, [pc, #40]	; (800406c <SysTick_Config+0x40>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800404a:	210f      	movs	r1, #15
 800404c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004050:	f7ff ff90 	bl	8003f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <SysTick_Config+0x40>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <SysTick_Config+0x40>)
 800405c:	2207      	movs	r2, #7
 800405e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	e000e010 	.word	0xe000e010

08004070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff49 	bl	8003f10 <__NVIC_SetPriorityGrouping>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004098:	f7ff ff5e 	bl	8003f58 <__NVIC_GetPriorityGrouping>
 800409c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7ff ff90 	bl	8003fc8 <NVIC_EncodePriority>
 80040a8:	4602      	mov	r2, r0
 80040aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff5f 	bl	8003f74 <__NVIC_SetPriority>
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffb0 	bl	800402c <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b08b      	sub	sp, #44	; 0x2c
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ea:	e169      	b.n	80043c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040ec:	2201      	movs	r2, #1
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	429a      	cmp	r2, r3
 8004106:	f040 8158 	bne.w	80043ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4a9a      	ldr	r2, [pc, #616]	; (8004378 <HAL_GPIO_Init+0x2a0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d05e      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
 8004114:	4a98      	ldr	r2, [pc, #608]	; (8004378 <HAL_GPIO_Init+0x2a0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d875      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 800411a:	4a98      	ldr	r2, [pc, #608]	; (800437c <HAL_GPIO_Init+0x2a4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d058      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
 8004120:	4a96      	ldr	r2, [pc, #600]	; (800437c <HAL_GPIO_Init+0x2a4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d86f      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 8004126:	4a96      	ldr	r2, [pc, #600]	; (8004380 <HAL_GPIO_Init+0x2a8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d052      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
 800412c:	4a94      	ldr	r2, [pc, #592]	; (8004380 <HAL_GPIO_Init+0x2a8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d869      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 8004132:	4a94      	ldr	r2, [pc, #592]	; (8004384 <HAL_GPIO_Init+0x2ac>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04c      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
 8004138:	4a92      	ldr	r2, [pc, #584]	; (8004384 <HAL_GPIO_Init+0x2ac>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d863      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 800413e:	4a92      	ldr	r2, [pc, #584]	; (8004388 <HAL_GPIO_Init+0x2b0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d046      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
 8004144:	4a90      	ldr	r2, [pc, #576]	; (8004388 <HAL_GPIO_Init+0x2b0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d85d      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 800414a:	2b12      	cmp	r3, #18
 800414c:	d82a      	bhi.n	80041a4 <HAL_GPIO_Init+0xcc>
 800414e:	2b12      	cmp	r3, #18
 8004150:	d859      	bhi.n	8004206 <HAL_GPIO_Init+0x12e>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_GPIO_Init+0x80>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	080041d3 	.word	0x080041d3
 800415c:	080041ad 	.word	0x080041ad
 8004160:	080041bf 	.word	0x080041bf
 8004164:	08004201 	.word	0x08004201
 8004168:	08004207 	.word	0x08004207
 800416c:	08004207 	.word	0x08004207
 8004170:	08004207 	.word	0x08004207
 8004174:	08004207 	.word	0x08004207
 8004178:	08004207 	.word	0x08004207
 800417c:	08004207 	.word	0x08004207
 8004180:	08004207 	.word	0x08004207
 8004184:	08004207 	.word	0x08004207
 8004188:	08004207 	.word	0x08004207
 800418c:	08004207 	.word	0x08004207
 8004190:	08004207 	.word	0x08004207
 8004194:	08004207 	.word	0x08004207
 8004198:	08004207 	.word	0x08004207
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041c9 	.word	0x080041c9
 80041a4:	4a79      	ldr	r2, [pc, #484]	; (800438c <HAL_GPIO_Init+0x2b4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041aa:	e02c      	b.n	8004206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	623b      	str	r3, [r7, #32]
          break;
 80041b2:	e029      	b.n	8004208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	3304      	adds	r3, #4
 80041ba:	623b      	str	r3, [r7, #32]
          break;
 80041bc:	e024      	b.n	8004208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	3308      	adds	r3, #8
 80041c4:	623b      	str	r3, [r7, #32]
          break;
 80041c6:	e01f      	b.n	8004208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	330c      	adds	r3, #12
 80041ce:	623b      	str	r3, [r7, #32]
          break;
 80041d0:	e01a      	b.n	8004208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041da:	2304      	movs	r3, #4
 80041dc:	623b      	str	r3, [r7, #32]
          break;
 80041de:	e013      	b.n	8004208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041e8:	2308      	movs	r3, #8
 80041ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	611a      	str	r2, [r3, #16]
          break;
 80041f2:	e009      	b.n	8004208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041f4:	2308      	movs	r3, #8
 80041f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	615a      	str	r2, [r3, #20]
          break;
 80041fe:	e003      	b.n	8004208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004200:	2300      	movs	r3, #0
 8004202:	623b      	str	r3, [r7, #32]
          break;
 8004204:	e000      	b.n	8004208 <HAL_GPIO_Init+0x130>
          break;
 8004206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2bff      	cmp	r3, #255	; 0xff
 800420c:	d801      	bhi.n	8004212 <HAL_GPIO_Init+0x13a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	e001      	b.n	8004216 <HAL_GPIO_Init+0x13e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2bff      	cmp	r3, #255	; 0xff
 800421c:	d802      	bhi.n	8004224 <HAL_GPIO_Init+0x14c>
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	e002      	b.n	800422a <HAL_GPIO_Init+0x152>
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	3b08      	subs	r3, #8
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	210f      	movs	r1, #15
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80b1 	beq.w	80043ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004258:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <HAL_GPIO_Init+0x2b8>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4a4c      	ldr	r2, [pc, #304]	; (8004390 <HAL_GPIO_Init+0x2b8>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6193      	str	r3, [r2, #24]
 8004264:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_GPIO_Init+0x2b8>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004270:	4a48      	ldr	r2, [pc, #288]	; (8004394 <HAL_GPIO_Init+0x2bc>)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	3302      	adds	r3, #2
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	220f      	movs	r2, #15
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a40      	ldr	r2, [pc, #256]	; (8004398 <HAL_GPIO_Init+0x2c0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_GPIO_Init+0x1ec>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3f      	ldr	r2, [pc, #252]	; (800439c <HAL_GPIO_Init+0x2c4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00d      	beq.n	80042c0 <HAL_GPIO_Init+0x1e8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3e      	ldr	r2, [pc, #248]	; (80043a0 <HAL_GPIO_Init+0x2c8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <HAL_GPIO_Init+0x1e4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <HAL_GPIO_Init+0x2cc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_GPIO_Init+0x1e0>
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <HAL_GPIO_Init+0x1ee>
 80042b8:	2304      	movs	r3, #4
 80042ba:	e004      	b.n	80042c6 <HAL_GPIO_Init+0x1ee>
 80042bc:	2302      	movs	r3, #2
 80042be:	e002      	b.n	80042c6 <HAL_GPIO_Init+0x1ee>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_GPIO_Init+0x1ee>
 80042c4:	2300      	movs	r3, #0
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	f002 0203 	and.w	r2, r2, #3
 80042cc:	0092      	lsls	r2, r2, #2
 80042ce:	4093      	lsls	r3, r2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042d6:	492f      	ldr	r1, [pc, #188]	; (8004394 <HAL_GPIO_Init+0x2bc>)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	3302      	adds	r3, #2
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	492c      	ldr	r1, [pc, #176]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
 80042fc:	e006      	b.n	800430c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	43db      	mvns	r3, r3
 8004306:	4928      	ldr	r1, [pc, #160]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004308:	4013      	ands	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	4922      	ldr	r1, [pc, #136]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	e006      	b.n	8004334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	43db      	mvns	r3, r3
 800432e:	491e      	ldr	r1, [pc, #120]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004330:	4013      	ands	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4918      	ldr	r1, [pc, #96]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]
 800434c:	e006      	b.n	800435c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	43db      	mvns	r3, r3
 8004356:	4914      	ldr	r1, [pc, #80]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 8004358:	4013      	ands	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d021      	beq.n	80043ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <HAL_GPIO_Init+0x2d0>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	60cb      	str	r3, [r1, #12]
 8004374:	e021      	b.n	80043ba <HAL_GPIO_Init+0x2e2>
 8004376:	bf00      	nop
 8004378:	10320000 	.word	0x10320000
 800437c:	10310000 	.word	0x10310000
 8004380:	10220000 	.word	0x10220000
 8004384:	10210000 	.word	0x10210000
 8004388:	10120000 	.word	0x10120000
 800438c:	10110000 	.word	0x10110000
 8004390:	40021000 	.word	0x40021000
 8004394:	40010000 	.word	0x40010000
 8004398:	40010800 	.word	0x40010800
 800439c:	40010c00 	.word	0x40010c00
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_GPIO_Init+0x304>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	4909      	ldr	r1, [pc, #36]	; (80043dc <HAL_GPIO_Init+0x304>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	3301      	adds	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f47f ae8e 	bne.w	80040ec <HAL_GPIO_Init+0x14>
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	372c      	adds	r7, #44	; 0x2c
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	40010400 	.word	0x40010400

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043fc:	e003      	b.n	8004406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	611a      	str	r2, [r3, #16]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e272      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8087 	beq.w	800453e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004430:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b04      	cmp	r3, #4
 800443a:	d00c      	beq.n	8004456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800443c:	4b8f      	ldr	r3, [pc, #572]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d112      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004456:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d06c      	beq.n	800453c <HAL_RCC_OscConfig+0x12c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d168      	bne.n	800453c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e24c      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x76>
 8004478:	4b80      	ldr	r3, [pc, #512]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7f      	ldr	r2, [pc, #508]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e02e      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7a      	ldr	r2, [pc, #488]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b78      	ldr	r3, [pc, #480]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a77      	ldr	r2, [pc, #476]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0xbc>
 80044b2:	4b72      	ldr	r3, [pc, #456]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a71      	ldr	r2, [pc, #452]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044cc:	4b6b      	ldr	r3, [pc, #428]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a67      	ldr	r2, [pc, #412]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7ff fce2 	bl	8003eb4 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7ff fcde 	bl	8003eb4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e200      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b5d      	ldr	r3, [pc, #372]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xe4>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7ff fcce 	bl	8003eb4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7ff fcca 	bl	8003eb4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1ec      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x10c>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454a:	4b4c      	ldr	r3, [pc, #304]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
 8004562:	4b46      	ldr	r3, [pc, #280]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1c0      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4939      	ldr	r1, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7ff fc83 	bl	8003eb4 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7ff fc7f 	bl	8003eb4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1a1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4927      	ldr	r1, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7ff fc62 	bl	8003eb4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f4:	f7ff fc5e 	bl	8003eb4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e180      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03a      	beq.n	8004694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d019      	beq.n	800465a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7ff fc42 	bl	8003eb4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004634:	f7ff fc3e 	bl	8003eb4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e160      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004652:	2001      	movs	r0, #1
 8004654:	f000 faa6 	bl	8004ba4 <RCC_Delay>
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7ff fc28 	bl	8003eb4 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004666:	e00f      	b.n	8004688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7ff fc24 	bl	8003eb4 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d908      	bls.n	8004688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e146      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	42420000 	.word	0x42420000
 8004684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e9      	bne.n	8004668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a6 	beq.w	80047ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a87      	ldr	r2, [pc, #540]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	61d3      	str	r3, [r2, #28]
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b82      	ldr	r3, [pc, #520]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d118      	bne.n	800470c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046da:	4b7f      	ldr	r3, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7e      	ldr	r2, [pc, #504]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7ff fbe5 	bl	8003eb4 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ee:	f7ff fbe1 	bl	8003eb4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	; 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e103      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x312>
 8004714:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6213      	str	r3, [r2, #32]
 8004720:	e02d      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x334>
 800472a:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6213      	str	r3, [r2, #32]
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4a66      	ldr	r2, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	6213      	str	r3, [r2, #32]
 8004742:	e01c      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_OscConfig+0x356>
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6213      	str	r3, [r2, #32]
 8004764:	e00b      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7ff fb95 	bl	8003eb4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7ff fb91 	bl	8003eb4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0b1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCC_OscConfig+0x37e>
 80047b0:	e014      	b.n	80047dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7ff fb7f 	bl	8003eb4 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7ff fb7b 	bl	8003eb4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e09b      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4a3b      	ldr	r2, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8087 	beq.w	8004906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d061      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d146      	bne.n	800489a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7ff fb4f 	bl	8003eb4 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7ff fb4b 	bl	8003eb4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e06d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a19      	ldr	r1, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	430b      	orrs	r3, r1
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7ff fb1f 	bl	8003eb4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7ff fb1b 	bl	8003eb4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x46a>
 8004898:	e035      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7ff fb08 	bl	8003eb4 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7ff fb04 	bl	8003eb4 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e026      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x498>
 80048c6:	e01e      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e019      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_OscConfig+0x500>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000

08004914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4965      	ldr	r1, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800497a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d040      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e073      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7ff fa56 	bl	8003eb4 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7ff fa52 	bl	8003eb4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e053      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d210      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f9b4 	bl	8003e30 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	080051cc 	.word	0x080051cc
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000008 	.word	0x20000008

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b490      	push	{r4, r7}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8004af0:	1d3c      	adds	r4, r7, #4
 8004af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af8:	f240 2301 	movw	r3, #513	; 0x201
 8004afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x46>
 8004b26:	e02b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b2a:	623b      	str	r3, [r7, #32]
      break;
 8004b2c:	e02b      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	0c9b      	lsrs	r3, r3, #18
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3328      	adds	r3, #40	; 0x28
 8004b38:	443b      	add	r3, r7
 8004b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0c5b      	lsrs	r3, r3, #17
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	443b      	add	r3, r7
 8004b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b62:	fb03 f202 	mul.w	r2, r3, r2
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	e004      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	623b      	str	r3, [r7, #32]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	6a3b      	ldr	r3, [r7, #32]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc90      	pop	{r4, r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	080051bc 	.word	0x080051bc
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	007a1200 	.word	0x007a1200
 8004ba0:	003d0900 	.word	0x003d0900

08004ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <RCC_Delay+0x34>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <RCC_Delay+0x38>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bc0:	bf00      	nop
  }
  while (Delay --);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f9      	bne.n	8004bc0 <RCC_Delay+0x1c>
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fb fc02 	bl	8000410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 f93c 	bl	8004e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e032      	b.n	8004cfe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIM_Base_Start+0x88>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x48>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x48>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <HAL_TIM_Base_Start+0x8c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x48>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_TIM_Base_Start+0x90>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d010      	beq.n	8004cfc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e007      	b.n	8004cfc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800

08004d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0b3      	b.n	8004e94 <HAL_TIM_ConfigClockSource+0x180>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d03e      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0xd0>
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	f200 8087 	bhi.w	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	f000 8085 	beq.w	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d87f      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d7c:	2b70      	cmp	r3, #112	; 0x70
 8004d7e:	d01a      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0xa2>
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d87b      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d050      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x116>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d877      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d8c:	2b50      	cmp	r3, #80	; 0x50
 8004d8e:	d03c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0xf6>
 8004d90:	2b50      	cmp	r3, #80	; 0x50
 8004d92:	d873      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d058      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x136>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d86f      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d064      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x156>
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d86b      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d060      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x156>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d867      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d05c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x156>
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d05a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004db4:	e062      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6899      	ldr	r1, [r3, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f000 f942 	bl	800504e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	609a      	str	r2, [r3, #8]
      break;
 8004de2:	e04e      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f000 f92b 	bl	800504e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e06:	609a      	str	r2, [r3, #8]
      break;
 8004e08:	e03b      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 f8a2 	bl	8004f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2150      	movs	r1, #80	; 0x50
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f8f9 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004e28:	e02b      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 f8c0 	bl	8004fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2160      	movs	r1, #96	; 0x60
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f8e9 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004e48:	e01b      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 f882 	bl	8004f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f8d9 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 f8d0 	bl	800501a <TIM_ITRx_SetConfig>
        break;
 8004e7a:	e002      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <TIM_Base_SetConfig+0xb8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <TIM_Base_SetConfig+0xbc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x30>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <TIM_Base_SetConfig+0xc0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <TIM_Base_SetConfig+0xb8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d007      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <TIM_Base_SetConfig+0xbc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_Base_SetConfig+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <TIM_Base_SetConfig+0xc0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <TIM_Base_SetConfig+0xb8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d103      	bne.n	8004f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	615a      	str	r2, [r3, #20]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800

08004f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 030a 	bic.w	r3, r3, #10
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f023 0210 	bic.w	r2, r3, #16
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	f043 0307 	orr.w	r3, r3, #7
 800503c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	431a      	orrs	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	609a      	str	r2, [r3, #8]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e046      	b.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10c      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	2600      	movs	r6, #0
 800514c:	4d0c      	ldr	r5, [pc, #48]	; (8005180 <__libc_init_array+0x38>)
 800514e:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	f000 f822 	bl	80051a0 <_init>
 800515c:	2600      	movs	r6, #0
 800515e:	4d0a      	ldr	r5, [pc, #40]	; (8005188 <__libc_init_array+0x40>)
 8005160:	4c0a      	ldr	r4, [pc, #40]	; (800518c <__libc_init_array+0x44>)
 8005162:	1b64      	subs	r4, r4, r5
 8005164:	10a4      	asrs	r4, r4, #2
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f855 3b04 	ldr.w	r3, [r5], #4
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08005fd4 	.word	0x08005fd4
 8005184:	08005fd4 	.word	0x08005fd4
 8005188:	08005fd4 	.word	0x08005fd4
 800518c:	08005fd8 	.word	0x08005fd8

08005190 <memset>:
 8005190:	4603      	mov	r3, r0
 8005192:	4402      	add	r2, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	d100      	bne.n	800519a <memset+0xa>
 8005198:	4770      	bx	lr
 800519a:	f803 1b01 	strb.w	r1, [r3], #1
 800519e:	e7f9      	b.n	8005194 <memset+0x4>

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
