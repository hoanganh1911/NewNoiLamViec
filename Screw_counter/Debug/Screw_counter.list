
Screw_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  080029e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080029e8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  00028198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00029898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af5  00000000  00000000  0002ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4ba  00000000  00000000  00042675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088378  00000000  00000000  0004cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4ea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  000d4ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028cc 	.word	0x080028cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028cc 	.word	0x080028cc

0800014c <Delay_us>:
/* Biến đếm */
static int16_t screw_set_count = 0;

/* Sử dụng delay trong ngắt timer 2*/
void Delay_us(uint16_t t)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <Delay_us+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<t);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <Delay_us+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <Delay_us+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000008c 	.word	0x2000008c

0800017c <Delay_ms>:
void Delay_ms(uint32_t t)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i<1000;i++)
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	e007      	b.n	800019a <Delay_ms+0x1e>
		Delay_us(t);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4618      	mov	r0, r3
 8000190:	f7ff ffdc 	bl	800014c <Delay_us>
	for(uint32_t i = 0; i<1000;i++)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	3301      	adds	r3, #1
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001a0:	d3f3      	bcc.n	800018a <Delay_ms+0xe>
}
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_GPIO_EXTI_Callback>:
/* Thực hiện ngắt */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001b6:	b672      	cpsid	i
}
 80001b8:	bf00      	nop
	__disable_irq();
	Delay_ms(1);
 80001ba:	2001      	movs	r0, #1
 80001bc:	f7ff ffde 	bl	800017c <Delay_ms>

	// Xác định trạng thái đếm lên
	if(GPIO_Pin == CLK_EN_Pin && checkturnedCW == false)
 80001c0:	88fb      	ldrh	r3, [r7, #6]
 80001c2:	2b08      	cmp	r3, #8
 80001c4:	d118      	bne.n	80001f8 <HAL_GPIO_EXTI_Callback+0x4c>
 80001c6:	4b57      	ldr	r3, [pc, #348]	; (8000324 <HAL_GPIO_EXTI_Callback+0x178>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	f083 0301 	eor.w	r3, r3, #1
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d010      	beq.n	80001f8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(HAL_GPIO_ReadPin(DT_EN_GPIO_Port, DT_EN_Pin	) == 1 && HAL_GPIO_ReadPin(CLK_EN_GPIO_Port, CLK_EN_Pin) == 0)
 80001d6:	2110      	movs	r1, #16
 80001d8:	4853      	ldr	r0, [pc, #332]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 80001da:	f000 fe61 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d109      	bne.n	80001f8 <HAL_GPIO_EXTI_Callback+0x4c>
 80001e4:	2108      	movs	r1, #8
 80001e6:	4850      	ldr	r0, [pc, #320]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 80001e8:	f000 fe5a 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d102      	bne.n	80001f8 <HAL_GPIO_EXTI_Callback+0x4c>
			checkturnedCW = true;
 80001f2:	4b4c      	ldr	r3, [pc, #304]	; (8000324 <HAL_GPIO_EXTI_Callback+0x178>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == DT_EN_Pin && checkturnedCW == true)
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	2b10      	cmp	r3, #16
 80001fc:	d118      	bne.n	8000230 <HAL_GPIO_EXTI_Callback+0x84>
 80001fe:	4b49      	ldr	r3, [pc, #292]	; (8000324 <HAL_GPIO_EXTI_Callback+0x178>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d013      	beq.n	8000230 <HAL_GPIO_EXTI_Callback+0x84>
	{
		if(HAL_GPIO_ReadPin(DT_EN_GPIO_Port, DT_EN_Pin) == 0 && HAL_GPIO_ReadPin(CLK_EN_GPIO_Port, CLK_EN_Pin) == 0)
 8000208:	2110      	movs	r1, #16
 800020a:	4847      	ldr	r0, [pc, #284]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 800020c:	f000 fe48 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10c      	bne.n	8000230 <HAL_GPIO_EXTI_Callback+0x84>
 8000216:	2108      	movs	r1, #8
 8000218:	4843      	ldr	r0, [pc, #268]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 800021a:	f000 fe41 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d105      	bne.n	8000230 <HAL_GPIO_EXTI_Callback+0x84>
		{
			turnedCW = true;
 8000224:	4b41      	ldr	r3, [pc, #260]	; (800032c <HAL_GPIO_EXTI_Callback+0x180>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
			checkturnedCW = false;
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <HAL_GPIO_EXTI_Callback+0x178>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
		}
	}

	// Xác định trạng thái đễm xuống
	if(GPIO_Pin == DT_EN_Pin && checkturnedCCW == false)
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	2b10      	cmp	r3, #16
 8000234:	d118      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0xbc>
 8000236:	4b3e      	ldr	r3, [pc, #248]	; (8000330 <HAL_GPIO_EXTI_Callback+0x184>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	f083 0301 	eor.w	r3, r3, #1
 8000240:	b2db      	uxtb	r3, r3
 8000242:	2b00      	cmp	r3, #0
 8000244:	d010      	beq.n	8000268 <HAL_GPIO_EXTI_Callback+0xbc>
	{
		if(HAL_GPIO_ReadPin(DT_EN_GPIO_Port, DT_EN_Pin) == 0 && HAL_GPIO_ReadPin(CLK_EN_GPIO_Port, CLK_EN_Pin) == 1)
 8000246:	2110      	movs	r1, #16
 8000248:	4837      	ldr	r0, [pc, #220]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 800024a:	f000 fe29 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d109      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0xbc>
 8000254:	2108      	movs	r1, #8
 8000256:	4834      	ldr	r0, [pc, #208]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000258:	f000 fe22 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b01      	cmp	r3, #1
 8000260:	d102      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0xbc>
			checkturnedCCW = true;
 8000262:	4b33      	ldr	r3, [pc, #204]	; (8000330 <HAL_GPIO_EXTI_Callback+0x184>)
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == CLK_EN_Pin && checkturnedCCW == true)
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	2b08      	cmp	r3, #8
 800026c:	d118      	bne.n	80002a0 <HAL_GPIO_EXTI_Callback+0xf4>
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <HAL_GPIO_EXTI_Callback+0x184>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d013      	beq.n	80002a0 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		if(HAL_GPIO_ReadPin(DT_EN_GPIO_Port, DT_EN_Pin) == 0 && HAL_GPIO_ReadPin(CLK_EN_GPIO_Port, CLK_EN_Pin) == 0)
 8000278:	2110      	movs	r1, #16
 800027a:	482b      	ldr	r0, [pc, #172]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 800027c:	f000 fe10 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d10c      	bne.n	80002a0 <HAL_GPIO_EXTI_Callback+0xf4>
 8000286:	2108      	movs	r1, #8
 8000288:	4827      	ldr	r0, [pc, #156]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 800028a:	f000 fe09 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d105      	bne.n	80002a0 <HAL_GPIO_EXTI_Callback+0xf4>
		{
			turnedCCW = true;
 8000294:	4b27      	ldr	r3, [pc, #156]	; (8000334 <HAL_GPIO_EXTI_Callback+0x188>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
			checkturnedCCW = false;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <HAL_GPIO_EXTI_Callback+0x184>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == BTN_EN_Pin && pressed_BTN_EN == false)
 80002a0:	88fb      	ldrh	r3, [r7, #6]
 80002a2:	2b20      	cmp	r3, #32
 80002a4:	d137      	bne.n	8000316 <HAL_GPIO_EXTI_Callback+0x16a>
 80002a6:	4b24      	ldr	r3, [pc, #144]	; (8000338 <HAL_GPIO_EXTI_Callback+0x18c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f083 0301 	eor.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d02f      	beq.n	8000316 <HAL_GPIO_EXTI_Callback+0x16a>
	{
		if(HAL_GPIO_ReadPin(BTN_EN_GPIO_Port, BTN_EN_Pin) == 0)
 80002b6:	2120      	movs	r1, #32
 80002b8:	481b      	ldr	r0, [pc, #108]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 80002ba:	f000 fdf1 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d128      	bne.n	8000316 <HAL_GPIO_EXTI_Callback+0x16a>
		{
			int i = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
			for(i = 0;i<200;i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e012      	b.n	80002f4 <HAL_GPIO_EXTI_Callback+0x148>
			{
				if(HAL_GPIO_ReadPin(BTN_EN_GPIO_Port, BTN_EN_Pin) == 1)
 80002ce:	2120      	movs	r1, #32
 80002d0:	4815      	ldr	r0, [pc, #84]	; (8000328 <HAL_GPIO_EXTI_Callback+0x17c>)
 80002d2:	f000 fde5 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d00f      	beq.n	80002fc <HAL_GPIO_EXTI_Callback+0x150>
				{
					break;
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e2:	4816      	ldr	r0, [pc, #88]	; (800033c <HAL_GPIO_EXTI_Callback+0x190>)
 80002e4:	f000 fdf3 	bl	8000ece <HAL_GPIO_WritePin>
				Delay_ms(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ff47 	bl	800017c <Delay_ms>
			for(i = 0;i<200;i++)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3301      	adds	r3, #1
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2bc7      	cmp	r3, #199	; 0xc7
 80002f8:	dde9      	ble.n	80002ce <HAL_GPIO_EXTI_Callback+0x122>
 80002fa:	e000      	b.n	80002fe <HAL_GPIO_EXTI_Callback+0x152>
					break;
 80002fc:	bf00      	nop
			}
			if(i==200)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2bc8      	cmp	r3, #200	; 0xc8
 8000302:	d108      	bne.n	8000316 <HAL_GPIO_EXTI_Callback+0x16a>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <HAL_GPIO_EXTI_Callback+0x190>)
 800030c:	f000 fddf 	bl	8000ece <HAL_GPIO_WritePin>
				pressed_BTN_EN = true;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000316:	b662      	cpsie	i
}
 8000318:	bf00      	nop
			}
		}
	}
	__enable_irq();
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000d5 	.word	0x200000d5
 8000328:	40010800 	.word	0x40010800
 800032c:	200000d4 	.word	0x200000d4
 8000330:	200000d7 	.word	0x200000d7
 8000334:	200000d6 	.word	0x200000d6
 8000338:	200000d8 	.word	0x200000d8
 800033c:	40011000 	.word	0x40011000

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b5b0      	push	{r4, r5, r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hc595_t conf={
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <main+0xe4>)
 8000348:	463c      	mov	r4, r7
 800034a:	461d      	mov	r5, r3
 800034c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000350:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000354:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fa8a 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f86e 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f8fe 	bl	8000560 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000364:	f000 f8b0 	bl	80004c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Khởi động timer 2*/
  HAL_TIM_Base_Start(&htim2);
 8000368:	482f      	ldr	r0, [pc, #188]	; (8000428 <main+0xe8>)
 800036a:	f001 fa19 	bl	80017a0 <HAL_TIM_Base_Start>
  hc595_int(&conf);
 800036e:	463b      	mov	r3, r7
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fc79 	bl	8001c68 <hc595_int>
  lcd_Init();
 8000376:	f001 fd91 	bl	8001e9c <lcd_Init>
  screw_Set_Show(screw_set_count);
 800037a:	4b2c      	ldr	r3, [pc, #176]	; (800042c <main+0xec>)
 800037c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fddd 	bl	8001f40 <screw_Set_Show>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(turnedCW == true)
 8000386:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <main+0xf0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d013      	beq.n	80003b8 <main+0x78>
	  {
		screw_set_count++;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <main+0xec>)
 8000392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000396:	b29b      	uxth	r3, r3
 8000398:	3301      	adds	r3, #1
 800039a:	b29b      	uxth	r3, r3
 800039c:	b21a      	sxth	r2, r3
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <main+0xec>)
 80003a0:	801a      	strh	r2, [r3, #0]
		lcd_Clear();
 80003a2:	f001 fd52 	bl	8001e4a <lcd_Clear>
		screw_Set_Show(screw_set_count);
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <main+0xec>)
 80003a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fdc7 	bl	8001f40 <screw_Set_Show>
		turnedCW = false;
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <main+0xf0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
	  }
	  if(turnedCCW == true)
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <main+0xf4>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d01c      	beq.n	80003fc <main+0xbc>
	  {
		screw_set_count--;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <main+0xec>)
 80003c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	3b01      	subs	r3, #1
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b21a      	sxth	r2, r3
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <main+0xec>)
 80003d2:	801a      	strh	r2, [r3, #0]
		if(screw_set_count > -1)
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <main+0xec>)
 80003d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	db08      	blt.n	80003f0 <main+0xb0>
		{
			lcd_Clear();
 80003de:	f001 fd34 	bl	8001e4a <lcd_Clear>
			screw_Set_Show(screw_set_count);
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <main+0xec>)
 80003e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fda9 	bl	8001f40 <screw_Set_Show>
 80003ee:	e002      	b.n	80003f6 <main+0xb6>
		}
		else
			screw_set_count = 0;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <main+0xec>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	801a      	strh	r2, [r3, #0]
		turnedCCW = false;
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <main+0xf4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	  }
	  if(pressed_BTN_EN == true)
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <main+0xf8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0bf      	beq.n	8000386 <main+0x46>
	  {
		  screw_set_count = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <main+0xec>)
 8000408:	2200      	movs	r2, #0
 800040a:	801a      	strh	r2, [r3, #0]
		  lcd_Clear();
 800040c:	f001 fd1d 	bl	8001e4a <lcd_Clear>
		  screw_Set_Show(screw_set_count);
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <main+0xec>)
 8000412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fd92 	bl	8001f40 <screw_Set_Show>
		  pressed_BTN_EN = false;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <main+0xf8>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
	  if(turnedCW == true)
 8000422:	e7b0      	b.n	8000386 <main+0x46>
 8000424:	080028e4 	.word	0x080028e4
 8000428:	2000008c 	.word	0x2000008c
 800042c:	200000da 	.word	0x200000da
 8000430:	200000d4 	.word	0x200000d4
 8000434:	200000d6 	.word	0x200000d6
 8000438:	200000d8 	.word	0x200000d8

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fdbc 	bl	8001fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800047a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0318 	add.w	r3, r7, #24
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fd53 	bl	8000f30 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000490:	f000 f8fc 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000498:	2302      	movs	r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2102      	movs	r1, #2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 ffc0 	bl	8001434 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ba:	f000 f8e7 	bl	800068c <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3740      	adds	r7, #64	; 0x40
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_TIM2_Init+0x94>)
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_TIM2_Init+0x94>)
 80004ee:	2247      	movs	r2, #71	; 0x47
 80004f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_TIM2_Init+0x94>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_TIM2_Init+0x94>)
 80004fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_TIM2_Init+0x94>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_TIM2_Init+0x94>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <MX_TIM2_Init+0x94>)
 800050e:	f001 f8f7 	bl	8001700 <HAL_TIM_Base_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000518:	f000 f8b8 	bl	800068c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	4619      	mov	r1, r3
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <MX_TIM2_Init+0x94>)
 800052a:	f001 f983 	bl	8001834 <HAL_TIM_ConfigClockSource>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 f8aa 	bl	800068c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_TIM2_Init+0x94>)
 8000546:	f001 fb31 	bl	8001bac <HAL_TIMEx_MasterConfigSynchronization>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000550:	f000 f89c 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000008c 	.word	0x2000008c

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000574:	4b40      	ldr	r3, [pc, #256]	; (8000678 <MX_GPIO_Init+0x118>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a3f      	ldr	r2, [pc, #252]	; (8000678 <MX_GPIO_Init+0x118>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b3d      	ldr	r3, [pc, #244]	; (8000678 <MX_GPIO_Init+0x118>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058c:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <MX_GPIO_Init+0x118>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a39      	ldr	r2, [pc, #228]	; (8000678 <MX_GPIO_Init+0x118>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b37      	ldr	r3, [pc, #220]	; (8000678 <MX_GPIO_Init+0x118>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0320 	and.w	r3, r3, #32
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <MX_GPIO_Init+0x118>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a33      	ldr	r2, [pc, #204]	; (8000678 <MX_GPIO_Init+0x118>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MX_GPIO_Init+0x118>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	482e      	ldr	r0, [pc, #184]	; (800067c <MX_GPIO_Init+0x11c>)
 80005c4:	f000 fc83 	bl	8000ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Clock_Pin|Latch_Pin|Data_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80005ce:	482c      	ldr	r0, [pc, #176]	; (8000680 <MX_GPIO_Init+0x120>)
 80005d0:	f000 fc7d 	bl	8000ece <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4823      	ldr	r0, [pc, #140]	; (800067c <MX_GPIO_Init+0x11c>)
 80005ee:	f000 fad3 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_EN_Pin BTN_EN_Pin */
  GPIO_InitStruct.Pin = CLK_EN_Pin|BTN_EN_Pin;
 80005f2:	2328      	movs	r3, #40	; 0x28
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0x124>)
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	481e      	ldr	r0, [pc, #120]	; (8000680 <MX_GPIO_Init+0x120>)
 8000606:	f000 fac7 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DT_EN_Pin */
  GPIO_InitStruct.Pin = DT_EN_Pin;
 800060a:	2310      	movs	r3, #16
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_GPIO_Init+0x128>)
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DT_EN_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	4818      	ldr	r0, [pc, #96]	; (8000680 <MX_GPIO_Init+0x120>)
 800061e:	f000 fabb 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Clock_Pin Latch_Pin Data_Pin */
  GPIO_InitStruct.Pin = Clock_Pin|Latch_Pin|Data_Pin;
 8000622:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <MX_GPIO_Init+0x120>)
 800063c:	f000 faac 	bl	8000b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2009      	movs	r0, #9
 8000646:	f000 fa70 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800064a:	2009      	movs	r0, #9
 800064c:	f000 fa89 	bl	8000b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fa68 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800065a:	200a      	movs	r0, #10
 800065c:	f000 fa81 	bl	8000b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2017      	movs	r0, #23
 8000666:	f000 fa60 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800066a:	2017      	movs	r0, #23
 800066c:	f000 fa79 	bl	8000b62 <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	40011000 	.word	0x40011000
 8000680:	40010800 	.word	0x40010800
 8000684:	10210000 	.word	0x10210000
 8000688:	10110000 	.word	0x10110000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_MspInit+0x5c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_MspInit+0x5c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_MspInit+0x60>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_MspInit+0x60>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010000 	.word	0x40010000

080006fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800070c:	d10b      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_TIM_Base_MspInit+0x34>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_TIM_Base_MspInit+0x34>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_TIM_Base_MspInit+0x34>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f8bf 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_EN_Pin);
 8000786:	2008      	movs	r0, #8
 8000788:	f000 fbba 	bl	8000f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_EN_Pin);
 8000794:	2010      	movs	r0, #16
 8000796:	f000 fbb3 	bl	8000f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_EN_Pin);
 80007a2:	2020      	movs	r0, #32
 80007a4:	f000 fbac 	bl	8000f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f001 fbca 	bl	8001f74 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20005000 	.word	0x20005000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000dc 	.word	0x200000dc
 8000814:	200000f8 	.word	0x200000f8

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084a:	f7ff ffe5 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f001 fb97 	bl	8001f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fd75 	bl	8000340 <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000860:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000868:	200000f8 	.word	0x200000f8

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f947 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff ff04 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f95f 	bl	8000b7e <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 f927 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000008 	.word	0x20000008
 800091c:	200000e0 	.word	0x200000e0

08000920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	200000e0 	.word	0x200000e0

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff0 	bl	8000920 <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffe0 	bl	8000920 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <__NVIC_EnableIRQ+0x34>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff2d 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff42 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff35 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b08b      	sub	sp, #44	; 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e169      	b.n	8000e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bac:	2201      	movs	r2, #1
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8158 	bne.w	8000e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a9a      	ldr	r2, [pc, #616]	; (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d05e      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a98      	ldr	r2, [pc, #608]	; (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d875      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bda:	4a98      	ldr	r2, [pc, #608]	; (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d058      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000be0:	4a96      	ldr	r2, [pc, #600]	; (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d86f      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000be6:	4a96      	ldr	r2, [pc, #600]	; (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d052      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bec:	4a94      	ldr	r2, [pc, #592]	; (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d869      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a94      	ldr	r2, [pc, #592]	; (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d04c      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a92      	ldr	r2, [pc, #584]	; (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d863      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a92      	ldr	r2, [pc, #584]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d046      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000c04:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d85d      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d82a      	bhi.n	8000c64 <HAL_GPIO_Init+0xcc>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d859      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <HAL_GPIO_Init+0x80>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c6d 	.word	0x08000c6d
 8000c20:	08000c7f 	.word	0x08000c7f
 8000c24:	08000cc1 	.word	0x08000cc1
 8000c28:	08000cc7 	.word	0x08000cc7
 8000c2c:	08000cc7 	.word	0x08000cc7
 8000c30:	08000cc7 	.word	0x08000cc7
 8000c34:	08000cc7 	.word	0x08000cc7
 8000c38:	08000cc7 	.word	0x08000cc7
 8000c3c:	08000cc7 	.word	0x08000cc7
 8000c40:	08000cc7 	.word	0x08000cc7
 8000c44:	08000cc7 	.word	0x08000cc7
 8000c48:	08000cc7 	.word	0x08000cc7
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000cc7 	.word	0x08000cc7
 8000c54:	08000cc7 	.word	0x08000cc7
 8000c58:	08000cc7 	.word	0x08000cc7
 8000c5c:	08000c75 	.word	0x08000c75
 8000c60:	08000c89 	.word	0x08000c89
 8000c64:	4a79      	ldr	r2, [pc, #484]	; (8000e4c <HAL_GPIO_Init+0x2b4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e02c      	b.n	8000cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e029      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e024      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	3308      	adds	r3, #8
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e01f      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e01a      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e013      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	611a      	str	r2, [r3, #16]
          break;
 8000cb2:	e009      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	615a      	str	r2, [r3, #20]
          break;
 8000cbe:	e003      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          break;
 8000cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d801      	bhi.n	8000cd2 <HAL_GPIO_Init+0x13a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	e001      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d802      	bhi.n	8000ce4 <HAL_GPIO_Init+0x14c>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0x152>
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	3b08      	subs	r3, #8
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	6a39      	ldr	r1, [r7, #32]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d30:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <HAL_GPIO_Init+0x2c0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x1ec>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3f      	ldr	r2, [pc, #252]	; (8000e5c <HAL_GPIO_Init+0x2c4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1e8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3d      	ldr	r2, [pc, #244]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1e0>
 8000d74:	2303      	movs	r3, #3
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d96:	492f      	ldr	r1, [pc, #188]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	492c      	ldr	r1, [pc, #176]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4928      	ldr	r1, [pc, #160]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4922      	ldr	r1, [pc, #136]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	491e      	ldr	r1, [pc, #120]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	4918      	ldr	r1, [pc, #96]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4914      	ldr	r1, [pc, #80]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d021      	beq.n	8000e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	490e      	ldr	r1, [pc, #56]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60cb      	str	r3, [r1, #12]
 8000e34:	e021      	b.n	8000e7a <HAL_GPIO_Init+0x2e2>
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_GPIO_Init+0x304>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4909      	ldr	r1, [pc, #36]	; (8000e9c <HAL_GPIO_Init+0x304>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f ae8e 	bne.w	8000bac <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	372c      	adds	r7, #44	; 0x2c
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e001      	b.n	8000ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ede:	787b      	ldrb	r3, [r7, #1]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee4:	887a      	ldrh	r2, [r7, #2]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eea:	e003      	b.n	8000ef4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	041a      	lsls	r2, r3, #16
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
	...

08000f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f944 	bl	80001ac <HAL_GPIO_EXTI_Callback>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e272      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8087 	beq.w	800105e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f50:	4b92      	ldr	r3, [pc, #584]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d00c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
 8000f68:	4b8c      	ldr	r3, [pc, #560]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d10b      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	4b89      	ldr	r3, [pc, #548]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d06c      	beq.n	800105c <HAL_RCC_OscConfig+0x12c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d168      	bne.n	800105c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e24c      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x76>
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e02e      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b7b      	ldr	r3, [pc, #492]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7a      	ldr	r2, [pc, #488]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a77      	ldr	r2, [pc, #476]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01d      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0xbc>
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a71      	ldr	r2, [pc, #452]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6f      	ldr	r3, [pc, #444]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a6a      	ldr	r2, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a67      	ldr	r2, [pc, #412]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fc88 	bl	8000920 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fc84 	bl	8000920 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e200      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0xe4>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fc74 	bl	8000920 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fc70 	bl	8000920 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1ec      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x10c>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d063      	beq.n	8001132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b08      	cmp	r3, #8
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1c0      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4939      	ldr	r1, [pc, #228]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e03a      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fc29 	bl	8000920 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc25 	bl	8000920 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1a1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc08 	bl	8000920 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fc04 	bl	8000920 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e180      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d03a      	beq.n	80011b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d019      	beq.n	800117a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fbe8 	bl	8000920 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fbe4 	bl	8000920 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e160      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 faa6 	bl	80016c4 <RCC_Delay>
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fbce 	bl	8000920 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e00f      	b.n	80011a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fbca 	bl	8000920 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d908      	bls.n	80011a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e146      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	42420000 	.word	0x42420000
 80011a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e9      	bne.n	8001188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a6 	beq.w	800130e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a87      	ldr	r2, [pc, #540]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fb8b 	bl	8000920 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fb87 	bl	8000920 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e103      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b75      	ldr	r3, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x312>
 8001234:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e02d      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x334>
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a69      	ldr	r2, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a66      	ldr	r2, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x356>
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a60      	ldr	r2, [pc, #384]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb3b 	bl	8000920 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb37 	bl	8000920 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0b1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x37e>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb25 	bl	8000920 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb21 	bl	8000920 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e09b      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8087 	beq.w	8001426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d061      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d146      	bne.n	80013ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff faf5 	bl	8000920 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff faf1 	bl	8000920 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e06d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4921      	ldr	r1, [pc, #132]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a19      	ldr	r1, [r3, #32]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	430b      	orrs	r3, r1
 8001386:	491b      	ldr	r1, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fac5 	bl	8000920 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fac1 	bl	8000920 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e03d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x46a>
 80013b8:	e035      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff faae 	bl	8000920 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff faaa 	bl	8000920 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e026      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x498>
 80013e6:	e01e      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e019      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40007000 	.word	0x40007000
 80013fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x500>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	429a      	cmp	r2, r3
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0d0      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d910      	bls.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4965      	ldr	r1, [pc, #404]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0b8      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	494d      	ldr	r1, [pc, #308]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d040      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e073      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06b      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4936      	ldr	r1, [pc, #216]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff f9fc 	bl	8000920 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f9f8 	bl	8000920 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e053      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d210      	bcs.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e032      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4916      	ldr	r1, [pc, #88]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f821 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	490a      	ldr	r1, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1cc>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1d0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f95a 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	0800292c 	.word	0x0800292c
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	b490      	push	{r4, r7}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001610:	1d3c      	adds	r4, r7, #4
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001618:	f240 2301 	movw	r3, #513	; 0x201
 800161c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d002      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x40>
 8001642:	2b08      	cmp	r3, #8
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x46>
 8001646:	e02b      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800164a:	623b      	str	r3, [r7, #32]
      break;
 800164c:	e02b      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3328      	adds	r3, #40	; 0x28
 8001658:	443b      	add	r3, r7
 800165a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800165e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0c5b      	lsrs	r3, r3, #17
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	3328      	adds	r3, #40	; 0x28
 8001676:	443b      	add	r3, r7
 8001678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800167c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001682:	fb03 f202 	mul.w	r2, r3, r2
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e004      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	623b      	str	r3, [r7, #32]
      break;
 800169e:	e002      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a6:	6a3b      	ldr	r3, [r7, #32]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc90      	pop	{r4, r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	080028fc 	.word	0x080028fc
 80016b8:	40021000 	.word	0x40021000
 80016bc:	007a1200 	.word	0x007a1200
 80016c0:	003d0900 	.word	0x003d0900

080016c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <RCC_Delay+0x34>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <RCC_Delay+0x38>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0a5b      	lsrs	r3, r3, #9
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e0:	bf00      	nop
  }
  while (Delay --);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	60fa      	str	r2, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f9      	bne.n	80016e0 <RCC_Delay+0x1c>
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000000 	.word	0x20000000
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e041      	b.n	8001796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7fe ffe8 	bl	80006fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f000 f93c 	bl	80019bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_TIM_Base_Start+0x88>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00e      	beq.n	80017e8 <HAL_TIM_Base_Start+0x48>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d009      	beq.n	80017e8 <HAL_TIM_Base_Start+0x48>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_TIM_Base_Start+0x8c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_TIM_Base_Start+0x48>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_TIM_Base_Start+0x90>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d111      	bne.n	800180c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d010      	beq.n	800181c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800180a:	e007      	b.n	800181c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40000400 	.word	0x40000400
 8001830:	40000800 	.word	0x40000800

08001834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_TIM_ConfigClockSource+0x18>
 8001848:	2302      	movs	r3, #2
 800184a:	e0b3      	b.n	80019b4 <HAL_TIM_ConfigClockSource+0x180>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800186a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001872:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001884:	d03e      	beq.n	8001904 <HAL_TIM_ConfigClockSource+0xd0>
 8001886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188a:	f200 8087 	bhi.w	800199c <HAL_TIM_ConfigClockSource+0x168>
 800188e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001892:	f000 8085 	beq.w	80019a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189a:	d87f      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 800189c:	2b70      	cmp	r3, #112	; 0x70
 800189e:	d01a      	beq.n	80018d6 <HAL_TIM_ConfigClockSource+0xa2>
 80018a0:	2b70      	cmp	r3, #112	; 0x70
 80018a2:	d87b      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018a4:	2b60      	cmp	r3, #96	; 0x60
 80018a6:	d050      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x116>
 80018a8:	2b60      	cmp	r3, #96	; 0x60
 80018aa:	d877      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018ac:	2b50      	cmp	r3, #80	; 0x50
 80018ae:	d03c      	beq.n	800192a <HAL_TIM_ConfigClockSource+0xf6>
 80018b0:	2b50      	cmp	r3, #80	; 0x50
 80018b2:	d873      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d058      	beq.n	800196a <HAL_TIM_ConfigClockSource+0x136>
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	d86f      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018bc:	2b30      	cmp	r3, #48	; 0x30
 80018be:	d064      	beq.n	800198a <HAL_TIM_ConfigClockSource+0x156>
 80018c0:	2b30      	cmp	r3, #48	; 0x30
 80018c2:	d86b      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d060      	beq.n	800198a <HAL_TIM_ConfigClockSource+0x156>
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d867      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0x168>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05c      	beq.n	800198a <HAL_TIM_ConfigClockSource+0x156>
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d05a      	beq.n	800198a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80018d4:	e062      	b.n	800199c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f000 f942 	bl	8001b6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	609a      	str	r2, [r3, #8]
      break;
 8001902:	e04e      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f000 f92b 	bl	8001b6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001926:	609a      	str	r2, [r3, #8]
      break;
 8001928:	e03b      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	461a      	mov	r2, r3
 8001938:	f000 f8a2 	bl	8001a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2150      	movs	r1, #80	; 0x50
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f8f9 	bl	8001b3a <TIM_ITRx_SetConfig>
      break;
 8001948:	e02b      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	461a      	mov	r2, r3
 8001958:	f000 f8c0 	bl	8001adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2160      	movs	r1, #96	; 0x60
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f8e9 	bl	8001b3a <TIM_ITRx_SetConfig>
      break;
 8001968:	e01b      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	461a      	mov	r2, r3
 8001978:	f000 f882 	bl	8001a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2140      	movs	r1, #64	; 0x40
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f8d9 	bl	8001b3a <TIM_ITRx_SetConfig>
      break;
 8001988:	e00b      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f000 f8d0 	bl	8001b3a <TIM_ITRx_SetConfig>
        break;
 800199a:	e002      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80019a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <TIM_Base_SetConfig+0xb8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00b      	beq.n	80019ec <TIM_Base_SetConfig+0x30>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d007      	beq.n	80019ec <TIM_Base_SetConfig+0x30>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <TIM_Base_SetConfig+0xbc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d003      	beq.n	80019ec <TIM_Base_SetConfig+0x30>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <TIM_Base_SetConfig+0xc0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d108      	bne.n	80019fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <TIM_Base_SetConfig+0xb8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00b      	beq.n	8001a1e <TIM_Base_SetConfig+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d007      	beq.n	8001a1e <TIM_Base_SetConfig+0x62>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <TIM_Base_SetConfig+0xbc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d003      	beq.n	8001a1e <TIM_Base_SetConfig+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <TIM_Base_SetConfig+0xc0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d108      	bne.n	8001a30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <TIM_Base_SetConfig+0xb8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d103      	bne.n	8001a64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	615a      	str	r2, [r3, #20]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40000800 	.word	0x40000800

08001a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f023 0201 	bic.w	r2, r3, #1
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f023 030a 	bic.w	r3, r3, #10
 8001abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	621a      	str	r2, [r3, #32]
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 0210 	bic.w	r2, r3, #16
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	031b      	lsls	r3, r3, #12
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	621a      	str	r2, [r3, #32]
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f043 0307 	orr.w	r3, r3, #7
 8001b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b087      	sub	sp, #28
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	609a      	str	r2, [r3, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e046      	b.n	8001c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00e      	beq.n	8001c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d009      	beq.n	8001c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10c      	bne.n	8001c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800

08001c68 <hc595_int>:
/*---------------------------------------------------*/
#include "lcd_screw.h"
/*---------------------------------------------------*/
hc595_t *_hc595;
void hc595_int(hc595_t *conf)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_hc595 = conf;
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <hc595_int+0x18>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	200000e4 	.word	0x200000e4

08001c84 <hc595_trans>:
void hc595_trans(uint8_t c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<8;i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e02c      	b.n	8001cee <hc595_trans+0x6a>
	{
		uint8_t bit_trans = (c & (0x80>>i))>>(7-i);
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	fa41 f303 	asr.w	r3, r1, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	fa42 f303 	asr.w	r3, r2, r3
 8001caa:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(_hc595 -> DATA_Port, _hc595 -> DATA_Pin, bit_trans);
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <hc595_trans+0xa0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6918      	ldr	r0, [r3, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <hc595_trans+0xa0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	8a9b      	ldrh	r3, [r3, #20]
 8001cb8:	7afa      	ldrb	r2, [r7, #11]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff f907 	bl	8000ece <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_hc595 -> CLK_Port, _hc595 -> CLK_Pin, 1);
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <hc595_trans+0xa0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <hc595_trans+0xa0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	889b      	ldrh	r3, [r3, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7ff f8fd 	bl	8000ece <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_hc595 -> CLK_Port, _hc595 -> CLK_Pin, 0);
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <hc595_trans+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <hc595_trans+0xa0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7ff f8f3 	bl	8000ece <HAL_GPIO_WritePin>
	for(int i = 0;i<8;i++)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	ddcf      	ble.n	8001c94 <hc595_trans+0x10>
	}
	HAL_GPIO_WritePin(_hc595 -> LATCH_Port, _hc595 -> LATCH_Pin, 1);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <hc595_trans+0xa0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6898      	ldr	r0, [r3, #8]
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <hc595_trans+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	899b      	ldrh	r3, [r3, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7ff f8e3 	bl	8000ece <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_hc595 -> LATCH_Port, _hc595 -> LATCH_Pin, 0);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <hc595_trans+0xa0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6898      	ldr	r0, [r3, #8]
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <hc595_trans+0xa0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	899b      	ldrh	r3, [r3, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff f8d9 	bl	8000ece <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200000e4 	.word	0x200000e4

08001d28 <lcd_Send_Cmd>:
void lcd_Send_Cmd(char cmd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l; // vi du 0x30
	uint8_t data_t[4];
	data_u = (cmd >> 4) & 0x0f; // data_u =0x03
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	74fb      	strb	r3, [r7, #19]
	data_l = (cmd & 0x0f); // data_l = 0x00
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	733b      	strb	r3, [r7, #12]
	data_t[1] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	737b      	strb	r3, [r7, #13]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001d6c:	7cbb      	ldrb	r3, [r7, #18]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001d82:	7cbb      	ldrb	r3, [r7, #18]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73fb      	strb	r3, [r7, #15]
	for(int i = 0;i<4;i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <lcd_Send_Cmd+0x8c>
	{
		hc595_trans(data_t[i]);
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff6b 	bl	8001c84 <hc595_trans>
	for(int i = 0;i<4;i++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	ddf1      	ble.n	8001d9e <lcd_Send_Cmd+0x76>
	}
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <lcd_Send_Data>:
void lcd_Send_Data(char data)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
	char data_u,data_l;
	uint8_t data_t[4];
	data_u = (data >> 4) & 0x0f;
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	74fb      	strb	r3, [r7, #19]
	data_l = (data & 0x0f);
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	f063 037a 	orn	r3, r3, #122	; 0x7a
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	733b      	strb	r3, [r7, #12]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8001df2:	7cbb      	ldrb	r3, [r7, #18]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f063 037a 	orn	r3, r3, #122	; 0x7a
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8001e08:	7cbb      	ldrb	r3, [r7, #18]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	f063 037b 	orn	r3, r3, #123	; 0x7b
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00a      	b.n	8001e3a <lcd_Send_Data+0x76>
	{
		hc595_trans(data_t[i]);
 8001e24:	f107 020c 	add.w	r2, r7, #12
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff28 	bl	8001c84 <hc595_trans>
	for(int i = 0;i<4;i++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	ddf1      	ble.n	8001e24 <lcd_Send_Data+0x60>

	}
	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <lcd_Clear>:
void lcd_Clear(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
	lcd_Send_Cmd(0x01);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7ff ff6a 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(2);
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7fe fd6d 	bl	8000934 <HAL_Delay>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <lcd_Put_Cur>:
void lcd_Put_Cur(int row,int col)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	switch(row)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <lcd_Put_Cur+0x18>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <lcd_Put_Cur+0x22>
 8001e74:	e009      	b.n	8001e8a <lcd_Put_Cur+0x2c>
	{
		case 0:
			col |= 0x80; //0x80 1 000 000x
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	603b      	str	r3, [r7, #0]
			break;
 8001e7e:	e004      	b.n	8001e8a <lcd_Put_Cur+0x2c>
		case 1:
			col |= 0xC0; // 0xC1 1 100 000x
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e86:	603b      	str	r3, [r7, #0]
			break;
 8001e88:	bf00      	nop
	}
	//Gửi lệnh ứng với vị trí cần xuất hiện con trỏ Set DDRAM address tr24
	lcd_Send_Cmd(col);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff4a 	bl	8001d28 <lcd_Send_Cmd>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <lcd_Init>:

void lcd_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	// Khởi tạo 4 bit
	HAL_Delay(50);
 8001ea0:	2032      	movs	r0, #50	; 0x32
 8001ea2:	f7fe fd47 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8001ea6:	2030      	movs	r0, #48	; 0x30
 8001ea8:	f7ff ff3e 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(5);
 8001eac:	2005      	movs	r0, #5
 8001eae:	f7fe fd41 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8001eb2:	2030      	movs	r0, #48	; 0x30
 8001eb4:	f7ff ff38 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7fe fd3b 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8001ebe:	2030      	movs	r0, #48	; 0x30
 8001ec0:	f7ff ff32 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(10);
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f7fe fd35 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x20);
 8001eca:	2020      	movs	r0, #32
 8001ecc:	f7ff ff2c 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(10);
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f7fe fd2f 	bl	8000934 <HAL_Delay>
	// Khởi tạo hiển thị
	//00 00 101 00
	lcd_Send_Cmd(0x28); //function set bảng 6/tr23: set data interface 4bits 2lines 5x8 bit
 8001ed6:	2028      	movs	r0, #40	; 0x28
 8001ed8:	f7ff ff26 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7fe fd29 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x08); //display on/off control
 8001ee2:	2008      	movs	r0, #8
 8001ee4:	f7ff ff20 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7fe fd23 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x01); //clear display
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff ff1a 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7fe fd1d 	bl	8000934 <HAL_Delay>
	HAL_Delay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7fe fd1a 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x06); //entry mode set: i/d=1 increment s=0
 8001f00:	2006      	movs	r0, #6
 8001f02:	f7ff ff11 	bl	8001d28 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7fe fd14 	bl	8000934 <HAL_Delay>
	lcd_Send_Cmd(0x0C); // cho phep hien thi man hinh
 8001f0c:	200c      	movs	r0, #12
 8001f0e:	f7ff ff0b 	bl	8001d28 <lcd_Send_Cmd>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <lcd_Send_String>:
void lcd_Send_String(char *str)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	while(*str) lcd_Send_Data(*str++);
 8001f1e:	e006      	b.n	8001f2e <lcd_Send_String+0x18>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff4b 	bl	8001dc4 <lcd_Send_Data>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f4      	bne.n	8001f20 <lcd_Send_String+0xa>
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <screw_Set_Show>:
	sprintf(str,"Screw done:%d",c);
	lcd_Put_Cur(0, 0);
	lcd_Send_String(str);
}
void screw_Set_Show(int c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09c      	sub	sp, #112	; 0x70
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	char str[100];
	sprintf(str,"Screw set:%d",c);
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <screw_Set_Show+0x30>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f841 	bl	8001fd8 <siprintf>
	lcd_Put_Cur(1, 2);
 8001f56:	2102      	movs	r1, #2
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff ff80 	bl	8001e5e <lcd_Put_Cur>
	lcd_Send_String(str);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ffd7 	bl	8001f16 <lcd_Send_String>
}
 8001f68:	bf00      	nop
 8001f6a:	3770      	adds	r7, #112	; 0x70
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800291c 	.word	0x0800291c

08001f74 <__errno>:
 8001f74:	4b01      	ldr	r3, [pc, #4]	; (8001f7c <__errno+0x8>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <__libc_init_array>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	2600      	movs	r6, #0
 8001f84:	4d0c      	ldr	r5, [pc, #48]	; (8001fb8 <__libc_init_array+0x38>)
 8001f86:	4c0d      	ldr	r4, [pc, #52]	; (8001fbc <__libc_init_array+0x3c>)
 8001f88:	1b64      	subs	r4, r4, r5
 8001f8a:	10a4      	asrs	r4, r4, #2
 8001f8c:	42a6      	cmp	r6, r4
 8001f8e:	d109      	bne.n	8001fa4 <__libc_init_array+0x24>
 8001f90:	f000 fc9c 	bl	80028cc <_init>
 8001f94:	2600      	movs	r6, #0
 8001f96:	4d0a      	ldr	r5, [pc, #40]	; (8001fc0 <__libc_init_array+0x40>)
 8001f98:	4c0a      	ldr	r4, [pc, #40]	; (8001fc4 <__libc_init_array+0x44>)
 8001f9a:	1b64      	subs	r4, r4, r5
 8001f9c:	10a4      	asrs	r4, r4, #2
 8001f9e:	42a6      	cmp	r6, r4
 8001fa0:	d105      	bne.n	8001fae <__libc_init_array+0x2e>
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
 8001fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fa8:	4798      	blx	r3
 8001faa:	3601      	adds	r6, #1
 8001fac:	e7ee      	b.n	8001f8c <__libc_init_array+0xc>
 8001fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb2:	4798      	blx	r3
 8001fb4:	3601      	adds	r6, #1
 8001fb6:	e7f2      	b.n	8001f9e <__libc_init_array+0x1e>
 8001fb8:	08002970 	.word	0x08002970
 8001fbc:	08002970 	.word	0x08002970
 8001fc0:	08002970 	.word	0x08002970
 8001fc4:	08002974 	.word	0x08002974

08001fc8 <memset>:
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4402      	add	r2, r0
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <memset+0xa>
 8001fd0:	4770      	bx	lr
 8001fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fd6:	e7f9      	b.n	8001fcc <memset+0x4>

08001fd8 <siprintf>:
 8001fd8:	b40e      	push	{r1, r2, r3}
 8001fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001fde:	b500      	push	{lr}
 8001fe0:	b09c      	sub	sp, #112	; 0x70
 8001fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8001fe4:	9002      	str	r0, [sp, #8]
 8001fe6:	9006      	str	r0, [sp, #24]
 8001fe8:	9107      	str	r1, [sp, #28]
 8001fea:	9104      	str	r1, [sp, #16]
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <siprintf+0x38>)
 8001fee:	4909      	ldr	r1, [pc, #36]	; (8002014 <siprintf+0x3c>)
 8001ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ff4:	9105      	str	r1, [sp, #20]
 8001ff6:	6800      	ldr	r0, [r0, #0]
 8001ff8:	a902      	add	r1, sp, #8
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f000 f868 	bl	80020d0 <_svfiprintf_r>
 8002000:	2200      	movs	r2, #0
 8002002:	9b02      	ldr	r3, [sp, #8]
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	b01c      	add	sp, #112	; 0x70
 8002008:	f85d eb04 	ldr.w	lr, [sp], #4
 800200c:	b003      	add	sp, #12
 800200e:	4770      	bx	lr
 8002010:	2000000c 	.word	0x2000000c
 8002014:	ffff0208 	.word	0xffff0208

08002018 <__ssputs_r>:
 8002018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	688e      	ldr	r6, [r1, #8]
 800201e:	4682      	mov	sl, r0
 8002020:	429e      	cmp	r6, r3
 8002022:	460c      	mov	r4, r1
 8002024:	4690      	mov	r8, r2
 8002026:	461f      	mov	r7, r3
 8002028:	d838      	bhi.n	800209c <__ssputs_r+0x84>
 800202a:	898a      	ldrh	r2, [r1, #12]
 800202c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002030:	d032      	beq.n	8002098 <__ssputs_r+0x80>
 8002032:	6825      	ldr	r5, [r4, #0]
 8002034:	6909      	ldr	r1, [r1, #16]
 8002036:	3301      	adds	r3, #1
 8002038:	eba5 0901 	sub.w	r9, r5, r1
 800203c:	6965      	ldr	r5, [r4, #20]
 800203e:	444b      	add	r3, r9
 8002040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002048:	106d      	asrs	r5, r5, #1
 800204a:	429d      	cmp	r5, r3
 800204c:	bf38      	it	cc
 800204e:	461d      	movcc	r5, r3
 8002050:	0553      	lsls	r3, r2, #21
 8002052:	d531      	bpl.n	80020b8 <__ssputs_r+0xa0>
 8002054:	4629      	mov	r1, r5
 8002056:	f000 fb6f 	bl	8002738 <_malloc_r>
 800205a:	4606      	mov	r6, r0
 800205c:	b950      	cbnz	r0, 8002074 <__ssputs_r+0x5c>
 800205e:	230c      	movs	r3, #12
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002064:	f8ca 3000 	str.w	r3, [sl]
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	81a3      	strh	r3, [r4, #12]
 8002070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002074:	464a      	mov	r2, r9
 8002076:	6921      	ldr	r1, [r4, #16]
 8002078:	f000 face 	bl	8002618 <memcpy>
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	6126      	str	r6, [r4, #16]
 800208a:	444e      	add	r6, r9
 800208c:	6026      	str	r6, [r4, #0]
 800208e:	463e      	mov	r6, r7
 8002090:	6165      	str	r5, [r4, #20]
 8002092:	eba5 0509 	sub.w	r5, r5, r9
 8002096:	60a5      	str	r5, [r4, #8]
 8002098:	42be      	cmp	r6, r7
 800209a:	d900      	bls.n	800209e <__ssputs_r+0x86>
 800209c:	463e      	mov	r6, r7
 800209e:	4632      	mov	r2, r6
 80020a0:	4641      	mov	r1, r8
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f000 fac6 	bl	8002634 <memmove>
 80020a8:	68a3      	ldr	r3, [r4, #8]
 80020aa:	2000      	movs	r0, #0
 80020ac:	1b9b      	subs	r3, r3, r6
 80020ae:	60a3      	str	r3, [r4, #8]
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	4433      	add	r3, r6
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	e7db      	b.n	8002070 <__ssputs_r+0x58>
 80020b8:	462a      	mov	r2, r5
 80020ba:	f000 fbb1 	bl	8002820 <_realloc_r>
 80020be:	4606      	mov	r6, r0
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d1e1      	bne.n	8002088 <__ssputs_r+0x70>
 80020c4:	4650      	mov	r0, sl
 80020c6:	6921      	ldr	r1, [r4, #16]
 80020c8:	f000 face 	bl	8002668 <_free_r>
 80020cc:	e7c7      	b.n	800205e <__ssputs_r+0x46>
	...

080020d0 <_svfiprintf_r>:
 80020d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d4:	4698      	mov	r8, r3
 80020d6:	898b      	ldrh	r3, [r1, #12]
 80020d8:	4607      	mov	r7, r0
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	460d      	mov	r5, r1
 80020de:	4614      	mov	r4, r2
 80020e0:	b09d      	sub	sp, #116	; 0x74
 80020e2:	d50e      	bpl.n	8002102 <_svfiprintf_r+0x32>
 80020e4:	690b      	ldr	r3, [r1, #16]
 80020e6:	b963      	cbnz	r3, 8002102 <_svfiprintf_r+0x32>
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	f000 fb25 	bl	8002738 <_malloc_r>
 80020ee:	6028      	str	r0, [r5, #0]
 80020f0:	6128      	str	r0, [r5, #16]
 80020f2:	b920      	cbnz	r0, 80020fe <_svfiprintf_r+0x2e>
 80020f4:	230c      	movs	r3, #12
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fc:	e0d1      	b.n	80022a2 <_svfiprintf_r+0x1d2>
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	616b      	str	r3, [r5, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	9309      	str	r3, [sp, #36]	; 0x24
 8002106:	2320      	movs	r3, #32
 8002108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800210c:	2330      	movs	r3, #48	; 0x30
 800210e:	f04f 0901 	mov.w	r9, #1
 8002112:	f8cd 800c 	str.w	r8, [sp, #12]
 8002116:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80022bc <_svfiprintf_r+0x1ec>
 800211a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800211e:	4623      	mov	r3, r4
 8002120:	469a      	mov	sl, r3
 8002122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002126:	b10a      	cbz	r2, 800212c <_svfiprintf_r+0x5c>
 8002128:	2a25      	cmp	r2, #37	; 0x25
 800212a:	d1f9      	bne.n	8002120 <_svfiprintf_r+0x50>
 800212c:	ebba 0b04 	subs.w	fp, sl, r4
 8002130:	d00b      	beq.n	800214a <_svfiprintf_r+0x7a>
 8002132:	465b      	mov	r3, fp
 8002134:	4622      	mov	r2, r4
 8002136:	4629      	mov	r1, r5
 8002138:	4638      	mov	r0, r7
 800213a:	f7ff ff6d 	bl	8002018 <__ssputs_r>
 800213e:	3001      	adds	r0, #1
 8002140:	f000 80aa 	beq.w	8002298 <_svfiprintf_r+0x1c8>
 8002144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002146:	445a      	add	r2, fp
 8002148:	9209      	str	r2, [sp, #36]	; 0x24
 800214a:	f89a 3000 	ldrb.w	r3, [sl]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80a2 	beq.w	8002298 <_svfiprintf_r+0x1c8>
 8002154:	2300      	movs	r3, #0
 8002156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800215a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800215e:	f10a 0a01 	add.w	sl, sl, #1
 8002162:	9304      	str	r3, [sp, #16]
 8002164:	9307      	str	r3, [sp, #28]
 8002166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800216a:	931a      	str	r3, [sp, #104]	; 0x68
 800216c:	4654      	mov	r4, sl
 800216e:	2205      	movs	r2, #5
 8002170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002174:	4851      	ldr	r0, [pc, #324]	; (80022bc <_svfiprintf_r+0x1ec>)
 8002176:	f000 fa41 	bl	80025fc <memchr>
 800217a:	9a04      	ldr	r2, [sp, #16]
 800217c:	b9d8      	cbnz	r0, 80021b6 <_svfiprintf_r+0xe6>
 800217e:	06d0      	lsls	r0, r2, #27
 8002180:	bf44      	itt	mi
 8002182:	2320      	movmi	r3, #32
 8002184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002188:	0711      	lsls	r1, r2, #28
 800218a:	bf44      	itt	mi
 800218c:	232b      	movmi	r3, #43	; 0x2b
 800218e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002192:	f89a 3000 	ldrb.w	r3, [sl]
 8002196:	2b2a      	cmp	r3, #42	; 0x2a
 8002198:	d015      	beq.n	80021c6 <_svfiprintf_r+0xf6>
 800219a:	4654      	mov	r4, sl
 800219c:	2000      	movs	r0, #0
 800219e:	f04f 0c0a 	mov.w	ip, #10
 80021a2:	9a07      	ldr	r2, [sp, #28]
 80021a4:	4621      	mov	r1, r4
 80021a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021aa:	3b30      	subs	r3, #48	; 0x30
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d94e      	bls.n	800224e <_svfiprintf_r+0x17e>
 80021b0:	b1b0      	cbz	r0, 80021e0 <_svfiprintf_r+0x110>
 80021b2:	9207      	str	r2, [sp, #28]
 80021b4:	e014      	b.n	80021e0 <_svfiprintf_r+0x110>
 80021b6:	eba0 0308 	sub.w	r3, r0, r8
 80021ba:	fa09 f303 	lsl.w	r3, r9, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	46a2      	mov	sl, r4
 80021c2:	9304      	str	r3, [sp, #16]
 80021c4:	e7d2      	b.n	800216c <_svfiprintf_r+0x9c>
 80021c6:	9b03      	ldr	r3, [sp, #12]
 80021c8:	1d19      	adds	r1, r3, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	9103      	str	r1, [sp, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bfbb      	ittet	lt
 80021d2:	425b      	neglt	r3, r3
 80021d4:	f042 0202 	orrlt.w	r2, r2, #2
 80021d8:	9307      	strge	r3, [sp, #28]
 80021da:	9307      	strlt	r3, [sp, #28]
 80021dc:	bfb8      	it	lt
 80021de:	9204      	strlt	r2, [sp, #16]
 80021e0:	7823      	ldrb	r3, [r4, #0]
 80021e2:	2b2e      	cmp	r3, #46	; 0x2e
 80021e4:	d10c      	bne.n	8002200 <_svfiprintf_r+0x130>
 80021e6:	7863      	ldrb	r3, [r4, #1]
 80021e8:	2b2a      	cmp	r3, #42	; 0x2a
 80021ea:	d135      	bne.n	8002258 <_svfiprintf_r+0x188>
 80021ec:	9b03      	ldr	r3, [sp, #12]
 80021ee:	3402      	adds	r4, #2
 80021f0:	1d1a      	adds	r2, r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	9203      	str	r2, [sp, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bfb8      	it	lt
 80021fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80021fe:	9305      	str	r3, [sp, #20]
 8002200:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80022c0 <_svfiprintf_r+0x1f0>
 8002204:	2203      	movs	r2, #3
 8002206:	4650      	mov	r0, sl
 8002208:	7821      	ldrb	r1, [r4, #0]
 800220a:	f000 f9f7 	bl	80025fc <memchr>
 800220e:	b140      	cbz	r0, 8002222 <_svfiprintf_r+0x152>
 8002210:	2340      	movs	r3, #64	; 0x40
 8002212:	eba0 000a 	sub.w	r0, r0, sl
 8002216:	fa03 f000 	lsl.w	r0, r3, r0
 800221a:	9b04      	ldr	r3, [sp, #16]
 800221c:	3401      	adds	r4, #1
 800221e:	4303      	orrs	r3, r0
 8002220:	9304      	str	r3, [sp, #16]
 8002222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002226:	2206      	movs	r2, #6
 8002228:	4826      	ldr	r0, [pc, #152]	; (80022c4 <_svfiprintf_r+0x1f4>)
 800222a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800222e:	f000 f9e5 	bl	80025fc <memchr>
 8002232:	2800      	cmp	r0, #0
 8002234:	d038      	beq.n	80022a8 <_svfiprintf_r+0x1d8>
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <_svfiprintf_r+0x1f8>)
 8002238:	bb1b      	cbnz	r3, 8002282 <_svfiprintf_r+0x1b2>
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	3307      	adds	r3, #7
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	3308      	adds	r3, #8
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002248:	4433      	add	r3, r6
 800224a:	9309      	str	r3, [sp, #36]	; 0x24
 800224c:	e767      	b.n	800211e <_svfiprintf_r+0x4e>
 800224e:	460c      	mov	r4, r1
 8002250:	2001      	movs	r0, #1
 8002252:	fb0c 3202 	mla	r2, ip, r2, r3
 8002256:	e7a5      	b.n	80021a4 <_svfiprintf_r+0xd4>
 8002258:	2300      	movs	r3, #0
 800225a:	f04f 0c0a 	mov.w	ip, #10
 800225e:	4619      	mov	r1, r3
 8002260:	3401      	adds	r4, #1
 8002262:	9305      	str	r3, [sp, #20]
 8002264:	4620      	mov	r0, r4
 8002266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800226a:	3a30      	subs	r2, #48	; 0x30
 800226c:	2a09      	cmp	r2, #9
 800226e:	d903      	bls.n	8002278 <_svfiprintf_r+0x1a8>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0c5      	beq.n	8002200 <_svfiprintf_r+0x130>
 8002274:	9105      	str	r1, [sp, #20]
 8002276:	e7c3      	b.n	8002200 <_svfiprintf_r+0x130>
 8002278:	4604      	mov	r4, r0
 800227a:	2301      	movs	r3, #1
 800227c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002280:	e7f0      	b.n	8002264 <_svfiprintf_r+0x194>
 8002282:	ab03      	add	r3, sp, #12
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	462a      	mov	r2, r5
 8002288:	4638      	mov	r0, r7
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_svfiprintf_r+0x1fc>)
 800228c:	a904      	add	r1, sp, #16
 800228e:	f3af 8000 	nop.w
 8002292:	1c42      	adds	r2, r0, #1
 8002294:	4606      	mov	r6, r0
 8002296:	d1d6      	bne.n	8002246 <_svfiprintf_r+0x176>
 8002298:	89ab      	ldrh	r3, [r5, #12]
 800229a:	065b      	lsls	r3, r3, #25
 800229c:	f53f af2c 	bmi.w	80020f8 <_svfiprintf_r+0x28>
 80022a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022a2:	b01d      	add	sp, #116	; 0x74
 80022a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a8:	ab03      	add	r3, sp, #12
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	462a      	mov	r2, r5
 80022ae:	4638      	mov	r0, r7
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <_svfiprintf_r+0x1fc>)
 80022b2:	a904      	add	r1, sp, #16
 80022b4:	f000 f87c 	bl	80023b0 <_printf_i>
 80022b8:	e7eb      	b.n	8002292 <_svfiprintf_r+0x1c2>
 80022ba:	bf00      	nop
 80022bc:	0800293c 	.word	0x0800293c
 80022c0:	08002942 	.word	0x08002942
 80022c4:	08002946 	.word	0x08002946
 80022c8:	00000000 	.word	0x00000000
 80022cc:	08002019 	.word	0x08002019

080022d0 <_printf_common>:
 80022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d4:	4616      	mov	r6, r2
 80022d6:	4699      	mov	r9, r3
 80022d8:	688a      	ldr	r2, [r1, #8]
 80022da:	690b      	ldr	r3, [r1, #16]
 80022dc:	4607      	mov	r7, r0
 80022de:	4293      	cmp	r3, r2
 80022e0:	bfb8      	it	lt
 80022e2:	4613      	movlt	r3, r2
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022ea:	460c      	mov	r4, r1
 80022ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022f0:	b10a      	cbz	r2, 80022f6 <_printf_common+0x26>
 80022f2:	3301      	adds	r3, #1
 80022f4:	6033      	str	r3, [r6, #0]
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	0699      	lsls	r1, r3, #26
 80022fa:	bf42      	ittt	mi
 80022fc:	6833      	ldrmi	r3, [r6, #0]
 80022fe:	3302      	addmi	r3, #2
 8002300:	6033      	strmi	r3, [r6, #0]
 8002302:	6825      	ldr	r5, [r4, #0]
 8002304:	f015 0506 	ands.w	r5, r5, #6
 8002308:	d106      	bne.n	8002318 <_printf_common+0x48>
 800230a:	f104 0a19 	add.w	sl, r4, #25
 800230e:	68e3      	ldr	r3, [r4, #12]
 8002310:	6832      	ldr	r2, [r6, #0]
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	42ab      	cmp	r3, r5
 8002316:	dc28      	bgt.n	800236a <_printf_common+0x9a>
 8002318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800231c:	1e13      	subs	r3, r2, #0
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	bf18      	it	ne
 8002322:	2301      	movne	r3, #1
 8002324:	0692      	lsls	r2, r2, #26
 8002326:	d42d      	bmi.n	8002384 <_printf_common+0xb4>
 8002328:	4649      	mov	r1, r9
 800232a:	4638      	mov	r0, r7
 800232c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002330:	47c0      	blx	r8
 8002332:	3001      	adds	r0, #1
 8002334:	d020      	beq.n	8002378 <_printf_common+0xa8>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	68e5      	ldr	r5, [r4, #12]
 800233a:	f003 0306 	and.w	r3, r3, #6
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf18      	it	ne
 8002342:	2500      	movne	r5, #0
 8002344:	6832      	ldr	r2, [r6, #0]
 8002346:	f04f 0600 	mov.w	r6, #0
 800234a:	68a3      	ldr	r3, [r4, #8]
 800234c:	bf08      	it	eq
 800234e:	1aad      	subeq	r5, r5, r2
 8002350:	6922      	ldr	r2, [r4, #16]
 8002352:	bf08      	it	eq
 8002354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002358:	4293      	cmp	r3, r2
 800235a:	bfc4      	itt	gt
 800235c:	1a9b      	subgt	r3, r3, r2
 800235e:	18ed      	addgt	r5, r5, r3
 8002360:	341a      	adds	r4, #26
 8002362:	42b5      	cmp	r5, r6
 8002364:	d11a      	bne.n	800239c <_printf_common+0xcc>
 8002366:	2000      	movs	r0, #0
 8002368:	e008      	b.n	800237c <_printf_common+0xac>
 800236a:	2301      	movs	r3, #1
 800236c:	4652      	mov	r2, sl
 800236e:	4649      	mov	r1, r9
 8002370:	4638      	mov	r0, r7
 8002372:	47c0      	blx	r8
 8002374:	3001      	adds	r0, #1
 8002376:	d103      	bne.n	8002380 <_printf_common+0xb0>
 8002378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002380:	3501      	adds	r5, #1
 8002382:	e7c4      	b.n	800230e <_printf_common+0x3e>
 8002384:	2030      	movs	r0, #48	; 0x30
 8002386:	18e1      	adds	r1, r4, r3
 8002388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002392:	4422      	add	r2, r4
 8002394:	3302      	adds	r3, #2
 8002396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800239a:	e7c5      	b.n	8002328 <_printf_common+0x58>
 800239c:	2301      	movs	r3, #1
 800239e:	4622      	mov	r2, r4
 80023a0:	4649      	mov	r1, r9
 80023a2:	4638      	mov	r0, r7
 80023a4:	47c0      	blx	r8
 80023a6:	3001      	adds	r0, #1
 80023a8:	d0e6      	beq.n	8002378 <_printf_common+0xa8>
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7d9      	b.n	8002362 <_printf_common+0x92>
	...

080023b0 <_printf_i>:
 80023b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023b4:	7e0f      	ldrb	r7, [r1, #24]
 80023b6:	4691      	mov	r9, r2
 80023b8:	2f78      	cmp	r7, #120	; 0x78
 80023ba:	4680      	mov	r8, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	469a      	mov	sl, r3
 80023c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023c6:	d807      	bhi.n	80023d8 <_printf_i+0x28>
 80023c8:	2f62      	cmp	r7, #98	; 0x62
 80023ca:	d80a      	bhi.n	80023e2 <_printf_i+0x32>
 80023cc:	2f00      	cmp	r7, #0
 80023ce:	f000 80d9 	beq.w	8002584 <_printf_i+0x1d4>
 80023d2:	2f58      	cmp	r7, #88	; 0x58
 80023d4:	f000 80a4 	beq.w	8002520 <_printf_i+0x170>
 80023d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023e0:	e03a      	b.n	8002458 <_printf_i+0xa8>
 80023e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023e6:	2b15      	cmp	r3, #21
 80023e8:	d8f6      	bhi.n	80023d8 <_printf_i+0x28>
 80023ea:	a101      	add	r1, pc, #4	; (adr r1, 80023f0 <_printf_i+0x40>)
 80023ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023f0:	08002449 	.word	0x08002449
 80023f4:	0800245d 	.word	0x0800245d
 80023f8:	080023d9 	.word	0x080023d9
 80023fc:	080023d9 	.word	0x080023d9
 8002400:	080023d9 	.word	0x080023d9
 8002404:	080023d9 	.word	0x080023d9
 8002408:	0800245d 	.word	0x0800245d
 800240c:	080023d9 	.word	0x080023d9
 8002410:	080023d9 	.word	0x080023d9
 8002414:	080023d9 	.word	0x080023d9
 8002418:	080023d9 	.word	0x080023d9
 800241c:	0800256b 	.word	0x0800256b
 8002420:	0800248d 	.word	0x0800248d
 8002424:	0800254d 	.word	0x0800254d
 8002428:	080023d9 	.word	0x080023d9
 800242c:	080023d9 	.word	0x080023d9
 8002430:	0800258d 	.word	0x0800258d
 8002434:	080023d9 	.word	0x080023d9
 8002438:	0800248d 	.word	0x0800248d
 800243c:	080023d9 	.word	0x080023d9
 8002440:	080023d9 	.word	0x080023d9
 8002444:	08002555 	.word	0x08002555
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	602a      	str	r2, [r5, #0]
 8002450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002458:	2301      	movs	r3, #1
 800245a:	e0a4      	b.n	80025a6 <_printf_i+0x1f6>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	6829      	ldr	r1, [r5, #0]
 8002460:	0606      	lsls	r6, r0, #24
 8002462:	f101 0304 	add.w	r3, r1, #4
 8002466:	d50a      	bpl.n	800247e <_printf_i+0xce>
 8002468:	680e      	ldr	r6, [r1, #0]
 800246a:	602b      	str	r3, [r5, #0]
 800246c:	2e00      	cmp	r6, #0
 800246e:	da03      	bge.n	8002478 <_printf_i+0xc8>
 8002470:	232d      	movs	r3, #45	; 0x2d
 8002472:	4276      	negs	r6, r6
 8002474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002478:	230a      	movs	r3, #10
 800247a:	485e      	ldr	r0, [pc, #376]	; (80025f4 <_printf_i+0x244>)
 800247c:	e019      	b.n	80024b2 <_printf_i+0x102>
 800247e:	680e      	ldr	r6, [r1, #0]
 8002480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002484:	602b      	str	r3, [r5, #0]
 8002486:	bf18      	it	ne
 8002488:	b236      	sxthne	r6, r6
 800248a:	e7ef      	b.n	800246c <_printf_i+0xbc>
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	6820      	ldr	r0, [r4, #0]
 8002490:	1d19      	adds	r1, r3, #4
 8002492:	6029      	str	r1, [r5, #0]
 8002494:	0601      	lsls	r1, r0, #24
 8002496:	d501      	bpl.n	800249c <_printf_i+0xec>
 8002498:	681e      	ldr	r6, [r3, #0]
 800249a:	e002      	b.n	80024a2 <_printf_i+0xf2>
 800249c:	0646      	lsls	r6, r0, #25
 800249e:	d5fb      	bpl.n	8002498 <_printf_i+0xe8>
 80024a0:	881e      	ldrh	r6, [r3, #0]
 80024a2:	2f6f      	cmp	r7, #111	; 0x6f
 80024a4:	bf0c      	ite	eq
 80024a6:	2308      	moveq	r3, #8
 80024a8:	230a      	movne	r3, #10
 80024aa:	4852      	ldr	r0, [pc, #328]	; (80025f4 <_printf_i+0x244>)
 80024ac:	2100      	movs	r1, #0
 80024ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024b2:	6865      	ldr	r5, [r4, #4]
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	bfa8      	it	ge
 80024b8:	6821      	ldrge	r1, [r4, #0]
 80024ba:	60a5      	str	r5, [r4, #8]
 80024bc:	bfa4      	itt	ge
 80024be:	f021 0104 	bicge.w	r1, r1, #4
 80024c2:	6021      	strge	r1, [r4, #0]
 80024c4:	b90e      	cbnz	r6, 80024ca <_printf_i+0x11a>
 80024c6:	2d00      	cmp	r5, #0
 80024c8:	d04d      	beq.n	8002566 <_printf_i+0x1b6>
 80024ca:	4615      	mov	r5, r2
 80024cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80024d0:	fb03 6711 	mls	r7, r3, r1, r6
 80024d4:	5dc7      	ldrb	r7, [r0, r7]
 80024d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024da:	4637      	mov	r7, r6
 80024dc:	42bb      	cmp	r3, r7
 80024de:	460e      	mov	r6, r1
 80024e0:	d9f4      	bls.n	80024cc <_printf_i+0x11c>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d10b      	bne.n	80024fe <_printf_i+0x14e>
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	07de      	lsls	r6, r3, #31
 80024ea:	d508      	bpl.n	80024fe <_printf_i+0x14e>
 80024ec:	6923      	ldr	r3, [r4, #16]
 80024ee:	6861      	ldr	r1, [r4, #4]
 80024f0:	4299      	cmp	r1, r3
 80024f2:	bfde      	ittt	le
 80024f4:	2330      	movle	r3, #48	; 0x30
 80024f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80024fe:	1b52      	subs	r2, r2, r5
 8002500:	6122      	str	r2, [r4, #16]
 8002502:	464b      	mov	r3, r9
 8002504:	4621      	mov	r1, r4
 8002506:	4640      	mov	r0, r8
 8002508:	f8cd a000 	str.w	sl, [sp]
 800250c:	aa03      	add	r2, sp, #12
 800250e:	f7ff fedf 	bl	80022d0 <_printf_common>
 8002512:	3001      	adds	r0, #1
 8002514:	d14c      	bne.n	80025b0 <_printf_i+0x200>
 8002516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251a:	b004      	add	sp, #16
 800251c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002520:	4834      	ldr	r0, [pc, #208]	; (80025f4 <_printf_i+0x244>)
 8002522:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002526:	6829      	ldr	r1, [r5, #0]
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f851 6b04 	ldr.w	r6, [r1], #4
 800252e:	6029      	str	r1, [r5, #0]
 8002530:	061d      	lsls	r5, r3, #24
 8002532:	d514      	bpl.n	800255e <_printf_i+0x1ae>
 8002534:	07df      	lsls	r7, r3, #31
 8002536:	bf44      	itt	mi
 8002538:	f043 0320 	orrmi.w	r3, r3, #32
 800253c:	6023      	strmi	r3, [r4, #0]
 800253e:	b91e      	cbnz	r6, 8002548 <_printf_i+0x198>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f023 0320 	bic.w	r3, r3, #32
 8002546:	6023      	str	r3, [r4, #0]
 8002548:	2310      	movs	r3, #16
 800254a:	e7af      	b.n	80024ac <_printf_i+0xfc>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f043 0320 	orr.w	r3, r3, #32
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	2378      	movs	r3, #120	; 0x78
 8002556:	4828      	ldr	r0, [pc, #160]	; (80025f8 <_printf_i+0x248>)
 8002558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800255c:	e7e3      	b.n	8002526 <_printf_i+0x176>
 800255e:	0659      	lsls	r1, r3, #25
 8002560:	bf48      	it	mi
 8002562:	b2b6      	uxthmi	r6, r6
 8002564:	e7e6      	b.n	8002534 <_printf_i+0x184>
 8002566:	4615      	mov	r5, r2
 8002568:	e7bb      	b.n	80024e2 <_printf_i+0x132>
 800256a:	682b      	ldr	r3, [r5, #0]
 800256c:	6826      	ldr	r6, [r4, #0]
 800256e:	1d18      	adds	r0, r3, #4
 8002570:	6961      	ldr	r1, [r4, #20]
 8002572:	6028      	str	r0, [r5, #0]
 8002574:	0635      	lsls	r5, r6, #24
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	d501      	bpl.n	800257e <_printf_i+0x1ce>
 800257a:	6019      	str	r1, [r3, #0]
 800257c:	e002      	b.n	8002584 <_printf_i+0x1d4>
 800257e:	0670      	lsls	r0, r6, #25
 8002580:	d5fb      	bpl.n	800257a <_printf_i+0x1ca>
 8002582:	8019      	strh	r1, [r3, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	4615      	mov	r5, r2
 8002588:	6123      	str	r3, [r4, #16]
 800258a:	e7ba      	b.n	8002502 <_printf_i+0x152>
 800258c:	682b      	ldr	r3, [r5, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	1d1a      	adds	r2, r3, #4
 8002592:	602a      	str	r2, [r5, #0]
 8002594:	681d      	ldr	r5, [r3, #0]
 8002596:	6862      	ldr	r2, [r4, #4]
 8002598:	4628      	mov	r0, r5
 800259a:	f000 f82f 	bl	80025fc <memchr>
 800259e:	b108      	cbz	r0, 80025a4 <_printf_i+0x1f4>
 80025a0:	1b40      	subs	r0, r0, r5
 80025a2:	6060      	str	r0, [r4, #4]
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	6123      	str	r3, [r4, #16]
 80025a8:	2300      	movs	r3, #0
 80025aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ae:	e7a8      	b.n	8002502 <_printf_i+0x152>
 80025b0:	462a      	mov	r2, r5
 80025b2:	4649      	mov	r1, r9
 80025b4:	4640      	mov	r0, r8
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	47d0      	blx	sl
 80025ba:	3001      	adds	r0, #1
 80025bc:	d0ab      	beq.n	8002516 <_printf_i+0x166>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	079b      	lsls	r3, r3, #30
 80025c2:	d413      	bmi.n	80025ec <_printf_i+0x23c>
 80025c4:	68e0      	ldr	r0, [r4, #12]
 80025c6:	9b03      	ldr	r3, [sp, #12]
 80025c8:	4298      	cmp	r0, r3
 80025ca:	bfb8      	it	lt
 80025cc:	4618      	movlt	r0, r3
 80025ce:	e7a4      	b.n	800251a <_printf_i+0x16a>
 80025d0:	2301      	movs	r3, #1
 80025d2:	4632      	mov	r2, r6
 80025d4:	4649      	mov	r1, r9
 80025d6:	4640      	mov	r0, r8
 80025d8:	47d0      	blx	sl
 80025da:	3001      	adds	r0, #1
 80025dc:	d09b      	beq.n	8002516 <_printf_i+0x166>
 80025de:	3501      	adds	r5, #1
 80025e0:	68e3      	ldr	r3, [r4, #12]
 80025e2:	9903      	ldr	r1, [sp, #12]
 80025e4:	1a5b      	subs	r3, r3, r1
 80025e6:	42ab      	cmp	r3, r5
 80025e8:	dcf2      	bgt.n	80025d0 <_printf_i+0x220>
 80025ea:	e7eb      	b.n	80025c4 <_printf_i+0x214>
 80025ec:	2500      	movs	r5, #0
 80025ee:	f104 0619 	add.w	r6, r4, #25
 80025f2:	e7f5      	b.n	80025e0 <_printf_i+0x230>
 80025f4:	0800294d 	.word	0x0800294d
 80025f8:	0800295e 	.word	0x0800295e

080025fc <memchr>:
 80025fc:	4603      	mov	r3, r0
 80025fe:	b510      	push	{r4, lr}
 8002600:	b2c9      	uxtb	r1, r1
 8002602:	4402      	add	r2, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	4618      	mov	r0, r3
 8002608:	d101      	bne.n	800260e <memchr+0x12>
 800260a:	2000      	movs	r0, #0
 800260c:	e003      	b.n	8002616 <memchr+0x1a>
 800260e:	7804      	ldrb	r4, [r0, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	428c      	cmp	r4, r1
 8002614:	d1f6      	bne.n	8002604 <memchr+0x8>
 8002616:	bd10      	pop	{r4, pc}

08002618 <memcpy>:
 8002618:	440a      	add	r2, r1
 800261a:	4291      	cmp	r1, r2
 800261c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002620:	d100      	bne.n	8002624 <memcpy+0xc>
 8002622:	4770      	bx	lr
 8002624:	b510      	push	{r4, lr}
 8002626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800262a:	4291      	cmp	r1, r2
 800262c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002630:	d1f9      	bne.n	8002626 <memcpy+0xe>
 8002632:	bd10      	pop	{r4, pc}

08002634 <memmove>:
 8002634:	4288      	cmp	r0, r1
 8002636:	b510      	push	{r4, lr}
 8002638:	eb01 0402 	add.w	r4, r1, r2
 800263c:	d902      	bls.n	8002644 <memmove+0x10>
 800263e:	4284      	cmp	r4, r0
 8002640:	4623      	mov	r3, r4
 8002642:	d807      	bhi.n	8002654 <memmove+0x20>
 8002644:	1e43      	subs	r3, r0, #1
 8002646:	42a1      	cmp	r1, r4
 8002648:	d008      	beq.n	800265c <memmove+0x28>
 800264a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800264e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002652:	e7f8      	b.n	8002646 <memmove+0x12>
 8002654:	4601      	mov	r1, r0
 8002656:	4402      	add	r2, r0
 8002658:	428a      	cmp	r2, r1
 800265a:	d100      	bne.n	800265e <memmove+0x2a>
 800265c:	bd10      	pop	{r4, pc}
 800265e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002666:	e7f7      	b.n	8002658 <memmove+0x24>

08002668 <_free_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4605      	mov	r5, r0
 800266c:	2900      	cmp	r1, #0
 800266e:	d040      	beq.n	80026f2 <_free_r+0x8a>
 8002670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002674:	1f0c      	subs	r4, r1, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfb8      	it	lt
 800267a:	18e4      	addlt	r4, r4, r3
 800267c:	f000 f910 	bl	80028a0 <__malloc_lock>
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <_free_r+0x8c>)
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	b933      	cbnz	r3, 8002694 <_free_r+0x2c>
 8002686:	6063      	str	r3, [r4, #4]
 8002688:	6014      	str	r4, [r2, #0]
 800268a:	4628      	mov	r0, r5
 800268c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002690:	f000 b90c 	b.w	80028ac <__malloc_unlock>
 8002694:	42a3      	cmp	r3, r4
 8002696:	d908      	bls.n	80026aa <_free_r+0x42>
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	1821      	adds	r1, r4, r0
 800269c:	428b      	cmp	r3, r1
 800269e:	bf01      	itttt	eq
 80026a0:	6819      	ldreq	r1, [r3, #0]
 80026a2:	685b      	ldreq	r3, [r3, #4]
 80026a4:	1809      	addeq	r1, r1, r0
 80026a6:	6021      	streq	r1, [r4, #0]
 80026a8:	e7ed      	b.n	8002686 <_free_r+0x1e>
 80026aa:	461a      	mov	r2, r3
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b10b      	cbz	r3, 80026b4 <_free_r+0x4c>
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d9fa      	bls.n	80026aa <_free_r+0x42>
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	1850      	adds	r0, r2, r1
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	d10b      	bne.n	80026d4 <_free_r+0x6c>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	4401      	add	r1, r0
 80026c0:	1850      	adds	r0, r2, r1
 80026c2:	4283      	cmp	r3, r0
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	d1e0      	bne.n	800268a <_free_r+0x22>
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4401      	add	r1, r0
 80026ce:	6011      	str	r1, [r2, #0]
 80026d0:	6053      	str	r3, [r2, #4]
 80026d2:	e7da      	b.n	800268a <_free_r+0x22>
 80026d4:	d902      	bls.n	80026dc <_free_r+0x74>
 80026d6:	230c      	movs	r3, #12
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	e7d6      	b.n	800268a <_free_r+0x22>
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	1821      	adds	r1, r4, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf01      	itttt	eq
 80026e4:	6819      	ldreq	r1, [r3, #0]
 80026e6:	685b      	ldreq	r3, [r3, #4]
 80026e8:	1809      	addeq	r1, r1, r0
 80026ea:	6021      	streq	r1, [r4, #0]
 80026ec:	6063      	str	r3, [r4, #4]
 80026ee:	6054      	str	r4, [r2, #4]
 80026f0:	e7cb      	b.n	800268a <_free_r+0x22>
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
 80026f4:	200000e8 	.word	0x200000e8

080026f8 <sbrk_aligned>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4e0e      	ldr	r6, [pc, #56]	; (8002734 <sbrk_aligned+0x3c>)
 80026fc:	460c      	mov	r4, r1
 80026fe:	6831      	ldr	r1, [r6, #0]
 8002700:	4605      	mov	r5, r0
 8002702:	b911      	cbnz	r1, 800270a <sbrk_aligned+0x12>
 8002704:	f000 f8bc 	bl	8002880 <_sbrk_r>
 8002708:	6030      	str	r0, [r6, #0]
 800270a:	4621      	mov	r1, r4
 800270c:	4628      	mov	r0, r5
 800270e:	f000 f8b7 	bl	8002880 <_sbrk_r>
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	d00a      	beq.n	800272c <sbrk_aligned+0x34>
 8002716:	1cc4      	adds	r4, r0, #3
 8002718:	f024 0403 	bic.w	r4, r4, #3
 800271c:	42a0      	cmp	r0, r4
 800271e:	d007      	beq.n	8002730 <sbrk_aligned+0x38>
 8002720:	1a21      	subs	r1, r4, r0
 8002722:	4628      	mov	r0, r5
 8002724:	f000 f8ac 	bl	8002880 <_sbrk_r>
 8002728:	3001      	adds	r0, #1
 800272a:	d101      	bne.n	8002730 <sbrk_aligned+0x38>
 800272c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002730:	4620      	mov	r0, r4
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	200000ec 	.word	0x200000ec

08002738 <_malloc_r>:
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273c:	1ccd      	adds	r5, r1, #3
 800273e:	f025 0503 	bic.w	r5, r5, #3
 8002742:	3508      	adds	r5, #8
 8002744:	2d0c      	cmp	r5, #12
 8002746:	bf38      	it	cc
 8002748:	250c      	movcc	r5, #12
 800274a:	2d00      	cmp	r5, #0
 800274c:	4607      	mov	r7, r0
 800274e:	db01      	blt.n	8002754 <_malloc_r+0x1c>
 8002750:	42a9      	cmp	r1, r5
 8002752:	d905      	bls.n	8002760 <_malloc_r+0x28>
 8002754:	230c      	movs	r3, #12
 8002756:	2600      	movs	r6, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4630      	mov	r0, r6
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002760:	4e2e      	ldr	r6, [pc, #184]	; (800281c <_malloc_r+0xe4>)
 8002762:	f000 f89d 	bl	80028a0 <__malloc_lock>
 8002766:	6833      	ldr	r3, [r6, #0]
 8002768:	461c      	mov	r4, r3
 800276a:	bb34      	cbnz	r4, 80027ba <_malloc_r+0x82>
 800276c:	4629      	mov	r1, r5
 800276e:	4638      	mov	r0, r7
 8002770:	f7ff ffc2 	bl	80026f8 <sbrk_aligned>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	4604      	mov	r4, r0
 8002778:	d14d      	bne.n	8002816 <_malloc_r+0xde>
 800277a:	6834      	ldr	r4, [r6, #0]
 800277c:	4626      	mov	r6, r4
 800277e:	2e00      	cmp	r6, #0
 8002780:	d140      	bne.n	8002804 <_malloc_r+0xcc>
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	4631      	mov	r1, r6
 8002786:	4638      	mov	r0, r7
 8002788:	eb04 0803 	add.w	r8, r4, r3
 800278c:	f000 f878 	bl	8002880 <_sbrk_r>
 8002790:	4580      	cmp	r8, r0
 8002792:	d13a      	bne.n	800280a <_malloc_r+0xd2>
 8002794:	6821      	ldr	r1, [r4, #0]
 8002796:	3503      	adds	r5, #3
 8002798:	1a6d      	subs	r5, r5, r1
 800279a:	f025 0503 	bic.w	r5, r5, #3
 800279e:	3508      	adds	r5, #8
 80027a0:	2d0c      	cmp	r5, #12
 80027a2:	bf38      	it	cc
 80027a4:	250c      	movcc	r5, #12
 80027a6:	4638      	mov	r0, r7
 80027a8:	4629      	mov	r1, r5
 80027aa:	f7ff ffa5 	bl	80026f8 <sbrk_aligned>
 80027ae:	3001      	adds	r0, #1
 80027b0:	d02b      	beq.n	800280a <_malloc_r+0xd2>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	442b      	add	r3, r5
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	e00e      	b.n	80027d8 <_malloc_r+0xa0>
 80027ba:	6822      	ldr	r2, [r4, #0]
 80027bc:	1b52      	subs	r2, r2, r5
 80027be:	d41e      	bmi.n	80027fe <_malloc_r+0xc6>
 80027c0:	2a0b      	cmp	r2, #11
 80027c2:	d916      	bls.n	80027f2 <_malloc_r+0xba>
 80027c4:	1961      	adds	r1, r4, r5
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	6025      	str	r5, [r4, #0]
 80027ca:	bf18      	it	ne
 80027cc:	6059      	strne	r1, [r3, #4]
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	bf08      	it	eq
 80027d2:	6031      	streq	r1, [r6, #0]
 80027d4:	5162      	str	r2, [r4, r5]
 80027d6:	604b      	str	r3, [r1, #4]
 80027d8:	4638      	mov	r0, r7
 80027da:	f104 060b 	add.w	r6, r4, #11
 80027de:	f000 f865 	bl	80028ac <__malloc_unlock>
 80027e2:	f026 0607 	bic.w	r6, r6, #7
 80027e6:	1d23      	adds	r3, r4, #4
 80027e8:	1af2      	subs	r2, r6, r3
 80027ea:	d0b6      	beq.n	800275a <_malloc_r+0x22>
 80027ec:	1b9b      	subs	r3, r3, r6
 80027ee:	50a3      	str	r3, [r4, r2]
 80027f0:	e7b3      	b.n	800275a <_malloc_r+0x22>
 80027f2:	6862      	ldr	r2, [r4, #4]
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	bf0c      	ite	eq
 80027f8:	6032      	streq	r2, [r6, #0]
 80027fa:	605a      	strne	r2, [r3, #4]
 80027fc:	e7ec      	b.n	80027d8 <_malloc_r+0xa0>
 80027fe:	4623      	mov	r3, r4
 8002800:	6864      	ldr	r4, [r4, #4]
 8002802:	e7b2      	b.n	800276a <_malloc_r+0x32>
 8002804:	4634      	mov	r4, r6
 8002806:	6876      	ldr	r6, [r6, #4]
 8002808:	e7b9      	b.n	800277e <_malloc_r+0x46>
 800280a:	230c      	movs	r3, #12
 800280c:	4638      	mov	r0, r7
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	f000 f84c 	bl	80028ac <__malloc_unlock>
 8002814:	e7a1      	b.n	800275a <_malloc_r+0x22>
 8002816:	6025      	str	r5, [r4, #0]
 8002818:	e7de      	b.n	80027d8 <_malloc_r+0xa0>
 800281a:	bf00      	nop
 800281c:	200000e8 	.word	0x200000e8

08002820 <_realloc_r>:
 8002820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002824:	4680      	mov	r8, r0
 8002826:	4614      	mov	r4, r2
 8002828:	460e      	mov	r6, r1
 800282a:	b921      	cbnz	r1, 8002836 <_realloc_r+0x16>
 800282c:	4611      	mov	r1, r2
 800282e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002832:	f7ff bf81 	b.w	8002738 <_malloc_r>
 8002836:	b92a      	cbnz	r2, 8002844 <_realloc_r+0x24>
 8002838:	f7ff ff16 	bl	8002668 <_free_r>
 800283c:	4625      	mov	r5, r4
 800283e:	4628      	mov	r0, r5
 8002840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002844:	f000 f838 	bl	80028b8 <_malloc_usable_size_r>
 8002848:	4284      	cmp	r4, r0
 800284a:	4607      	mov	r7, r0
 800284c:	d802      	bhi.n	8002854 <_realloc_r+0x34>
 800284e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002852:	d812      	bhi.n	800287a <_realloc_r+0x5a>
 8002854:	4621      	mov	r1, r4
 8002856:	4640      	mov	r0, r8
 8002858:	f7ff ff6e 	bl	8002738 <_malloc_r>
 800285c:	4605      	mov	r5, r0
 800285e:	2800      	cmp	r0, #0
 8002860:	d0ed      	beq.n	800283e <_realloc_r+0x1e>
 8002862:	42bc      	cmp	r4, r7
 8002864:	4622      	mov	r2, r4
 8002866:	4631      	mov	r1, r6
 8002868:	bf28      	it	cs
 800286a:	463a      	movcs	r2, r7
 800286c:	f7ff fed4 	bl	8002618 <memcpy>
 8002870:	4631      	mov	r1, r6
 8002872:	4640      	mov	r0, r8
 8002874:	f7ff fef8 	bl	8002668 <_free_r>
 8002878:	e7e1      	b.n	800283e <_realloc_r+0x1e>
 800287a:	4635      	mov	r5, r6
 800287c:	e7df      	b.n	800283e <_realloc_r+0x1e>
	...

08002880 <_sbrk_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	2300      	movs	r3, #0
 8002884:	4d05      	ldr	r5, [pc, #20]	; (800289c <_sbrk_r+0x1c>)
 8002886:	4604      	mov	r4, r0
 8002888:	4608      	mov	r0, r1
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	f7fd ff8e 	bl	80007ac <_sbrk>
 8002890:	1c43      	adds	r3, r0, #1
 8002892:	d102      	bne.n	800289a <_sbrk_r+0x1a>
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	b103      	cbz	r3, 800289a <_sbrk_r+0x1a>
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	bd38      	pop	{r3, r4, r5, pc}
 800289c:	200000f0 	.word	0x200000f0

080028a0 <__malloc_lock>:
 80028a0:	4801      	ldr	r0, [pc, #4]	; (80028a8 <__malloc_lock+0x8>)
 80028a2:	f000 b811 	b.w	80028c8 <__retarget_lock_acquire_recursive>
 80028a6:	bf00      	nop
 80028a8:	200000f4 	.word	0x200000f4

080028ac <__malloc_unlock>:
 80028ac:	4801      	ldr	r0, [pc, #4]	; (80028b4 <__malloc_unlock+0x8>)
 80028ae:	f000 b80c 	b.w	80028ca <__retarget_lock_release_recursive>
 80028b2:	bf00      	nop
 80028b4:	200000f4 	.word	0x200000f4

080028b8 <_malloc_usable_size_r>:
 80028b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028bc:	1f18      	subs	r0, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bfbc      	itt	lt
 80028c2:	580b      	ldrlt	r3, [r1, r0]
 80028c4:	18c0      	addlt	r0, r0, r3
 80028c6:	4770      	bx	lr

080028c8 <__retarget_lock_acquire_recursive>:
 80028c8:	4770      	bx	lr

080028ca <__retarget_lock_release_recursive>:
 80028ca:	4770      	bx	lr

080028cc <_init>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr

080028d8 <_fini>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	bf00      	nop
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr
