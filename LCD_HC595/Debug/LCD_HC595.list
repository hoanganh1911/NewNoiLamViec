
LCD_HC595.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002140  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b8  080022b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080022b8  080022b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022b8  080022b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080022c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002330  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002330  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006219  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012af  00000000  00000000  000262b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00027c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e26  00000000  00000000  000282a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008836  00000000  00000000  0003f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826cf  00000000  00000000  00047904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9fd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000ca024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002234 	.word	0x08002234

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002234 	.word	0x08002234

0800014c <hc595_trans>:
/* Chân nền */
#define BL_PIN 7

/* Hàm truyền dữ liệu : Mỗi lần gửi bit từ MSB -> LSB */
void hc595_trans(uint8_t c)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<8;i++)
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e021      	b.n	80001a0 <hc595_trans+0x54>
	{
		uint8_t bit_trans = (c & (0x80>>i))>>(7-i);
 800015c:	79fa      	ldrb	r2, [r7, #7]
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	fa41 f303 	asr.w	r3, r1, r3
 8000166:	401a      	ands	r2, r3
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	f1c3 0307 	rsb	r3, r3, #7
 800016e:	fa42 f303 	asr.w	r3, r2, r3
 8000172:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, bit_trans);
 8000174:	7afb      	ldrb	r3, [r7, #11]
 8000176:	461a      	mov	r2, r3
 8000178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017c:	4812      	ldr	r0, [pc, #72]	; (80001c8 <hc595_trans+0x7c>)
 800017e:	f000 fe4b 	bl	8000e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000188:	480f      	ldr	r0, [pc, #60]	; (80001c8 <hc595_trans+0x7c>)
 800018a:	f000 fe45 	bl	8000e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <hc595_trans+0x7c>)
 8000196:	f000 fe3f 	bl	8000e18 <HAL_GPIO_WritePin>
	for(int i = 0;i<8;i++)
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	3301      	adds	r3, #1
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	ddda      	ble.n	800015c <hc595_trans+0x10>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ac:	4806      	ldr	r0, [pc, #24]	; (80001c8 <hc595_trans+0x7c>)
 80001ae:	f000 fe33 	bl	8000e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <hc595_trans+0x7c>)
 80001ba:	f000 fe2d 	bl	8000e18 <HAL_GPIO_WritePin>
}
 80001be:	bf00      	nop
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800

080001cc <lcd_Send_Cmd>:
void lcd_Send_Cmd(char cmd)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l; // vi du 0x30
	uint8_t data_t[4];
	data_u = (cmd >> 4) & 0x0f; // data_u =0x03
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	091b      	lsrs	r3, r3, #4
 80001da:	74fb      	strb	r3, [r7, #19]
	data_l = (cmd & 0x0f); // data_l = 0x00
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	f003 030f 	and.w	r3, r3, #15
 80001e2:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN); // 1000 0000 | 0000 0100 | 0001 1000 = 1001 1100
 80001e4:	7cfb      	ldrb	r3, [r7, #19]
 80001e6:	00db      	lsls	r3, r3, #3
 80001e8:	b25b      	sxtb	r3, r3
 80001ea:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80001ee:	b25b      	sxtb	r3, r3
 80001f0:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80001f4:	b25b      	sxtb	r3, r3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	733b      	strb	r3, [r7, #12]
	data_t[1] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN); // 1000 0000 | 0000 0000 | 0001 1000 = 1001 1000
 80001fa:	7cfb      	ldrb	r3, [r7, #19]
 80001fc:	00db      	lsls	r3, r3, #3
 80001fe:	b25b      	sxtb	r3, r3
 8000200:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000204:	b25b      	sxtb	r3, r3
 8000206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800020a:	b25b      	sxtb	r3, r3
 800020c:	b2db      	uxtb	r3, r3
 800020e:	737b      	strb	r3, [r7, #13]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8000210:	7cbb      	ldrb	r3, [r7, #18]
 8000212:	00db      	lsls	r3, r3, #3
 8000214:	b25b      	sxtb	r3, r3
 8000216:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800021a:	b25b      	sxtb	r3, r3
 800021c:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8000220:	b25b      	sxtb	r3, r3
 8000222:	b2db      	uxtb	r3, r3
 8000224:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8000226:	7cbb      	ldrb	r3, [r7, #18]
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	b25b      	sxtb	r3, r3
 800022c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000230:	b25b      	sxtb	r3, r3
 8000232:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000236:	b25b      	sxtb	r3, r3
 8000238:	b2db      	uxtb	r3, r3
 800023a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0;i<4;i++)
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	e00a      	b.n	8000258 <lcd_Send_Cmd+0x8c>
	{
		hc595_trans(data_t[i]);
 8000242:	f107 020c 	add.w	r2, r7, #12
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ff7d 	bl	800014c <hc595_trans>
	for(int i = 0;i<4;i++)
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	3301      	adds	r3, #1
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2b03      	cmp	r3, #3
 800025c:	ddf1      	ble.n	8000242 <lcd_Send_Cmd+0x76>
	}
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_Send_Data>:
void lcd_Send_Data(char data)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	char data_u,data_l;
	uint8_t data_t[4];
	data_u = (data >> 4) & 0x0f;
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	091b      	lsrs	r3, r3, #4
 8000276:	74fb      	strb	r3, [r7, #19]
	data_l = (data & 0x0f);
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	f003 030f 	and.w	r3, r3, #15
 800027e:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8000280:	7cfb      	ldrb	r3, [r7, #19]
 8000282:	00db      	lsls	r3, r3, #3
 8000284:	b25b      	sxtb	r3, r3
 8000286:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800028a:	b25b      	sxtb	r3, r3
 800028c:	f063 037a 	orn	r3, r3, #122	; 0x7a
 8000290:	b25b      	sxtb	r3, r3
 8000292:	b2db      	uxtb	r3, r3
 8000294:	733b      	strb	r3, [r7, #12]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8000296:	7cbb      	ldrb	r3, [r7, #18]
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	b25b      	sxtb	r3, r3
 800029c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80002a0:	b25b      	sxtb	r3, r3
 80002a2:	f063 037a 	orn	r3, r3, #122	; 0x7a
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 80002ac:	7cbb      	ldrb	r3, [r7, #18]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	b25b      	sxtb	r3, r3
 80002b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	f063 037b 	orn	r3, r3, #123	; 0x7b
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	e00a      	b.n	80002de <lcd_Send_Data+0x76>
	{
		hc595_trans(data_t[i]);
 80002c8:	f107 020c 	add.w	r2, r7, #12
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	4413      	add	r3, r2
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3a 	bl	800014c <hc595_trans>
	for(int i = 0;i<4;i++)
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	ddf1      	ble.n	80002c8 <lcd_Send_Data+0x60>

	}

	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <lcd_Clear>:
void lcd_Clear(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	lcd_Send_Cmd(0x01);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f7ff ff6a 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(2);
 80002f8:	2002      	movs	r0, #2
 80002fa:	f000 fb01 	bl	8000900 <HAL_Delay>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_Put_Cur>:
void lcd_Put_Cur(int row,int col)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	switch(row)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d003      	beq.n	800031a <lcd_Put_Cur+0x18>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d005      	beq.n	8000324 <lcd_Put_Cur+0x22>
 8000318:	e009      	b.n	800032e <lcd_Put_Cur+0x2c>
	{
		case 0:
			col |= 0x80; //0x80 1 000 000x
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000320:	603b      	str	r3, [r7, #0]
			break;
 8000322:	e004      	b.n	800032e <lcd_Put_Cur+0x2c>
		case 1:
			col |= 0xC0; // 0xC1 1 100 000x
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800032a:	603b      	str	r3, [r7, #0]
			break;
 800032c:	bf00      	nop
	}
	//Gửi lệnh ứng với vị trí cần xuất hiện con trỏ Set DDRAM address tr24
	lcd_Send_Cmd(col);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff4a 	bl	80001cc <lcd_Send_Cmd>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <lcd_Init>:
void lcd_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	// Khởi tạo 4 bit
	HAL_Delay(50);
 8000344:	2032      	movs	r0, #50	; 0x32
 8000346:	f000 fadb 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 800034a:	2030      	movs	r0, #48	; 0x30
 800034c:	f7ff ff3e 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(5);
 8000350:	2005      	movs	r0, #5
 8000352:	f000 fad5 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8000356:	2030      	movs	r0, #48	; 0x30
 8000358:	f7ff ff38 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f000 facf 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8000362:	2030      	movs	r0, #48	; 0x30
 8000364:	f7ff ff32 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(10);
 8000368:	200a      	movs	r0, #10
 800036a:	f000 fac9 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x20);
 800036e:	2020      	movs	r0, #32
 8000370:	f7ff ff2c 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(10);
 8000374:	200a      	movs	r0, #10
 8000376:	f000 fac3 	bl	8000900 <HAL_Delay>
	// Khởi tạo hiển thị
	//00 00 101 00
	lcd_Send_Cmd(0x28); //function set bảng 6/tr23: set data interface 4bits 2lines 5x8 bit
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f7ff ff26 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f000 fabd 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x08); //display on/off control
 8000386:	2008      	movs	r0, #8
 8000388:	f7ff ff20 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fab7 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x01); //clear display
 8000392:	2001      	movs	r0, #1
 8000394:	f7ff ff1a 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 fab1 	bl	8000900 <HAL_Delay>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 faae 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x06); //entry mode set: i/d=1 increment s=0
 80003a4:	2006      	movs	r0, #6
 80003a6:	f7ff ff11 	bl	80001cc <lcd_Send_Cmd>
	HAL_Delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 faa8 	bl	8000900 <HAL_Delay>
	lcd_Send_Cmd(0x0C); // cho phep hien thi man hinh
 80003b0:	200c      	movs	r0, #12
 80003b2:	f7ff ff0b 	bl	80001cc <lcd_Send_Cmd>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcd_Send_String>:
void lcd_Send_String(char *str)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	while(*str) lcd_Send_Data(*str++);
 80003c2:	e006      	b.n	80003d2 <lcd_Send_String+0x18>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff4b 	bl	8000268 <lcd_Send_Data>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1f4      	bne.n	80003c4 <lcd_Send_String+0xa>
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ea:	f000 fa27 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ee:	f000 f841 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f2:	f000 f8b3 	bl	800055c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003f6:	f000 f883 	bl	8000500 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  char str[20];

  lcd_Init();
 80003fe:	f7ff ff9f 	bl	8000340 <lcd_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(str,"DCM T.Thao x%d",count);
 8000402:	463b      	mov	r3, r7
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	491a      	ldr	r1, [pc, #104]	; (8000470 <main+0x8c>)
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fa99 	bl	8001940 <siprintf>
	lcd_Put_Cur(0, 0);
 800040e:	2100      	movs	r1, #0
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ff76 	bl	8000302 <lcd_Put_Cur>
	lcd_Send_String(str);
 8000416:	463b      	mov	r3, r7
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffce 	bl	80003ba <lcd_Send_String>
	count++;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
	HAL_Delay(2000);
 8000424:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000428:	f000 fa6a 	bl	8000900 <HAL_Delay>
	lcd_Clear();
 800042c:	f7ff ff5f 	bl	80002ee <lcd_Clear>
	HAL_Delay(2000);
 8000430:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000434:	f000 fa64 	bl	8000900 <HAL_Delay>
	sprintf(str,"DCM T.Thao x%d",count);
 8000438:	463b      	mov	r3, r7
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	490c      	ldr	r1, [pc, #48]	; (8000470 <main+0x8c>)
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fa7e 	bl	8001940 <siprintf>
	lcd_Put_Cur(1, 0);
 8000444:	2100      	movs	r1, #0
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff5b 	bl	8000302 <lcd_Put_Cur>
	lcd_Send_String(str);
 800044c:	463b      	mov	r3, r7
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffb3 	bl	80003ba <lcd_Send_String>
	count++;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3301      	adds	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
	HAL_Delay(2000);
 800045a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800045e:	f000 fa4f 	bl	8000900 <HAL_Delay>
	lcd_Clear();
 8000462:	f7ff ff44 	bl	80002ee <lcd_Clear>
	HAL_Delay(2000);
 8000466:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800046a:	f000 fa49 	bl	8000900 <HAL_Delay>
	sprintf(str,"DCM T.Thao x%d",count);
 800046e:	e7c8      	b.n	8000402 <main+0x1e>
 8000470:	0800224c 	.word	0x0800224c

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	; 0x40
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fa54 	bl	8001930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a8:	2302      	movs	r3, #2
 80004aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fe07 	bl	80010d0 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c8:	f000 f8b8 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2302      	movs	r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f874 	bl	80015d4 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004f2:	f000 f8a3 	bl	800063c <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	; 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_I2C1_Init+0x50>)
 8000506:	4a13      	ldr	r2, [pc, #76]	; (8000554 <MX_I2C1_Init+0x54>)
 8000508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_I2C1_Init+0x50>)
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <MX_I2C1_Init+0x58>)
 800050e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_I2C1_Init+0x50>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_I2C1_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_I2C1_Init+0x50>)
 800051e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_I2C1_Init+0x50>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_I2C1_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_I2C1_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_I2C1_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_I2C1_Init+0x50>)
 800053e:	f000 fc83 	bl	8000e48 <HAL_I2C_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000548:	f000 f878 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000008c 	.word	0x2000008c
 8000554:	40005400 	.word	0x40005400
 8000558:	000186a0 	.word	0x000186a0

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_GPIO_Init+0xd4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <MX_GPIO_Init+0xd4>)
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_GPIO_Init+0xd4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0320 	and.w	r3, r3, #32
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_GPIO_Init+0xd4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <MX_GPIO_Init+0xd4>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_GPIO_Init+0xd4>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_GPIO_Init+0xd4>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <MX_GPIO_Init+0xd4>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_GPIO_Init+0xd4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|LATCH_Pin|DATA_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <MX_GPIO_Init+0xd8>)
 80005c0:	f000 fc2a 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_RESET_GPIO_Port, M_RESET_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2108      	movs	r1, #8
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <MX_GPIO_Init+0xdc>)
 80005ca:	f000 fc25 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80005ce:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <MX_GPIO_Init+0xd8>)
 80005e8:	f000 fa92 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_Pin */
  GPIO_InitStruct.Pin = LATCH_Pin;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <MX_GPIO_Init+0xd8>)
 8000606:	f000 fa83 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_RESET_Pin */
  GPIO_InitStruct.Pin = M_RESET_Pin;
 800060a:	2308      	movs	r3, #8
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M_RESET_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000622:	f000 fa75 	bl	8000b10 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_MspInit+0x5c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_MspInit+0x5c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x5c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_MspInit+0x60>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_MspInit+0x60>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <HAL_I2C_MspInit+0x70>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d123      	bne.n	8000714 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_I2C_MspInit+0x74>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <HAL_I2C_MspInit+0x74>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_I2C_MspInit+0x74>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006e4:	23c0      	movs	r3, #192	; 0xc0
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <HAL_I2C_MspInit+0x78>)
 80006f8:	f000 fa0a 	bl	8000b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x74>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_I2C_MspInit+0x74>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_I2C_MspInit+0x74>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40005400 	.word	0x40005400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010c00 	.word	0x40010c00

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f8ab 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <_sbrk+0x5c>)
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <_sbrk+0x60>)
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <_sbrk+0x64>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <_sbrk+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d207      	bcs.n	80007b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a8:	f001 f898 	bl	80018dc <__errno>
 80007ac:	4603      	mov	r3, r0
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	e009      	b.n	80007cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <_sbrk+0x64>)
 80007c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20005000 	.word	0x20005000
 80007d8:	00000400 	.word	0x00000400
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	200000f8 	.word	0x200000f8

080007e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000816:	f7ff ffe5 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f001 f865 	bl	80018e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fde1 	bl	80003e4 <main>
  bx lr
 8000822:	4770      	bx	lr
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800082c:	080022c0 	.word	0x080022c0
  ldr r2, =_sbss
 8000830:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000834:	200000f8 	.word	0x200000f8

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x28>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f92b 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	200f      	movs	r0, #15
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff fef6 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f935 	bl	8000af6 <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	f000 f90b 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200000e4 	.word	0x200000e4

080008ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	200000e4 	.word	0x200000e4

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff fff0 	bl	80008ec <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffe0 	bl	80008ec <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	f7ff ff90 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff49 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff5e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffb0 	bl	8000a64 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e169      	b.n	8000df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8158 	bne.w	8000df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a9a      	ldr	r2, [pc, #616]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d05e      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b4c:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d875      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b52:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d058      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b58:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d86f      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b5e:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d052      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b64:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d869      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b6a:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d04c      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b70:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d863      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b76:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d046      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d85d      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d82a      	bhi.n	8000bdc <HAL_GPIO_Init+0xcc>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d859      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <HAL_GPIO_Init+0x80>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000be5 	.word	0x08000be5
 8000b98:	08000bf7 	.word	0x08000bf7
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000c3f 	.word	0x08000c3f
 8000ba4:	08000c3f 	.word	0x08000c3f
 8000ba8:	08000c3f 	.word	0x08000c3f
 8000bac:	08000c3f 	.word	0x08000c3f
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c3f 	.word	0x08000c3f
 8000bb8:	08000c3f 	.word	0x08000c3f
 8000bbc:	08000c3f 	.word	0x08000c3f
 8000bc0:	08000c3f 	.word	0x08000c3f
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c3f 	.word	0x08000c3f
 8000bcc:	08000c3f 	.word	0x08000c3f
 8000bd0:	08000c3f 	.word	0x08000c3f
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c01 	.word	0x08000c01
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <HAL_GPIO_Init+0x2b4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e02c      	b.n	8000c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e029      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e024      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e01f      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	330c      	adds	r3, #12
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e01a      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c12:	2304      	movs	r3, #4
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e013      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d105      	bne.n	8000c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	611a      	str	r2, [r3, #16]
          break;
 8000c2a:	e009      	b.n	8000c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	615a      	str	r2, [r3, #20]
          break;
 8000c36:	e003      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          break;
 8000c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	d801      	bhi.n	8000c4a <HAL_GPIO_Init+0x13a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	e001      	b.n	8000c4e <HAL_GPIO_Init+0x13e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	; 0xff
 8000c54:	d802      	bhi.n	8000c5c <HAL_GPIO_Init+0x14c>
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x152>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	210f      	movs	r1, #15
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	6a39      	ldr	r1, [r7, #32]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_GPIO_Init+0x2c0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d013      	beq.n	8000cfc <HAL_GPIO_Init+0x1ec>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00d      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e8>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <HAL_GPIO_Init+0x2c8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	; (8000ddc <HAL_GPIO_Init+0x2cc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_GPIO_Init+0x1e0>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0e:	492f      	ldr	r1, [pc, #188]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	492c      	ldr	r1, [pc, #176]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4922      	ldr	r1, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	491e      	ldr	r1, [pc, #120]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4918      	ldr	r1, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4914      	ldr	r1, [pc, #80]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	490e      	ldr	r1, [pc, #56]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
 8000dac:	e021      	b.n	8000df2 <HAL_GPIO_Init+0x2e2>
 8000dae:	bf00      	nop
 8000db0:	10320000 	.word	0x10320000
 8000db4:	10310000 	.word	0x10310000
 8000db8:	10220000 	.word	0x10220000
 8000dbc:	10210000 	.word	0x10210000
 8000dc0:	10120000 	.word	0x10120000
 8000dc4:	10110000 	.word	0x10110000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f ae8e 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	372c      	adds	r7, #44	; 0x2c
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	611a      	str	r2, [r3, #16]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e12b      	b.n	80010b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fc1c 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eac:	f000 fce4 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8000eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a81      	ldr	r2, [pc, #516]	; (80010bc <HAL_I2C_Init+0x274>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d807      	bhi.n	8000ecc <HAL_I2C_Init+0x84>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4a80      	ldr	r2, [pc, #512]	; (80010c0 <HAL_I2C_Init+0x278>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	bf94      	ite	ls
 8000ec4:	2301      	movls	r3, #1
 8000ec6:	2300      	movhi	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	e006      	b.n	8000eda <HAL_I2C_Init+0x92>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4a7d      	ldr	r2, [pc, #500]	; (80010c4 <HAL_I2C_Init+0x27c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	bf94      	ite	ls
 8000ed4:	2301      	movls	r3, #1
 8000ed6:	2300      	movhi	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0e7      	b.n	80010b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4a78      	ldr	r2, [pc, #480]	; (80010c8 <HAL_I2C_Init+0x280>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	0c9b      	lsrs	r3, r3, #18
 8000eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a6a      	ldr	r2, [pc, #424]	; (80010bc <HAL_I2C_Init+0x274>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d802      	bhi.n	8000f1c <HAL_I2C_Init+0xd4>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	e009      	b.n	8000f30 <HAL_I2C_Init+0xe8>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_I2C_Init+0x284>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	099b      	lsrs	r3, r3, #6
 8000f2e:	3301      	adds	r3, #1
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	495c      	ldr	r1, [pc, #368]	; (80010bc <HAL_I2C_Init+0x274>)
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d819      	bhi.n	8000f84 <HAL_I2C_Init+0x13c>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1e59      	subs	r1, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f5e:	1c59      	adds	r1, r3, #1
 8000f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f64:	400b      	ands	r3, r1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <HAL_I2C_Init+0x138>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1e59      	subs	r1, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	e051      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e04f      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_I2C_Init+0x168>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	1e58      	subs	r0, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6859      	ldr	r1, [r3, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	440b      	add	r3, r1
 8000f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	e012      	b.n	8000fd6 <HAL_I2C_Init+0x18e>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1e58      	subs	r0, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6859      	ldr	r1, [r3, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	0099      	lsls	r1, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_Init+0x196>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e022      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <HAL_I2C_Init+0x1bc>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1e58      	subs	r0, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001002:	e00f      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1e58      	subs	r0, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	0099      	lsls	r1, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	fbb0 f3f3 	udiv	r3, r0, r3
 800101a:	3301      	adds	r3, #1
 800101c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	6809      	ldr	r1, [r1, #0]
 8001028:	4313      	orrs	r3, r2
 800102a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6911      	ldr	r1, [r2, #16]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68d2      	ldr	r2, [r2, #12]
 800105e:	4311      	orrs	r1, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	430b      	orrs	r3, r1
 8001066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2220      	movs	r2, #32
 800109e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	000186a0 	.word	0x000186a0
 80010c0:	001e847f 	.word	0x001e847f
 80010c4:	003d08ff 	.word	0x003d08ff
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	10624dd3 	.word	0x10624dd3

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e272      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00c      	beq.n	8001116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fc:	4b8f      	ldr	r3, [pc, #572]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d112      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
 8001108:	4b8c      	ldr	r3, [pc, #560]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001114:	d10b      	bne.n	800112e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001116:	4b89      	ldr	r3, [pc, #548]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d06c      	beq.n	80011fc <HAL_RCC_OscConfig+0x12c>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d168      	bne.n	80011fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e24c      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x76>
 8001138:	4b80      	ldr	r3, [pc, #512]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a7f      	ldr	r2, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e02e      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x98>
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7a      	ldr	r2, [pc, #488]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a77      	ldr	r2, [pc, #476]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0xbc>
 8001172:	4b72      	ldr	r3, [pc, #456]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a71      	ldr	r2, [pc, #452]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a67      	ldr	r2, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb9e 	bl	80008ec <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fb9a 	bl	80008ec <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e200      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe4>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb8a 	bl	80008ec <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fb86 	bl	80008ec <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1ec      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x10c>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c0      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4939      	ldr	r1, [pc, #228]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fb3f 	bl	80008ec <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fb3b 	bl	80008ec <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4927      	ldr	r1, [pc, #156]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb1e 	bl	80008ec <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fb1a 	bl	80008ec <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e180      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d03a      	beq.n	8001354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fafe 	bl	80008ec <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fafa 	bl	80008ec <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e160      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_RCC_OscConfig+0x26c>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fac4 	bl	80018a0 <RCC_Delay>
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fae4 	bl	80008ec <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	e00f      	b.n	8001348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fae0 	bl	80008ec <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d908      	bls.n	8001348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e146      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	42420000 	.word	0x42420000
 8001344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e9      	bne.n	8001328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a6 	beq.w	80014ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a87      	ldr	r2, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a7e      	ldr	r2, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff faa1 	bl	80008ec <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff fa9d 	bl	80008ec <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e103      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x4c8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x312>
 80013d4:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e02d      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x334>
 80013ea:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a69      	ldr	r2, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a66      	ldr	r2, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	e01c      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d10c      	bne.n	8001426 <HAL_RCC_OscConfig+0x356>
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a60      	ldr	r2, [pc, #384]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0x36e>
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a5a      	ldr	r2, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d015      	beq.n	8001472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fa51 	bl	80008ec <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fa4d 	bl	80008ec <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0b1      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ee      	beq.n	800144e <HAL_RCC_OscConfig+0x37e>
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fa3b 	bl	80008ec <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa37 	bl	80008ec <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e09b      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ee      	bne.n	800147a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8087 	beq.w	80015c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d061      	beq.n	8001588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d146      	bne.n	800155a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fa0b 	bl	80008ec <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fa07 	bl	80008ec <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e06d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d108      	bne.n	8001514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4921      	ldr	r1, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a19      	ldr	r1, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	430b      	orrs	r3, r1
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff f9db 	bl	80008ec <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff f9d7 	bl	80008ec <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x46a>
 8001558:	e035      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x4cc>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f9c4 	bl	80008ec <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f9c0 	bl	80008ec <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e026      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x498>
 8001586:	e01e      	b.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e019      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x500>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0d0      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d910      	bls.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 0207 	bic.w	r2, r3, #7
 80015fe:	4965      	ldr	r1, [pc, #404]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d040      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e073      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06b      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f023 0203 	bic.w	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4936      	ldr	r1, [pc, #216]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff f912 	bl	80008ec <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016cc:	f7ff f90e 	bl	80008ec <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e053      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 020c 	and.w	r2, r3, #12
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1eb      	bne.n	80016cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d210      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1cc>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f870 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000
 8001798:	40021000 	.word	0x40021000
 800179c:	0800226c 	.word	0x0800226c
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	b490      	push	{r4, r7}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RCC_GetSysClockFreq+0xac>)
 80017b0:	1d3c      	adds	r4, r7, #4
 80017b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017b8:	f240 2301 	movw	r3, #513	; 0x201
 80017bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x46>
 80017e6:	e02b      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ea:	623b      	str	r3, [r7, #32]
      break;
 80017ec:	e02b      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3328      	adds	r3, #40	; 0x28
 80017f8:	443b      	add	r3, r7
 80017fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d012      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb0>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0c5b      	lsrs	r3, r3, #17
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	3328      	adds	r3, #40	; 0x28
 8001816:	443b      	add	r3, r7
 8001818:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800181c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001822:	fb03 f202 	mul.w	r2, r3, r2
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	e004      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	623b      	str	r3, [r7, #32]
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001842:	623b      	str	r3, [r7, #32]
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	6a3b      	ldr	r3, [r7, #32]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bc90      	pop	{r4, r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	0800225c 	.word	0x0800225c
 8001858:	40021000 	.word	0x40021000
 800185c:	007a1200 	.word	0x007a1200
 8001860:	003d0900 	.word	0x003d0900

08001864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <HAL_RCC_GetHCLKFreq+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff2 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	0800227c 	.word	0x0800227c

080018a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <RCC_Delay+0x34>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <RCC_Delay+0x38>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0a5b      	lsrs	r3, r3, #9
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018bc:	bf00      	nop
  }
  while (Delay --);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <RCC_Delay+0x1c>
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000
 80018d8:	10624dd3 	.word	0x10624dd3

080018dc <__errno>:
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <__errno+0x8>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000000c 	.word	0x2000000c

080018e8 <__libc_init_array>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	2600      	movs	r6, #0
 80018ec:	4d0c      	ldr	r5, [pc, #48]	; (8001920 <__libc_init_array+0x38>)
 80018ee:	4c0d      	ldr	r4, [pc, #52]	; (8001924 <__libc_init_array+0x3c>)
 80018f0:	1b64      	subs	r4, r4, r5
 80018f2:	10a4      	asrs	r4, r4, #2
 80018f4:	42a6      	cmp	r6, r4
 80018f6:	d109      	bne.n	800190c <__libc_init_array+0x24>
 80018f8:	f000 fc9c 	bl	8002234 <_init>
 80018fc:	2600      	movs	r6, #0
 80018fe:	4d0a      	ldr	r5, [pc, #40]	; (8001928 <__libc_init_array+0x40>)
 8001900:	4c0a      	ldr	r4, [pc, #40]	; (800192c <__libc_init_array+0x44>)
 8001902:	1b64      	subs	r4, r4, r5
 8001904:	10a4      	asrs	r4, r4, #2
 8001906:	42a6      	cmp	r6, r4
 8001908:	d105      	bne.n	8001916 <__libc_init_array+0x2e>
 800190a:	bd70      	pop	{r4, r5, r6, pc}
 800190c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001910:	4798      	blx	r3
 8001912:	3601      	adds	r6, #1
 8001914:	e7ee      	b.n	80018f4 <__libc_init_array+0xc>
 8001916:	f855 3b04 	ldr.w	r3, [r5], #4
 800191a:	4798      	blx	r3
 800191c:	3601      	adds	r6, #1
 800191e:	e7f2      	b.n	8001906 <__libc_init_array+0x1e>
 8001920:	080022b8 	.word	0x080022b8
 8001924:	080022b8 	.word	0x080022b8
 8001928:	080022b8 	.word	0x080022b8
 800192c:	080022bc 	.word	0x080022bc

08001930 <memset>:
 8001930:	4603      	mov	r3, r0
 8001932:	4402      	add	r2, r0
 8001934:	4293      	cmp	r3, r2
 8001936:	d100      	bne.n	800193a <memset+0xa>
 8001938:	4770      	bx	lr
 800193a:	f803 1b01 	strb.w	r1, [r3], #1
 800193e:	e7f9      	b.n	8001934 <memset+0x4>

08001940 <siprintf>:
 8001940:	b40e      	push	{r1, r2, r3}
 8001942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001946:	b500      	push	{lr}
 8001948:	b09c      	sub	sp, #112	; 0x70
 800194a:	ab1d      	add	r3, sp, #116	; 0x74
 800194c:	9002      	str	r0, [sp, #8]
 800194e:	9006      	str	r0, [sp, #24]
 8001950:	9107      	str	r1, [sp, #28]
 8001952:	9104      	str	r1, [sp, #16]
 8001954:	4808      	ldr	r0, [pc, #32]	; (8001978 <siprintf+0x38>)
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <siprintf+0x3c>)
 8001958:	f853 2b04 	ldr.w	r2, [r3], #4
 800195c:	9105      	str	r1, [sp, #20]
 800195e:	6800      	ldr	r0, [r0, #0]
 8001960:	a902      	add	r1, sp, #8
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	f000 f868 	bl	8001a38 <_svfiprintf_r>
 8001968:	2200      	movs	r2, #0
 800196a:	9b02      	ldr	r3, [sp, #8]
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	b01c      	add	sp, #112	; 0x70
 8001970:	f85d eb04 	ldr.w	lr, [sp], #4
 8001974:	b003      	add	sp, #12
 8001976:	4770      	bx	lr
 8001978:	2000000c 	.word	0x2000000c
 800197c:	ffff0208 	.word	0xffff0208

08001980 <__ssputs_r>:
 8001980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001984:	688e      	ldr	r6, [r1, #8]
 8001986:	4682      	mov	sl, r0
 8001988:	429e      	cmp	r6, r3
 800198a:	460c      	mov	r4, r1
 800198c:	4690      	mov	r8, r2
 800198e:	461f      	mov	r7, r3
 8001990:	d838      	bhi.n	8001a04 <__ssputs_r+0x84>
 8001992:	898a      	ldrh	r2, [r1, #12]
 8001994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001998:	d032      	beq.n	8001a00 <__ssputs_r+0x80>
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	6909      	ldr	r1, [r1, #16]
 800199e:	3301      	adds	r3, #1
 80019a0:	eba5 0901 	sub.w	r9, r5, r1
 80019a4:	6965      	ldr	r5, [r4, #20]
 80019a6:	444b      	add	r3, r9
 80019a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019b0:	106d      	asrs	r5, r5, #1
 80019b2:	429d      	cmp	r5, r3
 80019b4:	bf38      	it	cc
 80019b6:	461d      	movcc	r5, r3
 80019b8:	0553      	lsls	r3, r2, #21
 80019ba:	d531      	bpl.n	8001a20 <__ssputs_r+0xa0>
 80019bc:	4629      	mov	r1, r5
 80019be:	f000 fb6f 	bl	80020a0 <_malloc_r>
 80019c2:	4606      	mov	r6, r0
 80019c4:	b950      	cbnz	r0, 80019dc <__ssputs_r+0x5c>
 80019c6:	230c      	movs	r3, #12
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019cc:	f8ca 3000 	str.w	r3, [sl]
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d6:	81a3      	strh	r3, [r4, #12]
 80019d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019dc:	464a      	mov	r2, r9
 80019de:	6921      	ldr	r1, [r4, #16]
 80019e0:	f000 face 	bl	8001f80 <memcpy>
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ee:	81a3      	strh	r3, [r4, #12]
 80019f0:	6126      	str	r6, [r4, #16]
 80019f2:	444e      	add	r6, r9
 80019f4:	6026      	str	r6, [r4, #0]
 80019f6:	463e      	mov	r6, r7
 80019f8:	6165      	str	r5, [r4, #20]
 80019fa:	eba5 0509 	sub.w	r5, r5, r9
 80019fe:	60a5      	str	r5, [r4, #8]
 8001a00:	42be      	cmp	r6, r7
 8001a02:	d900      	bls.n	8001a06 <__ssputs_r+0x86>
 8001a04:	463e      	mov	r6, r7
 8001a06:	4632      	mov	r2, r6
 8001a08:	4641      	mov	r1, r8
 8001a0a:	6820      	ldr	r0, [r4, #0]
 8001a0c:	f000 fac6 	bl	8001f9c <memmove>
 8001a10:	68a3      	ldr	r3, [r4, #8]
 8001a12:	2000      	movs	r0, #0
 8001a14:	1b9b      	subs	r3, r3, r6
 8001a16:	60a3      	str	r3, [r4, #8]
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	4433      	add	r3, r6
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	e7db      	b.n	80019d8 <__ssputs_r+0x58>
 8001a20:	462a      	mov	r2, r5
 8001a22:	f000 fbb1 	bl	8002188 <_realloc_r>
 8001a26:	4606      	mov	r6, r0
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d1e1      	bne.n	80019f0 <__ssputs_r+0x70>
 8001a2c:	4650      	mov	r0, sl
 8001a2e:	6921      	ldr	r1, [r4, #16]
 8001a30:	f000 face 	bl	8001fd0 <_free_r>
 8001a34:	e7c7      	b.n	80019c6 <__ssputs_r+0x46>
	...

08001a38 <_svfiprintf_r>:
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3c:	4698      	mov	r8, r3
 8001a3e:	898b      	ldrh	r3, [r1, #12]
 8001a40:	4607      	mov	r7, r0
 8001a42:	061b      	lsls	r3, r3, #24
 8001a44:	460d      	mov	r5, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	b09d      	sub	sp, #116	; 0x74
 8001a4a:	d50e      	bpl.n	8001a6a <_svfiprintf_r+0x32>
 8001a4c:	690b      	ldr	r3, [r1, #16]
 8001a4e:	b963      	cbnz	r3, 8001a6a <_svfiprintf_r+0x32>
 8001a50:	2140      	movs	r1, #64	; 0x40
 8001a52:	f000 fb25 	bl	80020a0 <_malloc_r>
 8001a56:	6028      	str	r0, [r5, #0]
 8001a58:	6128      	str	r0, [r5, #16]
 8001a5a:	b920      	cbnz	r0, 8001a66 <_svfiprintf_r+0x2e>
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	e0d1      	b.n	8001c0a <_svfiprintf_r+0x1d2>
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	616b      	str	r3, [r5, #20]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a6e:	2320      	movs	r3, #32
 8001a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a74:	2330      	movs	r3, #48	; 0x30
 8001a76:	f04f 0901 	mov.w	r9, #1
 8001a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001c24 <_svfiprintf_r+0x1ec>
 8001a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a86:	4623      	mov	r3, r4
 8001a88:	469a      	mov	sl, r3
 8001a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a8e:	b10a      	cbz	r2, 8001a94 <_svfiprintf_r+0x5c>
 8001a90:	2a25      	cmp	r2, #37	; 0x25
 8001a92:	d1f9      	bne.n	8001a88 <_svfiprintf_r+0x50>
 8001a94:	ebba 0b04 	subs.w	fp, sl, r4
 8001a98:	d00b      	beq.n	8001ab2 <_svfiprintf_r+0x7a>
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	f7ff ff6d 	bl	8001980 <__ssputs_r>
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	f000 80aa 	beq.w	8001c00 <_svfiprintf_r+0x1c8>
 8001aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001aae:	445a      	add	r2, fp
 8001ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8001ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a2 	beq.w	8001c00 <_svfiprintf_r+0x1c8>
 8001abc:	2300      	movs	r3, #0
 8001abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ac6:	f10a 0a01 	add.w	sl, sl, #1
 8001aca:	9304      	str	r3, [sp, #16]
 8001acc:	9307      	str	r3, [sp, #28]
 8001ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8001ad4:	4654      	mov	r4, sl
 8001ad6:	2205      	movs	r2, #5
 8001ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001adc:	4851      	ldr	r0, [pc, #324]	; (8001c24 <_svfiprintf_r+0x1ec>)
 8001ade:	f000 fa41 	bl	8001f64 <memchr>
 8001ae2:	9a04      	ldr	r2, [sp, #16]
 8001ae4:	b9d8      	cbnz	r0, 8001b1e <_svfiprintf_r+0xe6>
 8001ae6:	06d0      	lsls	r0, r2, #27
 8001ae8:	bf44      	itt	mi
 8001aea:	2320      	movmi	r3, #32
 8001aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001af0:	0711      	lsls	r1, r2, #28
 8001af2:	bf44      	itt	mi
 8001af4:	232b      	movmi	r3, #43	; 0x2b
 8001af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001afa:	f89a 3000 	ldrb.w	r3, [sl]
 8001afe:	2b2a      	cmp	r3, #42	; 0x2a
 8001b00:	d015      	beq.n	8001b2e <_svfiprintf_r+0xf6>
 8001b02:	4654      	mov	r4, sl
 8001b04:	2000      	movs	r0, #0
 8001b06:	f04f 0c0a 	mov.w	ip, #10
 8001b0a:	9a07      	ldr	r2, [sp, #28]
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b12:	3b30      	subs	r3, #48	; 0x30
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d94e      	bls.n	8001bb6 <_svfiprintf_r+0x17e>
 8001b18:	b1b0      	cbz	r0, 8001b48 <_svfiprintf_r+0x110>
 8001b1a:	9207      	str	r2, [sp, #28]
 8001b1c:	e014      	b.n	8001b48 <_svfiprintf_r+0x110>
 8001b1e:	eba0 0308 	sub.w	r3, r0, r8
 8001b22:	fa09 f303 	lsl.w	r3, r9, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	46a2      	mov	sl, r4
 8001b2a:	9304      	str	r3, [sp, #16]
 8001b2c:	e7d2      	b.n	8001ad4 <_svfiprintf_r+0x9c>
 8001b2e:	9b03      	ldr	r3, [sp, #12]
 8001b30:	1d19      	adds	r1, r3, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	9103      	str	r1, [sp, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bfbb      	ittet	lt
 8001b3a:	425b      	neglt	r3, r3
 8001b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8001b40:	9307      	strge	r3, [sp, #28]
 8001b42:	9307      	strlt	r3, [sp, #28]
 8001b44:	bfb8      	it	lt
 8001b46:	9204      	strlt	r2, [sp, #16]
 8001b48:	7823      	ldrb	r3, [r4, #0]
 8001b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b4c:	d10c      	bne.n	8001b68 <_svfiprintf_r+0x130>
 8001b4e:	7863      	ldrb	r3, [r4, #1]
 8001b50:	2b2a      	cmp	r3, #42	; 0x2a
 8001b52:	d135      	bne.n	8001bc0 <_svfiprintf_r+0x188>
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	3402      	adds	r4, #2
 8001b58:	1d1a      	adds	r2, r3, #4
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	9203      	str	r2, [sp, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bfb8      	it	lt
 8001b62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b66:	9305      	str	r3, [sp, #20]
 8001b68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001c28 <_svfiprintf_r+0x1f0>
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4650      	mov	r0, sl
 8001b70:	7821      	ldrb	r1, [r4, #0]
 8001b72:	f000 f9f7 	bl	8001f64 <memchr>
 8001b76:	b140      	cbz	r0, 8001b8a <_svfiprintf_r+0x152>
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	eba0 000a 	sub.w	r0, r0, sl
 8001b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8001b82:	9b04      	ldr	r3, [sp, #16]
 8001b84:	3401      	adds	r4, #1
 8001b86:	4303      	orrs	r3, r0
 8001b88:	9304      	str	r3, [sp, #16]
 8001b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b8e:	2206      	movs	r2, #6
 8001b90:	4826      	ldr	r0, [pc, #152]	; (8001c2c <_svfiprintf_r+0x1f4>)
 8001b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b96:	f000 f9e5 	bl	8001f64 <memchr>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d038      	beq.n	8001c10 <_svfiprintf_r+0x1d8>
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <_svfiprintf_r+0x1f8>)
 8001ba0:	bb1b      	cbnz	r3, 8001bea <_svfiprintf_r+0x1b2>
 8001ba2:	9b03      	ldr	r3, [sp, #12]
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	3308      	adds	r3, #8
 8001bac:	9303      	str	r3, [sp, #12]
 8001bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bb0:	4433      	add	r3, r6
 8001bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8001bb4:	e767      	b.n	8001a86 <_svfiprintf_r+0x4e>
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bbe:	e7a5      	b.n	8001b0c <_svfiprintf_r+0xd4>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f04f 0c0a 	mov.w	ip, #10
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	3401      	adds	r4, #1
 8001bca:	9305      	str	r3, [sp, #20]
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bd2:	3a30      	subs	r2, #48	; 0x30
 8001bd4:	2a09      	cmp	r2, #9
 8001bd6:	d903      	bls.n	8001be0 <_svfiprintf_r+0x1a8>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0c5      	beq.n	8001b68 <_svfiprintf_r+0x130>
 8001bdc:	9105      	str	r1, [sp, #20]
 8001bde:	e7c3      	b.n	8001b68 <_svfiprintf_r+0x130>
 8001be0:	4604      	mov	r4, r0
 8001be2:	2301      	movs	r3, #1
 8001be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001be8:	e7f0      	b.n	8001bcc <_svfiprintf_r+0x194>
 8001bea:	ab03      	add	r3, sp, #12
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	462a      	mov	r2, r5
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_svfiprintf_r+0x1fc>)
 8001bf4:	a904      	add	r1, sp, #16
 8001bf6:	f3af 8000 	nop.w
 8001bfa:	1c42      	adds	r2, r0, #1
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	d1d6      	bne.n	8001bae <_svfiprintf_r+0x176>
 8001c00:	89ab      	ldrh	r3, [r5, #12]
 8001c02:	065b      	lsls	r3, r3, #25
 8001c04:	f53f af2c 	bmi.w	8001a60 <_svfiprintf_r+0x28>
 8001c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c0a:	b01d      	add	sp, #116	; 0x74
 8001c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c10:	ab03      	add	r3, sp, #12
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	462a      	mov	r2, r5
 8001c16:	4638      	mov	r0, r7
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <_svfiprintf_r+0x1fc>)
 8001c1a:	a904      	add	r1, sp, #16
 8001c1c:	f000 f87c 	bl	8001d18 <_printf_i>
 8001c20:	e7eb      	b.n	8001bfa <_svfiprintf_r+0x1c2>
 8001c22:	bf00      	nop
 8001c24:	08002284 	.word	0x08002284
 8001c28:	0800228a 	.word	0x0800228a
 8001c2c:	0800228e 	.word	0x0800228e
 8001c30:	00000000 	.word	0x00000000
 8001c34:	08001981 	.word	0x08001981

08001c38 <_printf_common>:
 8001c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c3c:	4616      	mov	r6, r2
 8001c3e:	4699      	mov	r9, r3
 8001c40:	688a      	ldr	r2, [r1, #8]
 8001c42:	690b      	ldr	r3, [r1, #16]
 8001c44:	4607      	mov	r7, r0
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bfb8      	it	lt
 8001c4a:	4613      	movlt	r3, r2
 8001c4c:	6033      	str	r3, [r6, #0]
 8001c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c52:	460c      	mov	r4, r1
 8001c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c58:	b10a      	cbz	r2, 8001c5e <_printf_common+0x26>
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	6033      	str	r3, [r6, #0]
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	0699      	lsls	r1, r3, #26
 8001c62:	bf42      	ittt	mi
 8001c64:	6833      	ldrmi	r3, [r6, #0]
 8001c66:	3302      	addmi	r3, #2
 8001c68:	6033      	strmi	r3, [r6, #0]
 8001c6a:	6825      	ldr	r5, [r4, #0]
 8001c6c:	f015 0506 	ands.w	r5, r5, #6
 8001c70:	d106      	bne.n	8001c80 <_printf_common+0x48>
 8001c72:	f104 0a19 	add.w	sl, r4, #25
 8001c76:	68e3      	ldr	r3, [r4, #12]
 8001c78:	6832      	ldr	r2, [r6, #0]
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	42ab      	cmp	r3, r5
 8001c7e:	dc28      	bgt.n	8001cd2 <_printf_common+0x9a>
 8001c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c84:	1e13      	subs	r3, r2, #0
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	bf18      	it	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	0692      	lsls	r2, r2, #26
 8001c8e:	d42d      	bmi.n	8001cec <_printf_common+0xb4>
 8001c90:	4649      	mov	r1, r9
 8001c92:	4638      	mov	r0, r7
 8001c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c98:	47c0      	blx	r8
 8001c9a:	3001      	adds	r0, #1
 8001c9c:	d020      	beq.n	8001ce0 <_printf_common+0xa8>
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	68e5      	ldr	r5, [r4, #12]
 8001ca2:	f003 0306 	and.w	r3, r3, #6
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf18      	it	ne
 8001caa:	2500      	movne	r5, #0
 8001cac:	6832      	ldr	r2, [r6, #0]
 8001cae:	f04f 0600 	mov.w	r6, #0
 8001cb2:	68a3      	ldr	r3, [r4, #8]
 8001cb4:	bf08      	it	eq
 8001cb6:	1aad      	subeq	r5, r5, r2
 8001cb8:	6922      	ldr	r2, [r4, #16]
 8001cba:	bf08      	it	eq
 8001cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bfc4      	itt	gt
 8001cc4:	1a9b      	subgt	r3, r3, r2
 8001cc6:	18ed      	addgt	r5, r5, r3
 8001cc8:	341a      	adds	r4, #26
 8001cca:	42b5      	cmp	r5, r6
 8001ccc:	d11a      	bne.n	8001d04 <_printf_common+0xcc>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e008      	b.n	8001ce4 <_printf_common+0xac>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	4638      	mov	r0, r7
 8001cda:	47c0      	blx	r8
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d103      	bne.n	8001ce8 <_printf_common+0xb0>
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce8:	3501      	adds	r5, #1
 8001cea:	e7c4      	b.n	8001c76 <_printf_common+0x3e>
 8001cec:	2030      	movs	r0, #48	; 0x30
 8001cee:	18e1      	adds	r1, r4, r3
 8001cf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cfa:	4422      	add	r2, r4
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d02:	e7c5      	b.n	8001c90 <_printf_common+0x58>
 8001d04:	2301      	movs	r3, #1
 8001d06:	4622      	mov	r2, r4
 8001d08:	4649      	mov	r1, r9
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	47c0      	blx	r8
 8001d0e:	3001      	adds	r0, #1
 8001d10:	d0e6      	beq.n	8001ce0 <_printf_common+0xa8>
 8001d12:	3601      	adds	r6, #1
 8001d14:	e7d9      	b.n	8001cca <_printf_common+0x92>
	...

08001d18 <_printf_i>:
 8001d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d1c:	7e0f      	ldrb	r7, [r1, #24]
 8001d1e:	4691      	mov	r9, r2
 8001d20:	2f78      	cmp	r7, #120	; 0x78
 8001d22:	4680      	mov	r8, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	469a      	mov	sl, r3
 8001d28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d2e:	d807      	bhi.n	8001d40 <_printf_i+0x28>
 8001d30:	2f62      	cmp	r7, #98	; 0x62
 8001d32:	d80a      	bhi.n	8001d4a <_printf_i+0x32>
 8001d34:	2f00      	cmp	r7, #0
 8001d36:	f000 80d9 	beq.w	8001eec <_printf_i+0x1d4>
 8001d3a:	2f58      	cmp	r7, #88	; 0x58
 8001d3c:	f000 80a4 	beq.w	8001e88 <_printf_i+0x170>
 8001d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d48:	e03a      	b.n	8001dc0 <_printf_i+0xa8>
 8001d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d4e:	2b15      	cmp	r3, #21
 8001d50:	d8f6      	bhi.n	8001d40 <_printf_i+0x28>
 8001d52:	a101      	add	r1, pc, #4	; (adr r1, 8001d58 <_printf_i+0x40>)
 8001d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d58:	08001db1 	.word	0x08001db1
 8001d5c:	08001dc5 	.word	0x08001dc5
 8001d60:	08001d41 	.word	0x08001d41
 8001d64:	08001d41 	.word	0x08001d41
 8001d68:	08001d41 	.word	0x08001d41
 8001d6c:	08001d41 	.word	0x08001d41
 8001d70:	08001dc5 	.word	0x08001dc5
 8001d74:	08001d41 	.word	0x08001d41
 8001d78:	08001d41 	.word	0x08001d41
 8001d7c:	08001d41 	.word	0x08001d41
 8001d80:	08001d41 	.word	0x08001d41
 8001d84:	08001ed3 	.word	0x08001ed3
 8001d88:	08001df5 	.word	0x08001df5
 8001d8c:	08001eb5 	.word	0x08001eb5
 8001d90:	08001d41 	.word	0x08001d41
 8001d94:	08001d41 	.word	0x08001d41
 8001d98:	08001ef5 	.word	0x08001ef5
 8001d9c:	08001d41 	.word	0x08001d41
 8001da0:	08001df5 	.word	0x08001df5
 8001da4:	08001d41 	.word	0x08001d41
 8001da8:	08001d41 	.word	0x08001d41
 8001dac:	08001ebd 	.word	0x08001ebd
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	1d1a      	adds	r2, r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	602a      	str	r2, [r5, #0]
 8001db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0a4      	b.n	8001f0e <_printf_i+0x1f6>
 8001dc4:	6820      	ldr	r0, [r4, #0]
 8001dc6:	6829      	ldr	r1, [r5, #0]
 8001dc8:	0606      	lsls	r6, r0, #24
 8001dca:	f101 0304 	add.w	r3, r1, #4
 8001dce:	d50a      	bpl.n	8001de6 <_printf_i+0xce>
 8001dd0:	680e      	ldr	r6, [r1, #0]
 8001dd2:	602b      	str	r3, [r5, #0]
 8001dd4:	2e00      	cmp	r6, #0
 8001dd6:	da03      	bge.n	8001de0 <_printf_i+0xc8>
 8001dd8:	232d      	movs	r3, #45	; 0x2d
 8001dda:	4276      	negs	r6, r6
 8001ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001de0:	230a      	movs	r3, #10
 8001de2:	485e      	ldr	r0, [pc, #376]	; (8001f5c <_printf_i+0x244>)
 8001de4:	e019      	b.n	8001e1a <_printf_i+0x102>
 8001de6:	680e      	ldr	r6, [r1, #0]
 8001de8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001dec:	602b      	str	r3, [r5, #0]
 8001dee:	bf18      	it	ne
 8001df0:	b236      	sxthne	r6, r6
 8001df2:	e7ef      	b.n	8001dd4 <_printf_i+0xbc>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	6820      	ldr	r0, [r4, #0]
 8001df8:	1d19      	adds	r1, r3, #4
 8001dfa:	6029      	str	r1, [r5, #0]
 8001dfc:	0601      	lsls	r1, r0, #24
 8001dfe:	d501      	bpl.n	8001e04 <_printf_i+0xec>
 8001e00:	681e      	ldr	r6, [r3, #0]
 8001e02:	e002      	b.n	8001e0a <_printf_i+0xf2>
 8001e04:	0646      	lsls	r6, r0, #25
 8001e06:	d5fb      	bpl.n	8001e00 <_printf_i+0xe8>
 8001e08:	881e      	ldrh	r6, [r3, #0]
 8001e0a:	2f6f      	cmp	r7, #111	; 0x6f
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2308      	moveq	r3, #8
 8001e10:	230a      	movne	r3, #10
 8001e12:	4852      	ldr	r0, [pc, #328]	; (8001f5c <_printf_i+0x244>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e1a:	6865      	ldr	r5, [r4, #4]
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	bfa8      	it	ge
 8001e20:	6821      	ldrge	r1, [r4, #0]
 8001e22:	60a5      	str	r5, [r4, #8]
 8001e24:	bfa4      	itt	ge
 8001e26:	f021 0104 	bicge.w	r1, r1, #4
 8001e2a:	6021      	strge	r1, [r4, #0]
 8001e2c:	b90e      	cbnz	r6, 8001e32 <_printf_i+0x11a>
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	d04d      	beq.n	8001ece <_printf_i+0x1b6>
 8001e32:	4615      	mov	r5, r2
 8001e34:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e38:	fb03 6711 	mls	r7, r3, r1, r6
 8001e3c:	5dc7      	ldrb	r7, [r0, r7]
 8001e3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e42:	4637      	mov	r7, r6
 8001e44:	42bb      	cmp	r3, r7
 8001e46:	460e      	mov	r6, r1
 8001e48:	d9f4      	bls.n	8001e34 <_printf_i+0x11c>
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d10b      	bne.n	8001e66 <_printf_i+0x14e>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	07de      	lsls	r6, r3, #31
 8001e52:	d508      	bpl.n	8001e66 <_printf_i+0x14e>
 8001e54:	6923      	ldr	r3, [r4, #16]
 8001e56:	6861      	ldr	r1, [r4, #4]
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	bfde      	ittt	le
 8001e5c:	2330      	movle	r3, #48	; 0x30
 8001e5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001e66:	1b52      	subs	r2, r2, r5
 8001e68:	6122      	str	r2, [r4, #16]
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	4640      	mov	r0, r8
 8001e70:	f8cd a000 	str.w	sl, [sp]
 8001e74:	aa03      	add	r2, sp, #12
 8001e76:	f7ff fedf 	bl	8001c38 <_printf_common>
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	d14c      	bne.n	8001f18 <_printf_i+0x200>
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e82:	b004      	add	sp, #16
 8001e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e88:	4834      	ldr	r0, [pc, #208]	; (8001f5c <_printf_i+0x244>)
 8001e8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e8e:	6829      	ldr	r1, [r5, #0]
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e96:	6029      	str	r1, [r5, #0]
 8001e98:	061d      	lsls	r5, r3, #24
 8001e9a:	d514      	bpl.n	8001ec6 <_printf_i+0x1ae>
 8001e9c:	07df      	lsls	r7, r3, #31
 8001e9e:	bf44      	itt	mi
 8001ea0:	f043 0320 	orrmi.w	r3, r3, #32
 8001ea4:	6023      	strmi	r3, [r4, #0]
 8001ea6:	b91e      	cbnz	r6, 8001eb0 <_printf_i+0x198>
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f023 0320 	bic.w	r3, r3, #32
 8001eae:	6023      	str	r3, [r4, #0]
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	e7af      	b.n	8001e14 <_printf_i+0xfc>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f043 0320 	orr.w	r3, r3, #32
 8001eba:	6023      	str	r3, [r4, #0]
 8001ebc:	2378      	movs	r3, #120	; 0x78
 8001ebe:	4828      	ldr	r0, [pc, #160]	; (8001f60 <_printf_i+0x248>)
 8001ec0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ec4:	e7e3      	b.n	8001e8e <_printf_i+0x176>
 8001ec6:	0659      	lsls	r1, r3, #25
 8001ec8:	bf48      	it	mi
 8001eca:	b2b6      	uxthmi	r6, r6
 8001ecc:	e7e6      	b.n	8001e9c <_printf_i+0x184>
 8001ece:	4615      	mov	r5, r2
 8001ed0:	e7bb      	b.n	8001e4a <_printf_i+0x132>
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	6826      	ldr	r6, [r4, #0]
 8001ed6:	1d18      	adds	r0, r3, #4
 8001ed8:	6961      	ldr	r1, [r4, #20]
 8001eda:	6028      	str	r0, [r5, #0]
 8001edc:	0635      	lsls	r5, r6, #24
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	d501      	bpl.n	8001ee6 <_printf_i+0x1ce>
 8001ee2:	6019      	str	r1, [r3, #0]
 8001ee4:	e002      	b.n	8001eec <_printf_i+0x1d4>
 8001ee6:	0670      	lsls	r0, r6, #25
 8001ee8:	d5fb      	bpl.n	8001ee2 <_printf_i+0x1ca>
 8001eea:	8019      	strh	r1, [r3, #0]
 8001eec:	2300      	movs	r3, #0
 8001eee:	4615      	mov	r5, r2
 8001ef0:	6123      	str	r3, [r4, #16]
 8001ef2:	e7ba      	b.n	8001e6a <_printf_i+0x152>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	1d1a      	adds	r2, r3, #4
 8001efa:	602a      	str	r2, [r5, #0]
 8001efc:	681d      	ldr	r5, [r3, #0]
 8001efe:	6862      	ldr	r2, [r4, #4]
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 f82f 	bl	8001f64 <memchr>
 8001f06:	b108      	cbz	r0, 8001f0c <_printf_i+0x1f4>
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	6060      	str	r0, [r4, #4]
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	6123      	str	r3, [r4, #16]
 8001f10:	2300      	movs	r3, #0
 8001f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f16:	e7a8      	b.n	8001e6a <_printf_i+0x152>
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	6923      	ldr	r3, [r4, #16]
 8001f20:	47d0      	blx	sl
 8001f22:	3001      	adds	r0, #1
 8001f24:	d0ab      	beq.n	8001e7e <_printf_i+0x166>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	079b      	lsls	r3, r3, #30
 8001f2a:	d413      	bmi.n	8001f54 <_printf_i+0x23c>
 8001f2c:	68e0      	ldr	r0, [r4, #12]
 8001f2e:	9b03      	ldr	r3, [sp, #12]
 8001f30:	4298      	cmp	r0, r3
 8001f32:	bfb8      	it	lt
 8001f34:	4618      	movlt	r0, r3
 8001f36:	e7a4      	b.n	8001e82 <_printf_i+0x16a>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	4632      	mov	r2, r6
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	4640      	mov	r0, r8
 8001f40:	47d0      	blx	sl
 8001f42:	3001      	adds	r0, #1
 8001f44:	d09b      	beq.n	8001e7e <_printf_i+0x166>
 8001f46:	3501      	adds	r5, #1
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	9903      	ldr	r1, [sp, #12]
 8001f4c:	1a5b      	subs	r3, r3, r1
 8001f4e:	42ab      	cmp	r3, r5
 8001f50:	dcf2      	bgt.n	8001f38 <_printf_i+0x220>
 8001f52:	e7eb      	b.n	8001f2c <_printf_i+0x214>
 8001f54:	2500      	movs	r5, #0
 8001f56:	f104 0619 	add.w	r6, r4, #25
 8001f5a:	e7f5      	b.n	8001f48 <_printf_i+0x230>
 8001f5c:	08002295 	.word	0x08002295
 8001f60:	080022a6 	.word	0x080022a6

08001f64 <memchr>:
 8001f64:	4603      	mov	r3, r0
 8001f66:	b510      	push	{r4, lr}
 8001f68:	b2c9      	uxtb	r1, r1
 8001f6a:	4402      	add	r2, r0
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	d101      	bne.n	8001f76 <memchr+0x12>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e003      	b.n	8001f7e <memchr+0x1a>
 8001f76:	7804      	ldrb	r4, [r0, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	428c      	cmp	r4, r1
 8001f7c:	d1f6      	bne.n	8001f6c <memchr+0x8>
 8001f7e:	bd10      	pop	{r4, pc}

08001f80 <memcpy>:
 8001f80:	440a      	add	r2, r1
 8001f82:	4291      	cmp	r1, r2
 8001f84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001f88:	d100      	bne.n	8001f8c <memcpy+0xc>
 8001f8a:	4770      	bx	lr
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f92:	4291      	cmp	r1, r2
 8001f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f98:	d1f9      	bne.n	8001f8e <memcpy+0xe>
 8001f9a:	bd10      	pop	{r4, pc}

08001f9c <memmove>:
 8001f9c:	4288      	cmp	r0, r1
 8001f9e:	b510      	push	{r4, lr}
 8001fa0:	eb01 0402 	add.w	r4, r1, r2
 8001fa4:	d902      	bls.n	8001fac <memmove+0x10>
 8001fa6:	4284      	cmp	r4, r0
 8001fa8:	4623      	mov	r3, r4
 8001faa:	d807      	bhi.n	8001fbc <memmove+0x20>
 8001fac:	1e43      	subs	r3, r0, #1
 8001fae:	42a1      	cmp	r1, r4
 8001fb0:	d008      	beq.n	8001fc4 <memmove+0x28>
 8001fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001fba:	e7f8      	b.n	8001fae <memmove+0x12>
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4402      	add	r2, r0
 8001fc0:	428a      	cmp	r2, r1
 8001fc2:	d100      	bne.n	8001fc6 <memmove+0x2a>
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001fce:	e7f7      	b.n	8001fc0 <memmove+0x24>

08001fd0 <_free_r>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	2900      	cmp	r1, #0
 8001fd6:	d040      	beq.n	800205a <_free_r+0x8a>
 8001fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fdc:	1f0c      	subs	r4, r1, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bfb8      	it	lt
 8001fe2:	18e4      	addlt	r4, r4, r3
 8001fe4:	f000 f910 	bl	8002208 <__malloc_lock>
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <_free_r+0x8c>)
 8001fea:	6813      	ldr	r3, [r2, #0]
 8001fec:	b933      	cbnz	r3, 8001ffc <_free_r+0x2c>
 8001fee:	6063      	str	r3, [r4, #4]
 8001ff0:	6014      	str	r4, [r2, #0]
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff8:	f000 b90c 	b.w	8002214 <__malloc_unlock>
 8001ffc:	42a3      	cmp	r3, r4
 8001ffe:	d908      	bls.n	8002012 <_free_r+0x42>
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	1821      	adds	r1, r4, r0
 8002004:	428b      	cmp	r3, r1
 8002006:	bf01      	itttt	eq
 8002008:	6819      	ldreq	r1, [r3, #0]
 800200a:	685b      	ldreq	r3, [r3, #4]
 800200c:	1809      	addeq	r1, r1, r0
 800200e:	6021      	streq	r1, [r4, #0]
 8002010:	e7ed      	b.n	8001fee <_free_r+0x1e>
 8002012:	461a      	mov	r2, r3
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	b10b      	cbz	r3, 800201c <_free_r+0x4c>
 8002018:	42a3      	cmp	r3, r4
 800201a:	d9fa      	bls.n	8002012 <_free_r+0x42>
 800201c:	6811      	ldr	r1, [r2, #0]
 800201e:	1850      	adds	r0, r2, r1
 8002020:	42a0      	cmp	r0, r4
 8002022:	d10b      	bne.n	800203c <_free_r+0x6c>
 8002024:	6820      	ldr	r0, [r4, #0]
 8002026:	4401      	add	r1, r0
 8002028:	1850      	adds	r0, r2, r1
 800202a:	4283      	cmp	r3, r0
 800202c:	6011      	str	r1, [r2, #0]
 800202e:	d1e0      	bne.n	8001ff2 <_free_r+0x22>
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4401      	add	r1, r0
 8002036:	6011      	str	r1, [r2, #0]
 8002038:	6053      	str	r3, [r2, #4]
 800203a:	e7da      	b.n	8001ff2 <_free_r+0x22>
 800203c:	d902      	bls.n	8002044 <_free_r+0x74>
 800203e:	230c      	movs	r3, #12
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	e7d6      	b.n	8001ff2 <_free_r+0x22>
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	1821      	adds	r1, r4, r0
 8002048:	428b      	cmp	r3, r1
 800204a:	bf01      	itttt	eq
 800204c:	6819      	ldreq	r1, [r3, #0]
 800204e:	685b      	ldreq	r3, [r3, #4]
 8002050:	1809      	addeq	r1, r1, r0
 8002052:	6021      	streq	r1, [r4, #0]
 8002054:	6063      	str	r3, [r4, #4]
 8002056:	6054      	str	r4, [r2, #4]
 8002058:	e7cb      	b.n	8001ff2 <_free_r+0x22>
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	200000e8 	.word	0x200000e8

08002060 <sbrk_aligned>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	4e0e      	ldr	r6, [pc, #56]	; (800209c <sbrk_aligned+0x3c>)
 8002064:	460c      	mov	r4, r1
 8002066:	6831      	ldr	r1, [r6, #0]
 8002068:	4605      	mov	r5, r0
 800206a:	b911      	cbnz	r1, 8002072 <sbrk_aligned+0x12>
 800206c:	f000 f8bc 	bl	80021e8 <_sbrk_r>
 8002070:	6030      	str	r0, [r6, #0]
 8002072:	4621      	mov	r1, r4
 8002074:	4628      	mov	r0, r5
 8002076:	f000 f8b7 	bl	80021e8 <_sbrk_r>
 800207a:	1c43      	adds	r3, r0, #1
 800207c:	d00a      	beq.n	8002094 <sbrk_aligned+0x34>
 800207e:	1cc4      	adds	r4, r0, #3
 8002080:	f024 0403 	bic.w	r4, r4, #3
 8002084:	42a0      	cmp	r0, r4
 8002086:	d007      	beq.n	8002098 <sbrk_aligned+0x38>
 8002088:	1a21      	subs	r1, r4, r0
 800208a:	4628      	mov	r0, r5
 800208c:	f000 f8ac 	bl	80021e8 <_sbrk_r>
 8002090:	3001      	adds	r0, #1
 8002092:	d101      	bne.n	8002098 <sbrk_aligned+0x38>
 8002094:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002098:	4620      	mov	r0, r4
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	200000ec 	.word	0x200000ec

080020a0 <_malloc_r>:
 80020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a4:	1ccd      	adds	r5, r1, #3
 80020a6:	f025 0503 	bic.w	r5, r5, #3
 80020aa:	3508      	adds	r5, #8
 80020ac:	2d0c      	cmp	r5, #12
 80020ae:	bf38      	it	cc
 80020b0:	250c      	movcc	r5, #12
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	4607      	mov	r7, r0
 80020b6:	db01      	blt.n	80020bc <_malloc_r+0x1c>
 80020b8:	42a9      	cmp	r1, r5
 80020ba:	d905      	bls.n	80020c8 <_malloc_r+0x28>
 80020bc:	230c      	movs	r3, #12
 80020be:	2600      	movs	r6, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4630      	mov	r0, r6
 80020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c8:	4e2e      	ldr	r6, [pc, #184]	; (8002184 <_malloc_r+0xe4>)
 80020ca:	f000 f89d 	bl	8002208 <__malloc_lock>
 80020ce:	6833      	ldr	r3, [r6, #0]
 80020d0:	461c      	mov	r4, r3
 80020d2:	bb34      	cbnz	r4, 8002122 <_malloc_r+0x82>
 80020d4:	4629      	mov	r1, r5
 80020d6:	4638      	mov	r0, r7
 80020d8:	f7ff ffc2 	bl	8002060 <sbrk_aligned>
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	4604      	mov	r4, r0
 80020e0:	d14d      	bne.n	800217e <_malloc_r+0xde>
 80020e2:	6834      	ldr	r4, [r6, #0]
 80020e4:	4626      	mov	r6, r4
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	d140      	bne.n	800216c <_malloc_r+0xcc>
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	4631      	mov	r1, r6
 80020ee:	4638      	mov	r0, r7
 80020f0:	eb04 0803 	add.w	r8, r4, r3
 80020f4:	f000 f878 	bl	80021e8 <_sbrk_r>
 80020f8:	4580      	cmp	r8, r0
 80020fa:	d13a      	bne.n	8002172 <_malloc_r+0xd2>
 80020fc:	6821      	ldr	r1, [r4, #0]
 80020fe:	3503      	adds	r5, #3
 8002100:	1a6d      	subs	r5, r5, r1
 8002102:	f025 0503 	bic.w	r5, r5, #3
 8002106:	3508      	adds	r5, #8
 8002108:	2d0c      	cmp	r5, #12
 800210a:	bf38      	it	cc
 800210c:	250c      	movcc	r5, #12
 800210e:	4638      	mov	r0, r7
 8002110:	4629      	mov	r1, r5
 8002112:	f7ff ffa5 	bl	8002060 <sbrk_aligned>
 8002116:	3001      	adds	r0, #1
 8002118:	d02b      	beq.n	8002172 <_malloc_r+0xd2>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	442b      	add	r3, r5
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	e00e      	b.n	8002140 <_malloc_r+0xa0>
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	1b52      	subs	r2, r2, r5
 8002126:	d41e      	bmi.n	8002166 <_malloc_r+0xc6>
 8002128:	2a0b      	cmp	r2, #11
 800212a:	d916      	bls.n	800215a <_malloc_r+0xba>
 800212c:	1961      	adds	r1, r4, r5
 800212e:	42a3      	cmp	r3, r4
 8002130:	6025      	str	r5, [r4, #0]
 8002132:	bf18      	it	ne
 8002134:	6059      	strne	r1, [r3, #4]
 8002136:	6863      	ldr	r3, [r4, #4]
 8002138:	bf08      	it	eq
 800213a:	6031      	streq	r1, [r6, #0]
 800213c:	5162      	str	r2, [r4, r5]
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	4638      	mov	r0, r7
 8002142:	f104 060b 	add.w	r6, r4, #11
 8002146:	f000 f865 	bl	8002214 <__malloc_unlock>
 800214a:	f026 0607 	bic.w	r6, r6, #7
 800214e:	1d23      	adds	r3, r4, #4
 8002150:	1af2      	subs	r2, r6, r3
 8002152:	d0b6      	beq.n	80020c2 <_malloc_r+0x22>
 8002154:	1b9b      	subs	r3, r3, r6
 8002156:	50a3      	str	r3, [r4, r2]
 8002158:	e7b3      	b.n	80020c2 <_malloc_r+0x22>
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	42a3      	cmp	r3, r4
 800215e:	bf0c      	ite	eq
 8002160:	6032      	streq	r2, [r6, #0]
 8002162:	605a      	strne	r2, [r3, #4]
 8002164:	e7ec      	b.n	8002140 <_malloc_r+0xa0>
 8002166:	4623      	mov	r3, r4
 8002168:	6864      	ldr	r4, [r4, #4]
 800216a:	e7b2      	b.n	80020d2 <_malloc_r+0x32>
 800216c:	4634      	mov	r4, r6
 800216e:	6876      	ldr	r6, [r6, #4]
 8002170:	e7b9      	b.n	80020e6 <_malloc_r+0x46>
 8002172:	230c      	movs	r3, #12
 8002174:	4638      	mov	r0, r7
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	f000 f84c 	bl	8002214 <__malloc_unlock>
 800217c:	e7a1      	b.n	80020c2 <_malloc_r+0x22>
 800217e:	6025      	str	r5, [r4, #0]
 8002180:	e7de      	b.n	8002140 <_malloc_r+0xa0>
 8002182:	bf00      	nop
 8002184:	200000e8 	.word	0x200000e8

08002188 <_realloc_r>:
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218c:	4680      	mov	r8, r0
 800218e:	4614      	mov	r4, r2
 8002190:	460e      	mov	r6, r1
 8002192:	b921      	cbnz	r1, 800219e <_realloc_r+0x16>
 8002194:	4611      	mov	r1, r2
 8002196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800219a:	f7ff bf81 	b.w	80020a0 <_malloc_r>
 800219e:	b92a      	cbnz	r2, 80021ac <_realloc_r+0x24>
 80021a0:	f7ff ff16 	bl	8001fd0 <_free_r>
 80021a4:	4625      	mov	r5, r4
 80021a6:	4628      	mov	r0, r5
 80021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021ac:	f000 f838 	bl	8002220 <_malloc_usable_size_r>
 80021b0:	4284      	cmp	r4, r0
 80021b2:	4607      	mov	r7, r0
 80021b4:	d802      	bhi.n	80021bc <_realloc_r+0x34>
 80021b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021ba:	d812      	bhi.n	80021e2 <_realloc_r+0x5a>
 80021bc:	4621      	mov	r1, r4
 80021be:	4640      	mov	r0, r8
 80021c0:	f7ff ff6e 	bl	80020a0 <_malloc_r>
 80021c4:	4605      	mov	r5, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0ed      	beq.n	80021a6 <_realloc_r+0x1e>
 80021ca:	42bc      	cmp	r4, r7
 80021cc:	4622      	mov	r2, r4
 80021ce:	4631      	mov	r1, r6
 80021d0:	bf28      	it	cs
 80021d2:	463a      	movcs	r2, r7
 80021d4:	f7ff fed4 	bl	8001f80 <memcpy>
 80021d8:	4631      	mov	r1, r6
 80021da:	4640      	mov	r0, r8
 80021dc:	f7ff fef8 	bl	8001fd0 <_free_r>
 80021e0:	e7e1      	b.n	80021a6 <_realloc_r+0x1e>
 80021e2:	4635      	mov	r5, r6
 80021e4:	e7df      	b.n	80021a6 <_realloc_r+0x1e>
	...

080021e8 <_sbrk_r>:
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	2300      	movs	r3, #0
 80021ec:	4d05      	ldr	r5, [pc, #20]	; (8002204 <_sbrk_r+0x1c>)
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	602b      	str	r3, [r5, #0]
 80021f4:	f7fe fac0 	bl	8000778 <_sbrk>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d102      	bne.n	8002202 <_sbrk_r+0x1a>
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	b103      	cbz	r3, 8002202 <_sbrk_r+0x1a>
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	bd38      	pop	{r3, r4, r5, pc}
 8002204:	200000f0 	.word	0x200000f0

08002208 <__malloc_lock>:
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <__malloc_lock+0x8>)
 800220a:	f000 b811 	b.w	8002230 <__retarget_lock_acquire_recursive>
 800220e:	bf00      	nop
 8002210:	200000f4 	.word	0x200000f4

08002214 <__malloc_unlock>:
 8002214:	4801      	ldr	r0, [pc, #4]	; (800221c <__malloc_unlock+0x8>)
 8002216:	f000 b80c 	b.w	8002232 <__retarget_lock_release_recursive>
 800221a:	bf00      	nop
 800221c:	200000f4 	.word	0x200000f4

08002220 <_malloc_usable_size_r>:
 8002220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002224:	1f18      	subs	r0, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	bfbc      	itt	lt
 800222a:	580b      	ldrlt	r3, [r1, r0]
 800222c:	18c0      	addlt	r0, r0, r3
 800222e:	4770      	bx	lr

08002230 <__retarget_lock_acquire_recursive>:
 8002230:	4770      	bx	lr

08002232 <__retarget_lock_release_recursive>:
 8002232:	4770      	bx	lr

08002234 <_init>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	bf00      	nop
 8002238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223a:	bc08      	pop	{r3}
 800223c:	469e      	mov	lr, r3
 800223e:	4770      	bx	lr

08002240 <_fini>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	bf00      	nop
 8002244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002246:	bc08      	pop	{r3}
 8002248:	469e      	mov	lr, r3
 800224a:	4770      	bx	lr
