
LCD_HC595.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800227c  0800227c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800227c  0800227c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800227c  0800227c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000088  0800230c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800230c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000652c  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f6  00000000  00000000  000265dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  000279d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  000280e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001736b  00000000  00000000  00028768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090c4  00000000  00000000  0003fad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082741  00000000  00000000  00048b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb2d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000cb328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080021e8 	.word	0x080021e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080021e8 	.word	0x080021e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9d2 	bl	80004f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f882 	bl	8000260 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f852 	bl	8000204 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  hc595_int(&conf);
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <main+0x28>)
 8000162:	f001 fa19 	bl	8001598 <hc595_int>
  lcd_Init();
 8000166:	f001 fb27 	bl	80017b8 <lcd_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	screw_Set_Show(10);
 800016a:	200a      	movs	r0, #10
 800016c:	f001 fb76 	bl	800185c <screw_Set_Show>
 8000170:	e7fb      	b.n	800016a <main+0x1e>
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fbac 	bl	80018e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fde3 	bl	8000d8c <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001cc:	f000 f894 	bl	80002f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 f850 	bl	8001290 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f6:	f000 f87f 	bl	80002f8 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <MX_I2C1_Init+0x50>)
 800020a:	4a13      	ldr	r2, [pc, #76]	; (8000258 <MX_I2C1_Init+0x54>)
 800020c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020e:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_I2C1_Init+0x50>)
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <MX_I2C1_Init+0x58>)
 8000212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_I2C1_Init+0x50>)
 8000222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <MX_I2C1_Init+0x50>)
 800022a:	2200      	movs	r2, #0
 800022c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_I2C1_Init+0x50>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <MX_I2C1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_I2C1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <MX_I2C1_Init+0x50>)
 8000242:	f000 fc5f 	bl	8000b04 <HAL_I2C_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800024c:	f000 f854 	bl	80002f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000a4 	.word	0x200000a4
 8000258:	40005400 	.word	0x40005400
 800025c:	000186a0 	.word	0x000186a0

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <MX_GPIO_Init+0x90>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <MX_GPIO_Init+0x90>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <MX_GPIO_Init+0x90>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_GPIO_Init+0x90>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <MX_GPIO_Init+0x90>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_GPIO_Init+0x90>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_GPIO_Init+0x90>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <MX_GPIO_Init+0x90>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_GPIO_Init+0x90>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Clock_Pin|Latch_Pin|Data_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <MX_GPIO_Init+0x94>)
 80002c4:	f000 fc06 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Clock_Pin Latch_Pin Data_Pin */
  GPIO_InitStruct.Pin = Clock_Pin|Latch_Pin|Data_Pin;
 80002c8:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	2301      	movs	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d6:	2303      	movs	r3, #3
 80002d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	4619      	mov	r1, r3
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <MX_GPIO_Init+0x94>)
 80002e2:	f000 fa73 	bl	80007cc <HAL_GPIO_Init>

}
 80002e6:	bf00      	nop
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fc:	b672      	cpsid	i
}
 80002fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	e7fe      	b.n	8000300 <Error_Handler+0x8>
	...

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <HAL_MspInit+0x5c>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_MspInit+0x5c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <HAL_MspInit+0x60>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <HAL_MspInit+0x60>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010000 	.word	0x40010000

08000368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <HAL_I2C_MspInit+0x70>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d123      	bne.n	80003d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <HAL_I2C_MspInit+0x74>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a13      	ldr	r2, [pc, #76]	; (80003dc <HAL_I2C_MspInit+0x74>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <HAL_I2C_MspInit+0x74>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003a0:	23c0      	movs	r3, #192	; 0xc0
 80003a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a4:	2312      	movs	r3, #18
 80003a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a8:	2303      	movs	r3, #3
 80003aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <HAL_I2C_MspInit+0x78>)
 80003b4:	f000 fa0a 	bl	80007cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <HAL_I2C_MspInit+0x74>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4a07      	ldr	r2, [pc, #28]	; (80003dc <HAL_I2C_MspInit+0x74>)
 80003be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c2:	61d3      	str	r3, [r2, #28]
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_I2C_MspInit+0x74>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40005400 	.word	0x40005400
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <NMI_Handler+0x4>

080003ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler+0x4>

080003f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <MemManage_Handler+0x4>

080003f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <BusFault_Handler+0x4>

080003fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <UsageFault_Handler+0x4>

08000402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr

0800041a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042a:	f000 f8ab 	bl	8000584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <_sbrk+0x5c>)
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <_sbrk+0x60>)
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <_sbrk+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d102      	bne.n	8000456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <_sbrk+0x64>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <_sbrk+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <_sbrk+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	429a      	cmp	r2, r3
 8000462:	d207      	bcs.n	8000474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000464:	f001 fa14 	bl	8001890 <__errno>
 8000468:	4603      	mov	r3, r0
 800046a:	220c      	movs	r2, #12
 800046c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000472:	e009      	b.n	8000488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <_sbrk+0x64>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <_sbrk+0x64>)
 8000484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20005000 	.word	0x20005000
 8000494:	00000400 	.word	0x00000400
 8000498:	200000f8 	.word	0x200000f8
 800049c:	20000118 	.word	0x20000118

080004a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004d2:	f7ff ffe5 	bl	80004a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004d6:	f001 f9e1 	bl	800189c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe37 	bl	800014c <main>
  bx lr
 80004de:	4770      	bx	lr
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80004e8:	08002284 	.word	0x08002284
  ldr r2, =_sbss
 80004ec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80004f0:	20000114 	.word	0x20000114

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>
	...

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x28>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x28>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f92b 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f7ff fef6 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f935 	bl	80007b2 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000560:	f000 f90b 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000018 	.word	0x20000018
 800057c:	20000020 	.word	0x20000020
 8000580:	2000001c 	.word	0x2000001c

08000584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_IncTick+0x1c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_IncTick+0x20>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x20>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000020 	.word	0x20000020
 80005a4:	200000fc 	.word	0x200000fc

080005a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;
 80005ac:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <HAL_GetTick+0x10>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	200000fc 	.word	0x200000fc

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff fff0 	bl	80005a8 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_Delay+0x44>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffe0 	bl	80005a8 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000020 	.word	0x20000020

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000744:	f7ff ff90 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff49 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff5e 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffb0 	bl	8000720 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b08b      	sub	sp, #44	; 0x2c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e169      	b.n	8000ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007e0:	2201      	movs	r2, #1
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	4013      	ands	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8158 	bne.w	8000aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a9a      	ldr	r2, [pc, #616]	; (8000a6c <HAL_GPIO_Init+0x2a0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d05e      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000808:	4a98      	ldr	r2, [pc, #608]	; (8000a6c <HAL_GPIO_Init+0x2a0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d875      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800080e:	4a98      	ldr	r2, [pc, #608]	; (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d058      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000814:	4a96      	ldr	r2, [pc, #600]	; (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d86f      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800081a:	4a96      	ldr	r2, [pc, #600]	; (8000a74 <HAL_GPIO_Init+0x2a8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d052      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000820:	4a94      	ldr	r2, [pc, #592]	; (8000a74 <HAL_GPIO_Init+0x2a8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d869      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000826:	4a94      	ldr	r2, [pc, #592]	; (8000a78 <HAL_GPIO_Init+0x2ac>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d04c      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 800082c:	4a92      	ldr	r2, [pc, #584]	; (8000a78 <HAL_GPIO_Init+0x2ac>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d863      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000832:	4a92      	ldr	r2, [pc, #584]	; (8000a7c <HAL_GPIO_Init+0x2b0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d046      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000838:	4a90      	ldr	r2, [pc, #576]	; (8000a7c <HAL_GPIO_Init+0x2b0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d85d      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800083e:	2b12      	cmp	r3, #18
 8000840:	d82a      	bhi.n	8000898 <HAL_GPIO_Init+0xcc>
 8000842:	2b12      	cmp	r3, #18
 8000844:	d859      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <HAL_GPIO_Init+0x80>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	080008c7 	.word	0x080008c7
 8000850:	080008a1 	.word	0x080008a1
 8000854:	080008b3 	.word	0x080008b3
 8000858:	080008f5 	.word	0x080008f5
 800085c:	080008fb 	.word	0x080008fb
 8000860:	080008fb 	.word	0x080008fb
 8000864:	080008fb 	.word	0x080008fb
 8000868:	080008fb 	.word	0x080008fb
 800086c:	080008fb 	.word	0x080008fb
 8000870:	080008fb 	.word	0x080008fb
 8000874:	080008fb 	.word	0x080008fb
 8000878:	080008fb 	.word	0x080008fb
 800087c:	080008fb 	.word	0x080008fb
 8000880:	080008fb 	.word	0x080008fb
 8000884:	080008fb 	.word	0x080008fb
 8000888:	080008fb 	.word	0x080008fb
 800088c:	080008fb 	.word	0x080008fb
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008bd 	.word	0x080008bd
 8000898:	4a79      	ldr	r2, [pc, #484]	; (8000a80 <HAL_GPIO_Init+0x2b4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e029      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e024      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3308      	adds	r3, #8
 80008b8:	623b      	str	r3, [r7, #32]
          break;
 80008ba:	e01f      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	330c      	adds	r3, #12
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	e01a      	b.n	80008fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ce:	2304      	movs	r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e013      	b.n	80008fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	611a      	str	r2, [r3, #16]
          break;
 80008e6:	e009      	b.n	80008fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	615a      	str	r2, [r3, #20]
          break;
 80008f2:	e003      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e000      	b.n	80008fc <HAL_GPIO_Init+0x130>
          break;
 80008fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d801      	bhi.n	8000906 <HAL_GPIO_Init+0x13a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	e001      	b.n	800090a <HAL_GPIO_Init+0x13e>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	2bff      	cmp	r3, #255	; 0xff
 8000910:	d802      	bhi.n	8000918 <HAL_GPIO_Init+0x14c>
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	e002      	b.n	800091e <HAL_GPIO_Init+0x152>
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	3b08      	subs	r3, #8
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	210f      	movs	r1, #15
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	401a      	ands	r2, r3
 8000930:	6a39      	ldr	r1, [r7, #32]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	431a      	orrs	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 80b1 	beq.w	8000aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094c:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <HAL_GPIO_Init+0x2b8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a4c      	ldr	r2, [pc, #304]	; (8000a84 <HAL_GPIO_Init+0x2b8>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <HAL_GPIO_Init+0x2b8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000964:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <HAL_GPIO_Init+0x2bc>)
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	220f      	movs	r2, #15
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a40      	ldr	r2, [pc, #256]	; (8000a8c <HAL_GPIO_Init+0x2c0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <HAL_GPIO_Init+0x1ec>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <HAL_GPIO_Init+0x2c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1e8>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <HAL_GPIO_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1e4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <HAL_GPIO_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1e0>
 80009a8:	2303      	movs	r3, #3
 80009aa:	e006      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e004      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b8:	2300      	movs	r3, #0
 80009ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009bc:	f002 0203 	and.w	r2, r2, #3
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	4093      	lsls	r3, r2
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ca:	492f      	ldr	r1, [pc, #188]	; (8000a88 <HAL_GPIO_Init+0x2bc>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3302      	adds	r3, #2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	492c      	ldr	r1, [pc, #176]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	600b      	str	r3, [r1, #0]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4928      	ldr	r1, [pc, #160]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4922      	ldr	r1, [pc, #136]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	491e      	ldr	r1, [pc, #120]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	4918      	ldr	r1, [pc, #96]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4914      	ldr	r1, [pc, #80]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d021      	beq.n	8000aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	490e      	ldr	r1, [pc, #56]	; (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60cb      	str	r3, [r1, #12]
 8000a68:	e021      	b.n	8000aae <HAL_GPIO_Init+0x2e2>
 8000a6a:	bf00      	nop
 8000a6c:	10320000 	.word	0x10320000
 8000a70:	10310000 	.word	0x10310000
 8000a74:	10220000 	.word	0x10220000
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	10120000 	.word	0x10120000
 8000a80:	10110000 	.word	0x10110000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40011400 	.word	0x40011400
 8000a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f ae8e 	bne.w	80007e0 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	372c      	adds	r7, #44	; 0x2c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e12b      	b.n	8000d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d106      	bne.n	8000b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fc1c 	bl	8000368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2224      	movs	r2, #36	; 0x24
 8000b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0201 	bic.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b68:	f000 fce4 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8000b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <HAL_I2C_Init+0x274>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d807      	bhi.n	8000b88 <HAL_I2C_Init+0x84>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a80      	ldr	r2, [pc, #512]	; (8000d7c <HAL_I2C_Init+0x278>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	bf94      	ite	ls
 8000b80:	2301      	movls	r3, #1
 8000b82:	2300      	movhi	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	e006      	b.n	8000b96 <HAL_I2C_Init+0x92>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4a7d      	ldr	r2, [pc, #500]	; (8000d80 <HAL_I2C_Init+0x27c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	bf94      	ite	ls
 8000b90:	2301      	movls	r3, #1
 8000b92:	2300      	movhi	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e0e7      	b.n	8000d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4a78      	ldr	r2, [pc, #480]	; (8000d84 <HAL_I2C_Init+0x280>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a6a      	ldr	r2, [pc, #424]	; (8000d78 <HAL_I2C_Init+0x274>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d802      	bhi.n	8000bd8 <HAL_I2C_Init+0xd4>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	e009      	b.n	8000bec <HAL_I2C_Init+0xe8>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	4a69      	ldr	r2, [pc, #420]	; (8000d88 <HAL_I2C_Init+0x284>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	099b      	lsrs	r3, r3, #6
 8000bea:	3301      	adds	r3, #1
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	495c      	ldr	r1, [pc, #368]	; (8000d78 <HAL_I2C_Init+0x274>)
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d819      	bhi.n	8000c40 <HAL_I2C_Init+0x13c>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	1e59      	subs	r1, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c1a:	1c59      	adds	r1, r3, #1
 8000c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c20:	400b      	ands	r3, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00a      	beq.n	8000c3c <HAL_I2C_Init+0x138>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1e59      	subs	r1, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c3a:	e051      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e04f      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_I2C_Init+0x168>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	1e58      	subs	r0, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6859      	ldr	r1, [r3, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	440b      	add	r3, r1
 8000c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	e012      	b.n	8000c92 <HAL_I2C_Init+0x18e>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	1e58      	subs	r0, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	440b      	add	r3, r1
 8000c7a:	0099      	lsls	r1, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_I2C_Init+0x196>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e022      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_I2C_Init+0x1bc>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	440b      	add	r3, r1
 8000cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbe:	e00f      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1e58      	subs	r0, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6859      	ldr	r1, [r3, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	0099      	lsls	r1, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	6809      	ldr	r1, [r1, #0]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6911      	ldr	r1, [r2, #16]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68d2      	ldr	r2, [r2, #12]
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2220      	movs	r2, #32
 8000d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	000186a0 	.word	0x000186a0
 8000d7c:	001e847f 	.word	0x001e847f
 8000d80:	003d08ff 	.word	0x003d08ff
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	10624dd3 	.word	0x10624dd3

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e272      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8087 	beq.w	8000eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00c      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d112      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd0:	d10b      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd2:	4b89      	ldr	r3, [pc, #548]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d06c      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d168      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e24c      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x76>
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a7f      	ldr	r2, [pc, #508]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e02e      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x98>
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a7a      	ldr	r2, [pc, #488]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0xbc>
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a67      	ldr	r2, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fb9e 	bl	80005a8 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fb9a 	bl	80005a8 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e200      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0xe4>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fb8a 	bl	80005a8 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fb86 	bl	80005a8 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1ec      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x10c>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d063      	beq.n	8000f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec6:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed2:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d11c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e1c0      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4939      	ldr	r1, [pc, #228]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e03a      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d020      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fb3f 	bl	80005a8 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fb3b 	bl	80005a8 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e1a1      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4927      	ldr	r1, [pc, #156]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb1e 	bl	80005a8 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fb1a 	bl	80005a8 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e180      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d03a      	beq.n	8001010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d019      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fafe 	bl	80005a8 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fafa 	bl	80005a8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e160      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fac4 	bl	800155c <RCC_Delay>
 8000fd4:	e01c      	b.n	8001010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fae4 	bl	80005a8 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe2:	e00f      	b.n	8001004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fae0 	bl	80005a8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d908      	bls.n	8001004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e146      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	42420000 	.word	0x42420000
 8001000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e9      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a6 	beq.w	800116a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b8b      	ldr	r3, [pc, #556]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10d      	bne.n	800104a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b88      	ldr	r3, [pc, #544]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a87      	ldr	r2, [pc, #540]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b85      	ldr	r3, [pc, #532]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4b82      	ldr	r3, [pc, #520]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d118      	bne.n	8001088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7e      	ldr	r2, [pc, #504]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001062:	f7ff faa1 	bl	80005a8 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106a:	f7ff fa9d 	bl	80005a8 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e103      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b75      	ldr	r3, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x4c8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x312>
 8001090:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e02d      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x334>
 80010a6:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a69      	ldr	r2, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	e01c      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x356>
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a60      	ldr	r2, [pc, #384]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a5d      	ldr	r2, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	e00b      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a5a      	ldr	r2, [pc, #360]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d015      	beq.n	800112e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fa51 	bl	80005a8 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fa4d 	bl	80005a8 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0b1      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ee      	beq.n	800110a <HAL_RCC_OscConfig+0x37e>
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fa3b 	bl	80005a8 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fa37 	bl	80005a8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e09b      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1ee      	bne.n	8001136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8087 	beq.w	8001282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d061      	beq.n	8001244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d146      	bne.n	8001216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fa0b 	bl	80005a8 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fa07 	bl	80005a8 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e06d      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d108      	bne.n	80011d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4921      	ldr	r1, [pc, #132]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a19      	ldr	r1, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	430b      	orrs	r3, r1
 80011e2:	491b      	ldr	r1, [pc, #108]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff f9db 	bl	80005a8 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff f9d7 	bl	80005a8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e03d      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46a>
 8001214:	e035      	b.n	8001282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff f9c4 	bl	80005a8 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff f9c0 	bl	80005a8 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e026      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x498>
 8001242:	e01e      	b.n	8001282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d107      	bne.n	800125c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e019      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x500>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0d0      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d910      	bls.n	80012d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 0207 	bic.w	r2, r3, #7
 80012ba:	4965      	ldr	r1, [pc, #404]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0b8      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800130e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	494d      	ldr	r1, [pc, #308]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d040      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e07f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e073      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06b      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 0203 	bic.w	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4936      	ldr	r1, [pc, #216]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001380:	f7ff f912 	bl	80005a8 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001386:	e00a      	b.n	800139e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f7ff f90e 	bl	80005a8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e053      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 020c 	and.w	r2, r3, #12
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1eb      	bne.n	8001388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d210      	bcs.n	80013e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4922      	ldr	r1, [pc, #136]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e032      	b.n	8001446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4916      	ldr	r1, [pc, #88]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141e:	f000 f821 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 8001422:	4602      	mov	r2, r0
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <HAL_RCC_ClockConfig+0x1c8>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_RCC_ClockConfig+0x1cc>)
 8001438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1d0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000
 8001454:	40021000 	.word	0x40021000
 8001458:	08002230 	.word	0x08002230
 800145c:	20000018 	.word	0x20000018
 8001460:	2000001c 	.word	0x2000001c

08001464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001464:	b490      	push	{r4, r7}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_RCC_GetSysClockFreq+0xac>)
 800146c:	1d3c      	adds	r4, r7, #4
 800146e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001474:	f240 2301 	movw	r3, #513	; 0x201
 8001478:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x40>
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d003      	beq.n	80014aa <HAL_RCC_GetSysClockFreq+0x46>
 80014a2:	e02b      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a6:	623b      	str	r3, [r7, #32]
      break;
 80014a8:	e02b      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3328      	adds	r3, #40	; 0x28
 80014b4:	443b      	add	r3, r7
 80014b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d012      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0c5b      	lsrs	r3, r3, #17
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	3328      	adds	r3, #40	; 0x28
 80014d2:	443b      	add	r3, r7
 80014d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014de:	fb03 f202 	mul.w	r2, r3, r2
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	e004      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	623b      	str	r3, [r7, #32]
      break;
 80014fa:	e002      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fe:	623b      	str	r3, [r7, #32]
      break;
 8001500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001502:	6a3b      	ldr	r3, [r7, #32]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bc90      	pop	{r4, r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08002200 	.word	0x08002200
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	003d0900 	.word	0x003d0900

08001520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_RCC_GetHCLKFreq+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000018 	.word	0x20000018

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff2 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	08002240 	.word	0x08002240

0800155c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <RCC_Delay+0x34>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <RCC_Delay+0x38>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a5b      	lsrs	r3, r3, #9
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001578:	bf00      	nop
  }
  while (Delay --);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f9      	bne.n	8001578 <RCC_Delay+0x1c>
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000018 	.word	0x20000018
 8001594:	10624dd3 	.word	0x10624dd3

08001598 <hc595_int>:
/*---------------------------------------------------*/
#include "lcd_screw.h"
/*---------------------------------------------------*/
hc595_t *_hc595;
void hc595_int(hc595_t *conf)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	_hc595 = conf;
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <hc595_int+0x18>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000100 	.word	0x20000100

080015b4 <hc595_trans>:
void hc595_trans(uint8_t c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<8;i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e02c      	b.n	800161e <hc595_trans+0x6a>
	{
		uint8_t bit_trans = (c & (0x80>>i))>>(7-i);
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	fa41 f303 	asr.w	r3, r1, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	fa42 f303 	asr.w	r3, r2, r3
 80015da:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(_hc595 -> DATA_Port, _hc595 -> DATA_Pin, bit_trans);
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <hc595_trans+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6918      	ldr	r0, [r3, #16]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <hc595_trans+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	8a9b      	ldrh	r3, [r3, #20]
 80015e8:	7afa      	ldrb	r2, [r7, #11]
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa72 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_hc595 -> CLK_Port, _hc595 -> CLK_Pin, 1);
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <hc595_trans+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <hc595_trans+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	889b      	ldrh	r3, [r3, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fa68 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_hc595 -> CLK_Port, _hc595 -> CLK_Pin, 0);
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <hc595_trans+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <hc595_trans+0xa0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	889b      	ldrh	r3, [r3, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa5e 	bl	8000ad4 <HAL_GPIO_WritePin>
	for(int i = 0;i<8;i++)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b07      	cmp	r3, #7
 8001622:	ddcf      	ble.n	80015c4 <hc595_trans+0x10>
	}
	HAL_GPIO_WritePin(_hc595 -> LATCH_Port, _hc595 -> LATCH_Pin, 1);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <hc595_trans+0xa0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6898      	ldr	r0, [r3, #8]
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <hc595_trans+0xa0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	899b      	ldrh	r3, [r3, #12]
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa4e 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_hc595 -> LATCH_Port, _hc595 -> LATCH_Pin, 0);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <hc595_trans+0xa0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6898      	ldr	r0, [r3, #8]
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <hc595_trans+0xa0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	899b      	ldrh	r3, [r3, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fa44 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000100 	.word	0x20000100

08001658 <lcd_Send_Cmd>:
void lcd_Send_Cmd(char cmd)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l; // vi du 0x30
	uint8_t data_t[4];
	data_u = (cmd >> 4) & 0x0f; // data_u =0x03
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	74fb      	strb	r3, [r7, #19]
	data_l = (cmd & 0x0f); // data_l = 0x00
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001670:	7cfb      	ldrb	r3, [r7, #19]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8001680:	b25b      	sxtb	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	733b      	strb	r3, [r7, #12]
	data_t[1] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001696:	b25b      	sxtb	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	737b      	strb	r3, [r7, #13]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 800169c:	7cbb      	ldrb	r3, [r7, #18]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (0<<RS_PIN)  | (1<< BL_PIN);
 80016b2:	7cbb      	ldrb	r3, [r7, #18]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0;i<4;i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <lcd_Send_Cmd+0x8c>
	{
		hc595_trans(data_t[i]);
 80016ce:	f107 020c 	add.w	r2, r7, #12
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff6b 	bl	80015b4 <hc595_trans>
	for(int i = 0;i<4;i++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	ddf1      	ble.n	80016ce <lcd_Send_Cmd+0x76>
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <lcd_Send_Data>:
void lcd_Send_Data(char data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	char data_u,data_l;
	uint8_t data_t[4];
	data_u = (data >> 4) & 0x0f;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	74fb      	strb	r3, [r7, #19]
	data_l = (data & 0x0f);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	74bb      	strb	r3, [r7, #18]

	data_t[0] = (data_u & 0x01) << D4_PIN | (data_u & 0x02 ) << (D5_PIN-1)  | (data_u & 0x04) << (D6_PIN-2)  | (data_u & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	b25b      	sxtb	r3, r3
 8001712:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001716:	b25b      	sxtb	r3, r3
 8001718:	f063 037a 	orn	r3, r3, #122	; 0x7a
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	733b      	strb	r3, [r7, #12]
	data_t[2] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (1<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8001722:	7cbb      	ldrb	r3, [r7, #18]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800172c:	b25b      	sxtb	r3, r3
 800172e:	f063 037a 	orn	r3, r3, #122	; 0x7a
 8001732:	b25b      	sxtb	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73bb      	strb	r3, [r7, #14]
	data_t[3] = (data_l & 0x01) << D4_PIN | (data_l & 0x02 ) << (D5_PIN-1)  | (data_l & 0x04) << (D6_PIN-2)  | (data_l & 0x08) << (D7_PIN-3) | (0<<EN_PIN)| (1<<RS_PIN)  | (1<< BL_PIN);
 8001738:	7cbb      	ldrb	r3, [r7, #18]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f063 037b 	orn	r3, r3, #123	; 0x7b
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <lcd_Send_Data+0x76>
	{
		hc595_trans(data_t[i]);
 8001754:	f107 020c 	add.w	r2, r7, #12
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff28 	bl	80015b4 <hc595_trans>
	for(int i = 0;i<4;i++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b03      	cmp	r3, #3
 800176e:	ddf1      	ble.n	8001754 <lcd_Send_Data+0x60>

	}

	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <lcd_Put_Cur>:
{
	lcd_Send_Cmd(0x01);
	HAL_Delay(2);
}
void lcd_Put_Cur(int row,int col)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	switch(row)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <lcd_Put_Cur+0x18>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <lcd_Put_Cur+0x22>
 8001790:	e009      	b.n	80017a6 <lcd_Put_Cur+0x2c>
	{
		case 0:
			col |= 0x80; //0x80 1 000 000x
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	603b      	str	r3, [r7, #0]
			break;
 800179a:	e004      	b.n	80017a6 <lcd_Put_Cur+0x2c>
		case 1:
			col |= 0xC0; // 0xC1 1 100 000x
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017a2:	603b      	str	r3, [r7, #0]
			break;
 80017a4:	bf00      	nop
	}
	//Gửi lệnh ứng với vị trí cần xuất hiện con trỏ Set DDRAM address tr24
	lcd_Send_Cmd(col);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff54 	bl	8001658 <lcd_Send_Cmd>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <lcd_Init>:

void lcd_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// Khởi tạo 4 bit
	HAL_Delay(50);
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f7fe fefd 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x30);
 80017c2:	2030      	movs	r0, #48	; 0x30
 80017c4:	f7ff ff48 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f7fe fef7 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x30);
 80017ce:	2030      	movs	r0, #48	; 0x30
 80017d0:	f7ff ff42 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(1);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7fe fef1 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x30);
 80017da:	2030      	movs	r0, #48	; 0x30
 80017dc:	f7ff ff3c 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(10);
 80017e0:	200a      	movs	r0, #10
 80017e2:	f7fe feeb 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x20);
 80017e6:	2020      	movs	r0, #32
 80017e8:	f7ff ff36 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(10);
 80017ec:	200a      	movs	r0, #10
 80017ee:	f7fe fee5 	bl	80005bc <HAL_Delay>
	// Khởi tạo hiển thị
	//00 00 101 00
	lcd_Send_Cmd(0x28); //function set bảng 6/tr23: set data interface 4bits 2lines 5x8 bit
 80017f2:	2028      	movs	r0, #40	; 0x28
 80017f4:	f7ff ff30 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7fe fedf 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x08); //display on/off control
 80017fe:	2008      	movs	r0, #8
 8001800:	f7ff ff2a 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f7fe fed9 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x01); //clear display
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff ff24 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f7fe fed3 	bl	80005bc <HAL_Delay>
	HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f7fe fed0 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x06); //entry mode set: i/d=1 increment s=0
 800181c:	2006      	movs	r0, #6
 800181e:	f7ff ff1b 	bl	8001658 <lcd_Send_Cmd>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f7fe feca 	bl	80005bc <HAL_Delay>
	lcd_Send_Cmd(0x0C); // cho phep hien thi man hinh
 8001828:	200c      	movs	r0, #12
 800182a:	f7ff ff15 	bl	8001658 <lcd_Send_Cmd>
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}

08001832 <lcd_Send_String>:
void lcd_Send_String(char *str)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	while(*str) lcd_Send_Data(*str++);
 800183a:	e006      	b.n	800184a <lcd_Send_String+0x18>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff55 	bl	80016f4 <lcd_Send_Data>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f4      	bne.n	800183c <lcd_Send_String+0xa>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <screw_Set_Show>:
	sprintf(str,"Screw done:%d",c);
	lcd_Put_Cur(0, 0);
	lcd_Send_String(str);
}
void screw_Set_Show(int c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09c      	sub	sp, #112	; 0x70
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	char str[100];
	sprintf(str,"Screw set:%d",c);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <screw_Set_Show+0x30>)
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f841 	bl	80018f4 <siprintf>
	lcd_Put_Cur(1, 2);
 8001872:	2102      	movs	r1, #2
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff ff80 	bl	800177a <lcd_Put_Cur>
	lcd_Send_String(str);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffd7 	bl	8001832 <lcd_Send_String>
}
 8001884:	bf00      	nop
 8001886:	3770      	adds	r7, #112	; 0x70
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	08002220 	.word	0x08002220

08001890 <__errno>:
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <__errno+0x8>)
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000024 	.word	0x20000024

0800189c <__libc_init_array>:
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	2600      	movs	r6, #0
 80018a0:	4d0c      	ldr	r5, [pc, #48]	; (80018d4 <__libc_init_array+0x38>)
 80018a2:	4c0d      	ldr	r4, [pc, #52]	; (80018d8 <__libc_init_array+0x3c>)
 80018a4:	1b64      	subs	r4, r4, r5
 80018a6:	10a4      	asrs	r4, r4, #2
 80018a8:	42a6      	cmp	r6, r4
 80018aa:	d109      	bne.n	80018c0 <__libc_init_array+0x24>
 80018ac:	f000 fc9c 	bl	80021e8 <_init>
 80018b0:	2600      	movs	r6, #0
 80018b2:	4d0a      	ldr	r5, [pc, #40]	; (80018dc <__libc_init_array+0x40>)
 80018b4:	4c0a      	ldr	r4, [pc, #40]	; (80018e0 <__libc_init_array+0x44>)
 80018b6:	1b64      	subs	r4, r4, r5
 80018b8:	10a4      	asrs	r4, r4, #2
 80018ba:	42a6      	cmp	r6, r4
 80018bc:	d105      	bne.n	80018ca <__libc_init_array+0x2e>
 80018be:	bd70      	pop	{r4, r5, r6, pc}
 80018c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c4:	4798      	blx	r3
 80018c6:	3601      	adds	r6, #1
 80018c8:	e7ee      	b.n	80018a8 <__libc_init_array+0xc>
 80018ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ce:	4798      	blx	r3
 80018d0:	3601      	adds	r6, #1
 80018d2:	e7f2      	b.n	80018ba <__libc_init_array+0x1e>
 80018d4:	0800227c 	.word	0x0800227c
 80018d8:	0800227c 	.word	0x0800227c
 80018dc:	0800227c 	.word	0x0800227c
 80018e0:	08002280 	.word	0x08002280

080018e4 <memset>:
 80018e4:	4603      	mov	r3, r0
 80018e6:	4402      	add	r2, r0
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d100      	bne.n	80018ee <memset+0xa>
 80018ec:	4770      	bx	lr
 80018ee:	f803 1b01 	strb.w	r1, [r3], #1
 80018f2:	e7f9      	b.n	80018e8 <memset+0x4>

080018f4 <siprintf>:
 80018f4:	b40e      	push	{r1, r2, r3}
 80018f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018fa:	b500      	push	{lr}
 80018fc:	b09c      	sub	sp, #112	; 0x70
 80018fe:	ab1d      	add	r3, sp, #116	; 0x74
 8001900:	9002      	str	r0, [sp, #8]
 8001902:	9006      	str	r0, [sp, #24]
 8001904:	9107      	str	r1, [sp, #28]
 8001906:	9104      	str	r1, [sp, #16]
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <siprintf+0x38>)
 800190a:	4909      	ldr	r1, [pc, #36]	; (8001930 <siprintf+0x3c>)
 800190c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001910:	9105      	str	r1, [sp, #20]
 8001912:	6800      	ldr	r0, [r0, #0]
 8001914:	a902      	add	r1, sp, #8
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f000 f868 	bl	80019ec <_svfiprintf_r>
 800191c:	2200      	movs	r2, #0
 800191e:	9b02      	ldr	r3, [sp, #8]
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	b01c      	add	sp, #112	; 0x70
 8001924:	f85d eb04 	ldr.w	lr, [sp], #4
 8001928:	b003      	add	sp, #12
 800192a:	4770      	bx	lr
 800192c:	20000024 	.word	0x20000024
 8001930:	ffff0208 	.word	0xffff0208

08001934 <__ssputs_r>:
 8001934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001938:	688e      	ldr	r6, [r1, #8]
 800193a:	4682      	mov	sl, r0
 800193c:	429e      	cmp	r6, r3
 800193e:	460c      	mov	r4, r1
 8001940:	4690      	mov	r8, r2
 8001942:	461f      	mov	r7, r3
 8001944:	d838      	bhi.n	80019b8 <__ssputs_r+0x84>
 8001946:	898a      	ldrh	r2, [r1, #12]
 8001948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800194c:	d032      	beq.n	80019b4 <__ssputs_r+0x80>
 800194e:	6825      	ldr	r5, [r4, #0]
 8001950:	6909      	ldr	r1, [r1, #16]
 8001952:	3301      	adds	r3, #1
 8001954:	eba5 0901 	sub.w	r9, r5, r1
 8001958:	6965      	ldr	r5, [r4, #20]
 800195a:	444b      	add	r3, r9
 800195c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001964:	106d      	asrs	r5, r5, #1
 8001966:	429d      	cmp	r5, r3
 8001968:	bf38      	it	cc
 800196a:	461d      	movcc	r5, r3
 800196c:	0553      	lsls	r3, r2, #21
 800196e:	d531      	bpl.n	80019d4 <__ssputs_r+0xa0>
 8001970:	4629      	mov	r1, r5
 8001972:	f000 fb6f 	bl	8002054 <_malloc_r>
 8001976:	4606      	mov	r6, r0
 8001978:	b950      	cbnz	r0, 8001990 <__ssputs_r+0x5c>
 800197a:	230c      	movs	r3, #12
 800197c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001980:	f8ca 3000 	str.w	r3, [sl]
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198a:	81a3      	strh	r3, [r4, #12]
 800198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001990:	464a      	mov	r2, r9
 8001992:	6921      	ldr	r1, [r4, #16]
 8001994:	f000 face 	bl	8001f34 <memcpy>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800199e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a2:	81a3      	strh	r3, [r4, #12]
 80019a4:	6126      	str	r6, [r4, #16]
 80019a6:	444e      	add	r6, r9
 80019a8:	6026      	str	r6, [r4, #0]
 80019aa:	463e      	mov	r6, r7
 80019ac:	6165      	str	r5, [r4, #20]
 80019ae:	eba5 0509 	sub.w	r5, r5, r9
 80019b2:	60a5      	str	r5, [r4, #8]
 80019b4:	42be      	cmp	r6, r7
 80019b6:	d900      	bls.n	80019ba <__ssputs_r+0x86>
 80019b8:	463e      	mov	r6, r7
 80019ba:	4632      	mov	r2, r6
 80019bc:	4641      	mov	r1, r8
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	f000 fac6 	bl	8001f50 <memmove>
 80019c4:	68a3      	ldr	r3, [r4, #8]
 80019c6:	2000      	movs	r0, #0
 80019c8:	1b9b      	subs	r3, r3, r6
 80019ca:	60a3      	str	r3, [r4, #8]
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	4433      	add	r3, r6
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	e7db      	b.n	800198c <__ssputs_r+0x58>
 80019d4:	462a      	mov	r2, r5
 80019d6:	f000 fbb1 	bl	800213c <_realloc_r>
 80019da:	4606      	mov	r6, r0
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1e1      	bne.n	80019a4 <__ssputs_r+0x70>
 80019e0:	4650      	mov	r0, sl
 80019e2:	6921      	ldr	r1, [r4, #16]
 80019e4:	f000 face 	bl	8001f84 <_free_r>
 80019e8:	e7c7      	b.n	800197a <__ssputs_r+0x46>
	...

080019ec <_svfiprintf_r>:
 80019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f0:	4698      	mov	r8, r3
 80019f2:	898b      	ldrh	r3, [r1, #12]
 80019f4:	4607      	mov	r7, r0
 80019f6:	061b      	lsls	r3, r3, #24
 80019f8:	460d      	mov	r5, r1
 80019fa:	4614      	mov	r4, r2
 80019fc:	b09d      	sub	sp, #116	; 0x74
 80019fe:	d50e      	bpl.n	8001a1e <_svfiprintf_r+0x32>
 8001a00:	690b      	ldr	r3, [r1, #16]
 8001a02:	b963      	cbnz	r3, 8001a1e <_svfiprintf_r+0x32>
 8001a04:	2140      	movs	r1, #64	; 0x40
 8001a06:	f000 fb25 	bl	8002054 <_malloc_r>
 8001a0a:	6028      	str	r0, [r5, #0]
 8001a0c:	6128      	str	r0, [r5, #16]
 8001a0e:	b920      	cbnz	r0, 8001a1a <_svfiprintf_r+0x2e>
 8001a10:	230c      	movs	r3, #12
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a18:	e0d1      	b.n	8001bbe <_svfiprintf_r+0x1d2>
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	616b      	str	r3, [r5, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9309      	str	r3, [sp, #36]	; 0x24
 8001a22:	2320      	movs	r3, #32
 8001a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a28:	2330      	movs	r3, #48	; 0x30
 8001a2a:	f04f 0901 	mov.w	r9, #1
 8001a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001bd8 <_svfiprintf_r+0x1ec>
 8001a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a42:	b10a      	cbz	r2, 8001a48 <_svfiprintf_r+0x5c>
 8001a44:	2a25      	cmp	r2, #37	; 0x25
 8001a46:	d1f9      	bne.n	8001a3c <_svfiprintf_r+0x50>
 8001a48:	ebba 0b04 	subs.w	fp, sl, r4
 8001a4c:	d00b      	beq.n	8001a66 <_svfiprintf_r+0x7a>
 8001a4e:	465b      	mov	r3, fp
 8001a50:	4622      	mov	r2, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	4638      	mov	r0, r7
 8001a56:	f7ff ff6d 	bl	8001934 <__ssputs_r>
 8001a5a:	3001      	adds	r0, #1
 8001a5c:	f000 80aa 	beq.w	8001bb4 <_svfiprintf_r+0x1c8>
 8001a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a62:	445a      	add	r2, fp
 8001a64:	9209      	str	r2, [sp, #36]	; 0x24
 8001a66:	f89a 3000 	ldrb.w	r3, [sl]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80a2 	beq.w	8001bb4 <_svfiprintf_r+0x1c8>
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a7a:	f10a 0a01 	add.w	sl, sl, #1
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	9307      	str	r3, [sp, #28]
 8001a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a86:	931a      	str	r3, [sp, #104]	; 0x68
 8001a88:	4654      	mov	r4, sl
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a90:	4851      	ldr	r0, [pc, #324]	; (8001bd8 <_svfiprintf_r+0x1ec>)
 8001a92:	f000 fa41 	bl	8001f18 <memchr>
 8001a96:	9a04      	ldr	r2, [sp, #16]
 8001a98:	b9d8      	cbnz	r0, 8001ad2 <_svfiprintf_r+0xe6>
 8001a9a:	06d0      	lsls	r0, r2, #27
 8001a9c:	bf44      	itt	mi
 8001a9e:	2320      	movmi	r3, #32
 8001aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aa4:	0711      	lsls	r1, r2, #28
 8001aa6:	bf44      	itt	mi
 8001aa8:	232b      	movmi	r3, #43	; 0x2b
 8001aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aae:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ab4:	d015      	beq.n	8001ae2 <_svfiprintf_r+0xf6>
 8001ab6:	4654      	mov	r4, sl
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f04f 0c0a 	mov.w	ip, #10
 8001abe:	9a07      	ldr	r2, [sp, #28]
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ac6:	3b30      	subs	r3, #48	; 0x30
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d94e      	bls.n	8001b6a <_svfiprintf_r+0x17e>
 8001acc:	b1b0      	cbz	r0, 8001afc <_svfiprintf_r+0x110>
 8001ace:	9207      	str	r2, [sp, #28]
 8001ad0:	e014      	b.n	8001afc <_svfiprintf_r+0x110>
 8001ad2:	eba0 0308 	sub.w	r3, r0, r8
 8001ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	46a2      	mov	sl, r4
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	e7d2      	b.n	8001a88 <_svfiprintf_r+0x9c>
 8001ae2:	9b03      	ldr	r3, [sp, #12]
 8001ae4:	1d19      	adds	r1, r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bfbb      	ittet	lt
 8001aee:	425b      	neglt	r3, r3
 8001af0:	f042 0202 	orrlt.w	r2, r2, #2
 8001af4:	9307      	strge	r3, [sp, #28]
 8001af6:	9307      	strlt	r3, [sp, #28]
 8001af8:	bfb8      	it	lt
 8001afa:	9204      	strlt	r2, [sp, #16]
 8001afc:	7823      	ldrb	r3, [r4, #0]
 8001afe:	2b2e      	cmp	r3, #46	; 0x2e
 8001b00:	d10c      	bne.n	8001b1c <_svfiprintf_r+0x130>
 8001b02:	7863      	ldrb	r3, [r4, #1]
 8001b04:	2b2a      	cmp	r3, #42	; 0x2a
 8001b06:	d135      	bne.n	8001b74 <_svfiprintf_r+0x188>
 8001b08:	9b03      	ldr	r3, [sp, #12]
 8001b0a:	3402      	adds	r4, #2
 8001b0c:	1d1a      	adds	r2, r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	9203      	str	r2, [sp, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bfb8      	it	lt
 8001b16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001bdc <_svfiprintf_r+0x1f0>
 8001b20:	2203      	movs	r2, #3
 8001b22:	4650      	mov	r0, sl
 8001b24:	7821      	ldrb	r1, [r4, #0]
 8001b26:	f000 f9f7 	bl	8001f18 <memchr>
 8001b2a:	b140      	cbz	r0, 8001b3e <_svfiprintf_r+0x152>
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	eba0 000a 	sub.w	r0, r0, sl
 8001b32:	fa03 f000 	lsl.w	r0, r3, r0
 8001b36:	9b04      	ldr	r3, [sp, #16]
 8001b38:	3401      	adds	r4, #1
 8001b3a:	4303      	orrs	r3, r0
 8001b3c:	9304      	str	r3, [sp, #16]
 8001b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b42:	2206      	movs	r2, #6
 8001b44:	4826      	ldr	r0, [pc, #152]	; (8001be0 <_svfiprintf_r+0x1f4>)
 8001b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b4a:	f000 f9e5 	bl	8001f18 <memchr>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d038      	beq.n	8001bc4 <_svfiprintf_r+0x1d8>
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <_svfiprintf_r+0x1f8>)
 8001b54:	bb1b      	cbnz	r3, 8001b9e <_svfiprintf_r+0x1b2>
 8001b56:	9b03      	ldr	r3, [sp, #12]
 8001b58:	3307      	adds	r3, #7
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	3308      	adds	r3, #8
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b64:	4433      	add	r3, r6
 8001b66:	9309      	str	r3, [sp, #36]	; 0x24
 8001b68:	e767      	b.n	8001a3a <_svfiprintf_r+0x4e>
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b72:	e7a5      	b.n	8001ac0 <_svfiprintf_r+0xd4>
 8001b74:	2300      	movs	r3, #0
 8001b76:	f04f 0c0a 	mov.w	ip, #10
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	3401      	adds	r4, #1
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	4620      	mov	r0, r4
 8001b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b86:	3a30      	subs	r2, #48	; 0x30
 8001b88:	2a09      	cmp	r2, #9
 8001b8a:	d903      	bls.n	8001b94 <_svfiprintf_r+0x1a8>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0c5      	beq.n	8001b1c <_svfiprintf_r+0x130>
 8001b90:	9105      	str	r1, [sp, #20]
 8001b92:	e7c3      	b.n	8001b1c <_svfiprintf_r+0x130>
 8001b94:	4604      	mov	r4, r0
 8001b96:	2301      	movs	r3, #1
 8001b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b9c:	e7f0      	b.n	8001b80 <_svfiprintf_r+0x194>
 8001b9e:	ab03      	add	r3, sp, #12
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	462a      	mov	r2, r5
 8001ba4:	4638      	mov	r0, r7
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_svfiprintf_r+0x1fc>)
 8001ba8:	a904      	add	r1, sp, #16
 8001baa:	f3af 8000 	nop.w
 8001bae:	1c42      	adds	r2, r0, #1
 8001bb0:	4606      	mov	r6, r0
 8001bb2:	d1d6      	bne.n	8001b62 <_svfiprintf_r+0x176>
 8001bb4:	89ab      	ldrh	r3, [r5, #12]
 8001bb6:	065b      	lsls	r3, r3, #25
 8001bb8:	f53f af2c 	bmi.w	8001a14 <_svfiprintf_r+0x28>
 8001bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bbe:	b01d      	add	sp, #116	; 0x74
 8001bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc4:	ab03      	add	r3, sp, #12
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4638      	mov	r0, r7
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <_svfiprintf_r+0x1fc>)
 8001bce:	a904      	add	r1, sp, #16
 8001bd0:	f000 f87c 	bl	8001ccc <_printf_i>
 8001bd4:	e7eb      	b.n	8001bae <_svfiprintf_r+0x1c2>
 8001bd6:	bf00      	nop
 8001bd8:	08002248 	.word	0x08002248
 8001bdc:	0800224e 	.word	0x0800224e
 8001be0:	08002252 	.word	0x08002252
 8001be4:	00000000 	.word	0x00000000
 8001be8:	08001935 	.word	0x08001935

08001bec <_printf_common>:
 8001bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf0:	4616      	mov	r6, r2
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	688a      	ldr	r2, [r1, #8]
 8001bf6:	690b      	ldr	r3, [r1, #16]
 8001bf8:	4607      	mov	r7, r0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	bfb8      	it	lt
 8001bfe:	4613      	movlt	r3, r2
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c06:	460c      	mov	r4, r1
 8001c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c0c:	b10a      	cbz	r2, 8001c12 <_printf_common+0x26>
 8001c0e:	3301      	adds	r3, #1
 8001c10:	6033      	str	r3, [r6, #0]
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	0699      	lsls	r1, r3, #26
 8001c16:	bf42      	ittt	mi
 8001c18:	6833      	ldrmi	r3, [r6, #0]
 8001c1a:	3302      	addmi	r3, #2
 8001c1c:	6033      	strmi	r3, [r6, #0]
 8001c1e:	6825      	ldr	r5, [r4, #0]
 8001c20:	f015 0506 	ands.w	r5, r5, #6
 8001c24:	d106      	bne.n	8001c34 <_printf_common+0x48>
 8001c26:	f104 0a19 	add.w	sl, r4, #25
 8001c2a:	68e3      	ldr	r3, [r4, #12]
 8001c2c:	6832      	ldr	r2, [r6, #0]
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	42ab      	cmp	r3, r5
 8001c32:	dc28      	bgt.n	8001c86 <_printf_common+0x9a>
 8001c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c38:	1e13      	subs	r3, r2, #0
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	bf18      	it	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	0692      	lsls	r2, r2, #26
 8001c42:	d42d      	bmi.n	8001ca0 <_printf_common+0xb4>
 8001c44:	4649      	mov	r1, r9
 8001c46:	4638      	mov	r0, r7
 8001c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c4c:	47c0      	blx	r8
 8001c4e:	3001      	adds	r0, #1
 8001c50:	d020      	beq.n	8001c94 <_printf_common+0xa8>
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	68e5      	ldr	r5, [r4, #12]
 8001c56:	f003 0306 	and.w	r3, r3, #6
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf18      	it	ne
 8001c5e:	2500      	movne	r5, #0
 8001c60:	6832      	ldr	r2, [r6, #0]
 8001c62:	f04f 0600 	mov.w	r6, #0
 8001c66:	68a3      	ldr	r3, [r4, #8]
 8001c68:	bf08      	it	eq
 8001c6a:	1aad      	subeq	r5, r5, r2
 8001c6c:	6922      	ldr	r2, [r4, #16]
 8001c6e:	bf08      	it	eq
 8001c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bfc4      	itt	gt
 8001c78:	1a9b      	subgt	r3, r3, r2
 8001c7a:	18ed      	addgt	r5, r5, r3
 8001c7c:	341a      	adds	r4, #26
 8001c7e:	42b5      	cmp	r5, r6
 8001c80:	d11a      	bne.n	8001cb8 <_printf_common+0xcc>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e008      	b.n	8001c98 <_printf_common+0xac>
 8001c86:	2301      	movs	r3, #1
 8001c88:	4652      	mov	r2, sl
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	47c0      	blx	r8
 8001c90:	3001      	adds	r0, #1
 8001c92:	d103      	bne.n	8001c9c <_printf_common+0xb0>
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9c:	3501      	adds	r5, #1
 8001c9e:	e7c4      	b.n	8001c2a <_printf_common+0x3e>
 8001ca0:	2030      	movs	r0, #48	; 0x30
 8001ca2:	18e1      	adds	r1, r4, r3
 8001ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cae:	4422      	add	r2, r4
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cb6:	e7c5      	b.n	8001c44 <_printf_common+0x58>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4622      	mov	r2, r4
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	47c0      	blx	r8
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d0e6      	beq.n	8001c94 <_printf_common+0xa8>
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7d9      	b.n	8001c7e <_printf_common+0x92>
	...

08001ccc <_printf_i>:
 8001ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd0:	7e0f      	ldrb	r7, [r1, #24]
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	2f78      	cmp	r7, #120	; 0x78
 8001cd6:	4680      	mov	r8, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	469a      	mov	sl, r3
 8001cdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ce2:	d807      	bhi.n	8001cf4 <_printf_i+0x28>
 8001ce4:	2f62      	cmp	r7, #98	; 0x62
 8001ce6:	d80a      	bhi.n	8001cfe <_printf_i+0x32>
 8001ce8:	2f00      	cmp	r7, #0
 8001cea:	f000 80d9 	beq.w	8001ea0 <_printf_i+0x1d4>
 8001cee:	2f58      	cmp	r7, #88	; 0x58
 8001cf0:	f000 80a4 	beq.w	8001e3c <_printf_i+0x170>
 8001cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cfc:	e03a      	b.n	8001d74 <_printf_i+0xa8>
 8001cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d02:	2b15      	cmp	r3, #21
 8001d04:	d8f6      	bhi.n	8001cf4 <_printf_i+0x28>
 8001d06:	a101      	add	r1, pc, #4	; (adr r1, 8001d0c <_printf_i+0x40>)
 8001d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d0c:	08001d65 	.word	0x08001d65
 8001d10:	08001d79 	.word	0x08001d79
 8001d14:	08001cf5 	.word	0x08001cf5
 8001d18:	08001cf5 	.word	0x08001cf5
 8001d1c:	08001cf5 	.word	0x08001cf5
 8001d20:	08001cf5 	.word	0x08001cf5
 8001d24:	08001d79 	.word	0x08001d79
 8001d28:	08001cf5 	.word	0x08001cf5
 8001d2c:	08001cf5 	.word	0x08001cf5
 8001d30:	08001cf5 	.word	0x08001cf5
 8001d34:	08001cf5 	.word	0x08001cf5
 8001d38:	08001e87 	.word	0x08001e87
 8001d3c:	08001da9 	.word	0x08001da9
 8001d40:	08001e69 	.word	0x08001e69
 8001d44:	08001cf5 	.word	0x08001cf5
 8001d48:	08001cf5 	.word	0x08001cf5
 8001d4c:	08001ea9 	.word	0x08001ea9
 8001d50:	08001cf5 	.word	0x08001cf5
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001cf5 	.word	0x08001cf5
 8001d5c:	08001cf5 	.word	0x08001cf5
 8001d60:	08001e71 	.word	0x08001e71
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	602a      	str	r2, [r5, #0]
 8001d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0a4      	b.n	8001ec2 <_printf_i+0x1f6>
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	6829      	ldr	r1, [r5, #0]
 8001d7c:	0606      	lsls	r6, r0, #24
 8001d7e:	f101 0304 	add.w	r3, r1, #4
 8001d82:	d50a      	bpl.n	8001d9a <_printf_i+0xce>
 8001d84:	680e      	ldr	r6, [r1, #0]
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	da03      	bge.n	8001d94 <_printf_i+0xc8>
 8001d8c:	232d      	movs	r3, #45	; 0x2d
 8001d8e:	4276      	negs	r6, r6
 8001d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d94:	230a      	movs	r3, #10
 8001d96:	485e      	ldr	r0, [pc, #376]	; (8001f10 <_printf_i+0x244>)
 8001d98:	e019      	b.n	8001dce <_printf_i+0x102>
 8001d9a:	680e      	ldr	r6, [r1, #0]
 8001d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	bf18      	it	ne
 8001da4:	b236      	sxthne	r6, r6
 8001da6:	e7ef      	b.n	8001d88 <_printf_i+0xbc>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	1d19      	adds	r1, r3, #4
 8001dae:	6029      	str	r1, [r5, #0]
 8001db0:	0601      	lsls	r1, r0, #24
 8001db2:	d501      	bpl.n	8001db8 <_printf_i+0xec>
 8001db4:	681e      	ldr	r6, [r3, #0]
 8001db6:	e002      	b.n	8001dbe <_printf_i+0xf2>
 8001db8:	0646      	lsls	r6, r0, #25
 8001dba:	d5fb      	bpl.n	8001db4 <_printf_i+0xe8>
 8001dbc:	881e      	ldrh	r6, [r3, #0]
 8001dbe:	2f6f      	cmp	r7, #111	; 0x6f
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2308      	moveq	r3, #8
 8001dc4:	230a      	movne	r3, #10
 8001dc6:	4852      	ldr	r0, [pc, #328]	; (8001f10 <_printf_i+0x244>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dce:	6865      	ldr	r5, [r4, #4]
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	bfa8      	it	ge
 8001dd4:	6821      	ldrge	r1, [r4, #0]
 8001dd6:	60a5      	str	r5, [r4, #8]
 8001dd8:	bfa4      	itt	ge
 8001dda:	f021 0104 	bicge.w	r1, r1, #4
 8001dde:	6021      	strge	r1, [r4, #0]
 8001de0:	b90e      	cbnz	r6, 8001de6 <_printf_i+0x11a>
 8001de2:	2d00      	cmp	r5, #0
 8001de4:	d04d      	beq.n	8001e82 <_printf_i+0x1b6>
 8001de6:	4615      	mov	r5, r2
 8001de8:	fbb6 f1f3 	udiv	r1, r6, r3
 8001dec:	fb03 6711 	mls	r7, r3, r1, r6
 8001df0:	5dc7      	ldrb	r7, [r0, r7]
 8001df2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001df6:	4637      	mov	r7, r6
 8001df8:	42bb      	cmp	r3, r7
 8001dfa:	460e      	mov	r6, r1
 8001dfc:	d9f4      	bls.n	8001de8 <_printf_i+0x11c>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d10b      	bne.n	8001e1a <_printf_i+0x14e>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	07de      	lsls	r6, r3, #31
 8001e06:	d508      	bpl.n	8001e1a <_printf_i+0x14e>
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	6861      	ldr	r1, [r4, #4]
 8001e0c:	4299      	cmp	r1, r3
 8001e0e:	bfde      	ittt	le
 8001e10:	2330      	movle	r3, #48	; 0x30
 8001e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e16:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001e1a:	1b52      	subs	r2, r2, r5
 8001e1c:	6122      	str	r2, [r4, #16]
 8001e1e:	464b      	mov	r3, r9
 8001e20:	4621      	mov	r1, r4
 8001e22:	4640      	mov	r0, r8
 8001e24:	f8cd a000 	str.w	sl, [sp]
 8001e28:	aa03      	add	r2, sp, #12
 8001e2a:	f7ff fedf 	bl	8001bec <_printf_common>
 8001e2e:	3001      	adds	r0, #1
 8001e30:	d14c      	bne.n	8001ecc <_printf_i+0x200>
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e36:	b004      	add	sp, #16
 8001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3c:	4834      	ldr	r0, [pc, #208]	; (8001f10 <_printf_i+0x244>)
 8001e3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e42:	6829      	ldr	r1, [r5, #0]
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e4a:	6029      	str	r1, [r5, #0]
 8001e4c:	061d      	lsls	r5, r3, #24
 8001e4e:	d514      	bpl.n	8001e7a <_printf_i+0x1ae>
 8001e50:	07df      	lsls	r7, r3, #31
 8001e52:	bf44      	itt	mi
 8001e54:	f043 0320 	orrmi.w	r3, r3, #32
 8001e58:	6023      	strmi	r3, [r4, #0]
 8001e5a:	b91e      	cbnz	r6, 8001e64 <_printf_i+0x198>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f023 0320 	bic.w	r3, r3, #32
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	2310      	movs	r3, #16
 8001e66:	e7af      	b.n	8001dc8 <_printf_i+0xfc>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	2378      	movs	r3, #120	; 0x78
 8001e72:	4828      	ldr	r0, [pc, #160]	; (8001f14 <_printf_i+0x248>)
 8001e74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e78:	e7e3      	b.n	8001e42 <_printf_i+0x176>
 8001e7a:	0659      	lsls	r1, r3, #25
 8001e7c:	bf48      	it	mi
 8001e7e:	b2b6      	uxthmi	r6, r6
 8001e80:	e7e6      	b.n	8001e50 <_printf_i+0x184>
 8001e82:	4615      	mov	r5, r2
 8001e84:	e7bb      	b.n	8001dfe <_printf_i+0x132>
 8001e86:	682b      	ldr	r3, [r5, #0]
 8001e88:	6826      	ldr	r6, [r4, #0]
 8001e8a:	1d18      	adds	r0, r3, #4
 8001e8c:	6961      	ldr	r1, [r4, #20]
 8001e8e:	6028      	str	r0, [r5, #0]
 8001e90:	0635      	lsls	r5, r6, #24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	d501      	bpl.n	8001e9a <_printf_i+0x1ce>
 8001e96:	6019      	str	r1, [r3, #0]
 8001e98:	e002      	b.n	8001ea0 <_printf_i+0x1d4>
 8001e9a:	0670      	lsls	r0, r6, #25
 8001e9c:	d5fb      	bpl.n	8001e96 <_printf_i+0x1ca>
 8001e9e:	8019      	strh	r1, [r3, #0]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	6123      	str	r3, [r4, #16]
 8001ea6:	e7ba      	b.n	8001e1e <_printf_i+0x152>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	1d1a      	adds	r2, r3, #4
 8001eae:	602a      	str	r2, [r5, #0]
 8001eb0:	681d      	ldr	r5, [r3, #0]
 8001eb2:	6862      	ldr	r2, [r4, #4]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f000 f82f 	bl	8001f18 <memchr>
 8001eba:	b108      	cbz	r0, 8001ec0 <_printf_i+0x1f4>
 8001ebc:	1b40      	subs	r0, r0, r5
 8001ebe:	6060      	str	r0, [r4, #4]
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	6123      	str	r3, [r4, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001eca:	e7a8      	b.n	8001e1e <_printf_i+0x152>
 8001ecc:	462a      	mov	r2, r5
 8001ece:	4649      	mov	r1, r9
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	6923      	ldr	r3, [r4, #16]
 8001ed4:	47d0      	blx	sl
 8001ed6:	3001      	adds	r0, #1
 8001ed8:	d0ab      	beq.n	8001e32 <_printf_i+0x166>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	079b      	lsls	r3, r3, #30
 8001ede:	d413      	bmi.n	8001f08 <_printf_i+0x23c>
 8001ee0:	68e0      	ldr	r0, [r4, #12]
 8001ee2:	9b03      	ldr	r3, [sp, #12]
 8001ee4:	4298      	cmp	r0, r3
 8001ee6:	bfb8      	it	lt
 8001ee8:	4618      	movlt	r0, r3
 8001eea:	e7a4      	b.n	8001e36 <_printf_i+0x16a>
 8001eec:	2301      	movs	r3, #1
 8001eee:	4632      	mov	r2, r6
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	47d0      	blx	sl
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d09b      	beq.n	8001e32 <_printf_i+0x166>
 8001efa:	3501      	adds	r5, #1
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	9903      	ldr	r1, [sp, #12]
 8001f00:	1a5b      	subs	r3, r3, r1
 8001f02:	42ab      	cmp	r3, r5
 8001f04:	dcf2      	bgt.n	8001eec <_printf_i+0x220>
 8001f06:	e7eb      	b.n	8001ee0 <_printf_i+0x214>
 8001f08:	2500      	movs	r5, #0
 8001f0a:	f104 0619 	add.w	r6, r4, #25
 8001f0e:	e7f5      	b.n	8001efc <_printf_i+0x230>
 8001f10:	08002259 	.word	0x08002259
 8001f14:	0800226a 	.word	0x0800226a

08001f18 <memchr>:
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	b2c9      	uxtb	r1, r1
 8001f1e:	4402      	add	r2, r0
 8001f20:	4293      	cmp	r3, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	d101      	bne.n	8001f2a <memchr+0x12>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e003      	b.n	8001f32 <memchr+0x1a>
 8001f2a:	7804      	ldrb	r4, [r0, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	428c      	cmp	r4, r1
 8001f30:	d1f6      	bne.n	8001f20 <memchr+0x8>
 8001f32:	bd10      	pop	{r4, pc}

08001f34 <memcpy>:
 8001f34:	440a      	add	r2, r1
 8001f36:	4291      	cmp	r1, r2
 8001f38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001f3c:	d100      	bne.n	8001f40 <memcpy+0xc>
 8001f3e:	4770      	bx	lr
 8001f40:	b510      	push	{r4, lr}
 8001f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f46:	4291      	cmp	r1, r2
 8001f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f4c:	d1f9      	bne.n	8001f42 <memcpy+0xe>
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <memmove>:
 8001f50:	4288      	cmp	r0, r1
 8001f52:	b510      	push	{r4, lr}
 8001f54:	eb01 0402 	add.w	r4, r1, r2
 8001f58:	d902      	bls.n	8001f60 <memmove+0x10>
 8001f5a:	4284      	cmp	r4, r0
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	d807      	bhi.n	8001f70 <memmove+0x20>
 8001f60:	1e43      	subs	r3, r0, #1
 8001f62:	42a1      	cmp	r1, r4
 8001f64:	d008      	beq.n	8001f78 <memmove+0x28>
 8001f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f6e:	e7f8      	b.n	8001f62 <memmove+0x12>
 8001f70:	4601      	mov	r1, r0
 8001f72:	4402      	add	r2, r0
 8001f74:	428a      	cmp	r2, r1
 8001f76:	d100      	bne.n	8001f7a <memmove+0x2a>
 8001f78:	bd10      	pop	{r4, pc}
 8001f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f82:	e7f7      	b.n	8001f74 <memmove+0x24>

08001f84 <_free_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4605      	mov	r5, r0
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	d040      	beq.n	800200e <_free_r+0x8a>
 8001f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f90:	1f0c      	subs	r4, r1, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bfb8      	it	lt
 8001f96:	18e4      	addlt	r4, r4, r3
 8001f98:	f000 f910 	bl	80021bc <__malloc_lock>
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <_free_r+0x8c>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	b933      	cbnz	r3, 8001fb0 <_free_r+0x2c>
 8001fa2:	6063      	str	r3, [r4, #4]
 8001fa4:	6014      	str	r4, [r2, #0]
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fac:	f000 b90c 	b.w	80021c8 <__malloc_unlock>
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	d908      	bls.n	8001fc6 <_free_r+0x42>
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	1821      	adds	r1, r4, r0
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	bf01      	itttt	eq
 8001fbc:	6819      	ldreq	r1, [r3, #0]
 8001fbe:	685b      	ldreq	r3, [r3, #4]
 8001fc0:	1809      	addeq	r1, r1, r0
 8001fc2:	6021      	streq	r1, [r4, #0]
 8001fc4:	e7ed      	b.n	8001fa2 <_free_r+0x1e>
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	b10b      	cbz	r3, 8001fd0 <_free_r+0x4c>
 8001fcc:	42a3      	cmp	r3, r4
 8001fce:	d9fa      	bls.n	8001fc6 <_free_r+0x42>
 8001fd0:	6811      	ldr	r1, [r2, #0]
 8001fd2:	1850      	adds	r0, r2, r1
 8001fd4:	42a0      	cmp	r0, r4
 8001fd6:	d10b      	bne.n	8001ff0 <_free_r+0x6c>
 8001fd8:	6820      	ldr	r0, [r4, #0]
 8001fda:	4401      	add	r1, r0
 8001fdc:	1850      	adds	r0, r2, r1
 8001fde:	4283      	cmp	r3, r0
 8001fe0:	6011      	str	r1, [r2, #0]
 8001fe2:	d1e0      	bne.n	8001fa6 <_free_r+0x22>
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4401      	add	r1, r0
 8001fea:	6011      	str	r1, [r2, #0]
 8001fec:	6053      	str	r3, [r2, #4]
 8001fee:	e7da      	b.n	8001fa6 <_free_r+0x22>
 8001ff0:	d902      	bls.n	8001ff8 <_free_r+0x74>
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	e7d6      	b.n	8001fa6 <_free_r+0x22>
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	1821      	adds	r1, r4, r0
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	bf01      	itttt	eq
 8002000:	6819      	ldreq	r1, [r3, #0]
 8002002:	685b      	ldreq	r3, [r3, #4]
 8002004:	1809      	addeq	r1, r1, r0
 8002006:	6021      	streq	r1, [r4, #0]
 8002008:	6063      	str	r3, [r4, #4]
 800200a:	6054      	str	r4, [r2, #4]
 800200c:	e7cb      	b.n	8001fa6 <_free_r+0x22>
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	20000104 	.word	0x20000104

08002014 <sbrk_aligned>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4e0e      	ldr	r6, [pc, #56]	; (8002050 <sbrk_aligned+0x3c>)
 8002018:	460c      	mov	r4, r1
 800201a:	6831      	ldr	r1, [r6, #0]
 800201c:	4605      	mov	r5, r0
 800201e:	b911      	cbnz	r1, 8002026 <sbrk_aligned+0x12>
 8002020:	f000 f8bc 	bl	800219c <_sbrk_r>
 8002024:	6030      	str	r0, [r6, #0]
 8002026:	4621      	mov	r1, r4
 8002028:	4628      	mov	r0, r5
 800202a:	f000 f8b7 	bl	800219c <_sbrk_r>
 800202e:	1c43      	adds	r3, r0, #1
 8002030:	d00a      	beq.n	8002048 <sbrk_aligned+0x34>
 8002032:	1cc4      	adds	r4, r0, #3
 8002034:	f024 0403 	bic.w	r4, r4, #3
 8002038:	42a0      	cmp	r0, r4
 800203a:	d007      	beq.n	800204c <sbrk_aligned+0x38>
 800203c:	1a21      	subs	r1, r4, r0
 800203e:	4628      	mov	r0, r5
 8002040:	f000 f8ac 	bl	800219c <_sbrk_r>
 8002044:	3001      	adds	r0, #1
 8002046:	d101      	bne.n	800204c <sbrk_aligned+0x38>
 8002048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800204c:	4620      	mov	r0, r4
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	20000108 	.word	0x20000108

08002054 <_malloc_r>:
 8002054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002058:	1ccd      	adds	r5, r1, #3
 800205a:	f025 0503 	bic.w	r5, r5, #3
 800205e:	3508      	adds	r5, #8
 8002060:	2d0c      	cmp	r5, #12
 8002062:	bf38      	it	cc
 8002064:	250c      	movcc	r5, #12
 8002066:	2d00      	cmp	r5, #0
 8002068:	4607      	mov	r7, r0
 800206a:	db01      	blt.n	8002070 <_malloc_r+0x1c>
 800206c:	42a9      	cmp	r1, r5
 800206e:	d905      	bls.n	800207c <_malloc_r+0x28>
 8002070:	230c      	movs	r3, #12
 8002072:	2600      	movs	r6, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4630      	mov	r0, r6
 8002078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800207c:	4e2e      	ldr	r6, [pc, #184]	; (8002138 <_malloc_r+0xe4>)
 800207e:	f000 f89d 	bl	80021bc <__malloc_lock>
 8002082:	6833      	ldr	r3, [r6, #0]
 8002084:	461c      	mov	r4, r3
 8002086:	bb34      	cbnz	r4, 80020d6 <_malloc_r+0x82>
 8002088:	4629      	mov	r1, r5
 800208a:	4638      	mov	r0, r7
 800208c:	f7ff ffc2 	bl	8002014 <sbrk_aligned>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	4604      	mov	r4, r0
 8002094:	d14d      	bne.n	8002132 <_malloc_r+0xde>
 8002096:	6834      	ldr	r4, [r6, #0]
 8002098:	4626      	mov	r6, r4
 800209a:	2e00      	cmp	r6, #0
 800209c:	d140      	bne.n	8002120 <_malloc_r+0xcc>
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	4631      	mov	r1, r6
 80020a2:	4638      	mov	r0, r7
 80020a4:	eb04 0803 	add.w	r8, r4, r3
 80020a8:	f000 f878 	bl	800219c <_sbrk_r>
 80020ac:	4580      	cmp	r8, r0
 80020ae:	d13a      	bne.n	8002126 <_malloc_r+0xd2>
 80020b0:	6821      	ldr	r1, [r4, #0]
 80020b2:	3503      	adds	r5, #3
 80020b4:	1a6d      	subs	r5, r5, r1
 80020b6:	f025 0503 	bic.w	r5, r5, #3
 80020ba:	3508      	adds	r5, #8
 80020bc:	2d0c      	cmp	r5, #12
 80020be:	bf38      	it	cc
 80020c0:	250c      	movcc	r5, #12
 80020c2:	4638      	mov	r0, r7
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7ff ffa5 	bl	8002014 <sbrk_aligned>
 80020ca:	3001      	adds	r0, #1
 80020cc:	d02b      	beq.n	8002126 <_malloc_r+0xd2>
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	442b      	add	r3, r5
 80020d2:	6023      	str	r3, [r4, #0]
 80020d4:	e00e      	b.n	80020f4 <_malloc_r+0xa0>
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	1b52      	subs	r2, r2, r5
 80020da:	d41e      	bmi.n	800211a <_malloc_r+0xc6>
 80020dc:	2a0b      	cmp	r2, #11
 80020de:	d916      	bls.n	800210e <_malloc_r+0xba>
 80020e0:	1961      	adds	r1, r4, r5
 80020e2:	42a3      	cmp	r3, r4
 80020e4:	6025      	str	r5, [r4, #0]
 80020e6:	bf18      	it	ne
 80020e8:	6059      	strne	r1, [r3, #4]
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	bf08      	it	eq
 80020ee:	6031      	streq	r1, [r6, #0]
 80020f0:	5162      	str	r2, [r4, r5]
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	4638      	mov	r0, r7
 80020f6:	f104 060b 	add.w	r6, r4, #11
 80020fa:	f000 f865 	bl	80021c8 <__malloc_unlock>
 80020fe:	f026 0607 	bic.w	r6, r6, #7
 8002102:	1d23      	adds	r3, r4, #4
 8002104:	1af2      	subs	r2, r6, r3
 8002106:	d0b6      	beq.n	8002076 <_malloc_r+0x22>
 8002108:	1b9b      	subs	r3, r3, r6
 800210a:	50a3      	str	r3, [r4, r2]
 800210c:	e7b3      	b.n	8002076 <_malloc_r+0x22>
 800210e:	6862      	ldr	r2, [r4, #4]
 8002110:	42a3      	cmp	r3, r4
 8002112:	bf0c      	ite	eq
 8002114:	6032      	streq	r2, [r6, #0]
 8002116:	605a      	strne	r2, [r3, #4]
 8002118:	e7ec      	b.n	80020f4 <_malloc_r+0xa0>
 800211a:	4623      	mov	r3, r4
 800211c:	6864      	ldr	r4, [r4, #4]
 800211e:	e7b2      	b.n	8002086 <_malloc_r+0x32>
 8002120:	4634      	mov	r4, r6
 8002122:	6876      	ldr	r6, [r6, #4]
 8002124:	e7b9      	b.n	800209a <_malloc_r+0x46>
 8002126:	230c      	movs	r3, #12
 8002128:	4638      	mov	r0, r7
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	f000 f84c 	bl	80021c8 <__malloc_unlock>
 8002130:	e7a1      	b.n	8002076 <_malloc_r+0x22>
 8002132:	6025      	str	r5, [r4, #0]
 8002134:	e7de      	b.n	80020f4 <_malloc_r+0xa0>
 8002136:	bf00      	nop
 8002138:	20000104 	.word	0x20000104

0800213c <_realloc_r>:
 800213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002140:	4680      	mov	r8, r0
 8002142:	4614      	mov	r4, r2
 8002144:	460e      	mov	r6, r1
 8002146:	b921      	cbnz	r1, 8002152 <_realloc_r+0x16>
 8002148:	4611      	mov	r1, r2
 800214a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800214e:	f7ff bf81 	b.w	8002054 <_malloc_r>
 8002152:	b92a      	cbnz	r2, 8002160 <_realloc_r+0x24>
 8002154:	f7ff ff16 	bl	8001f84 <_free_r>
 8002158:	4625      	mov	r5, r4
 800215a:	4628      	mov	r0, r5
 800215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002160:	f000 f838 	bl	80021d4 <_malloc_usable_size_r>
 8002164:	4284      	cmp	r4, r0
 8002166:	4607      	mov	r7, r0
 8002168:	d802      	bhi.n	8002170 <_realloc_r+0x34>
 800216a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800216e:	d812      	bhi.n	8002196 <_realloc_r+0x5a>
 8002170:	4621      	mov	r1, r4
 8002172:	4640      	mov	r0, r8
 8002174:	f7ff ff6e 	bl	8002054 <_malloc_r>
 8002178:	4605      	mov	r5, r0
 800217a:	2800      	cmp	r0, #0
 800217c:	d0ed      	beq.n	800215a <_realloc_r+0x1e>
 800217e:	42bc      	cmp	r4, r7
 8002180:	4622      	mov	r2, r4
 8002182:	4631      	mov	r1, r6
 8002184:	bf28      	it	cs
 8002186:	463a      	movcs	r2, r7
 8002188:	f7ff fed4 	bl	8001f34 <memcpy>
 800218c:	4631      	mov	r1, r6
 800218e:	4640      	mov	r0, r8
 8002190:	f7ff fef8 	bl	8001f84 <_free_r>
 8002194:	e7e1      	b.n	800215a <_realloc_r+0x1e>
 8002196:	4635      	mov	r5, r6
 8002198:	e7df      	b.n	800215a <_realloc_r+0x1e>
	...

0800219c <_sbrk_r>:
 800219c:	b538      	push	{r3, r4, r5, lr}
 800219e:	2300      	movs	r3, #0
 80021a0:	4d05      	ldr	r5, [pc, #20]	; (80021b8 <_sbrk_r+0x1c>)
 80021a2:	4604      	mov	r4, r0
 80021a4:	4608      	mov	r0, r1
 80021a6:	602b      	str	r3, [r5, #0]
 80021a8:	f7fe f944 	bl	8000434 <_sbrk>
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d102      	bne.n	80021b6 <_sbrk_r+0x1a>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	b103      	cbz	r3, 80021b6 <_sbrk_r+0x1a>
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
 80021b8:	2000010c 	.word	0x2000010c

080021bc <__malloc_lock>:
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <__malloc_lock+0x8>)
 80021be:	f000 b811 	b.w	80021e4 <__retarget_lock_acquire_recursive>
 80021c2:	bf00      	nop
 80021c4:	20000110 	.word	0x20000110

080021c8 <__malloc_unlock>:
 80021c8:	4801      	ldr	r0, [pc, #4]	; (80021d0 <__malloc_unlock+0x8>)
 80021ca:	f000 b80c 	b.w	80021e6 <__retarget_lock_release_recursive>
 80021ce:	bf00      	nop
 80021d0:	20000110 	.word	0x20000110

080021d4 <_malloc_usable_size_r>:
 80021d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021d8:	1f18      	subs	r0, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bfbc      	itt	lt
 80021de:	580b      	ldrlt	r3, [r1, r0]
 80021e0:	18c0      	addlt	r0, r0, r3
 80021e2:	4770      	bx	lr

080021e4 <__retarget_lock_acquire_recursive>:
 80021e4:	4770      	bx	lr

080021e6 <__retarget_lock_release_recursive>:
 80021e6:	4770      	bx	lr

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
