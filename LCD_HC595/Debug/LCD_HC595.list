
LCD_HC595.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800188c  0800188c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800188c  0800188c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800188c  0800188c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080018a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080018a0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006068  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011cf  00000000  00000000  0002609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00027270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00027930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac2  00000000  00000000  00027f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082d6  00000000  00000000  0003ea42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821a4  00000000  00000000  00046d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae4  00000000  00000000  000c8f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001840 	.word	0x08001840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001840 	.word	0x08001840

0800014c <hc595_trans>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void hc595_trans(uint8_t c)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<8;i++)
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e02a      	b.n	80001b2 <hc595_trans+0x66>
	{
		uint8_t x = c & (0x01<<(7-i));
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	f1c3 0307 	rsb	r3, r3, #7
 8000162:	2201      	movs	r2, #1
 8000164:	fa02 f303 	lsl.w	r3, r2, r3
 8000168:	b25a      	sxtb	r2, r3
 800016a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016e:	4013      	ands	r3, r2
 8000170:	b25b      	sxtb	r3, r3
 8000172:	72fb      	strb	r3, [r7, #11]

		if(x)
 8000174:	7afb      	ldrb	r3, [r7, #11]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d006      	beq.n	8000188 <hc595_trans+0x3c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000180:	4815      	ldr	r0, [pc, #84]	; (80001d8 <hc595_trans+0x8c>)
 8000182:	f000 fdcf 	bl	8000d24 <HAL_GPIO_WritePin>
 8000186:	e005      	b.n	8000194 <hc595_trans+0x48>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000188:	2200      	movs	r2, #0
 800018a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800018e:	4812      	ldr	r0, [pc, #72]	; (80001d8 <hc595_trans+0x8c>)
 8000190:	f000 fdc8 	bl	8000d24 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800019a:	480f      	ldr	r0, [pc, #60]	; (80001d8 <hc595_trans+0x8c>)
 800019c:	f000 fdc2 	bl	8000d24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <hc595_trans+0x8c>)
 80001a8:	f000 fdbc 	bl	8000d24 <HAL_GPIO_WritePin>
	for(int i = 0;i<8;i++)
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	2b07      	cmp	r3, #7
 80001b6:	ddd1      	ble.n	800015c <hc595_trans+0x10>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001be:	4806      	ldr	r0, [pc, #24]	; (80001d8 <hc595_trans+0x8c>)
 80001c0:	f000 fdb0 	bl	8000d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ca:	4803      	ldr	r0, [pc, #12]	; (80001d8 <hc595_trans+0x8c>)
 80001cc:	f000 fdaa 	bl	8000d24 <HAL_GPIO_WritePin>
}
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010800 	.word	0x40010800

080001dc <lcd_Send_Cmd>:
void lcd_Send_Cmd(char cmd) //Mỗi lần gửi sẽ gửi 4 bit cao xong rồi đến 4 bit thấp
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l; // vi du 0x30
	uint8_t data_t[4];
	data_u = (cmd & 0xf0); // data_u = 	0x30
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f023 030f 	bic.w	r3, r3, #15
 80001ec:	74fb      	strb	r3, [r7, #19]
	data_l = ((cmd << 4) & 0xf0); // data_l = 0x00
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	011b      	lsls	r3, r3, #4
 80001f2:	74bb      	strb	r3, [r7, #18]
	data_t[0] = data_u | 0x0C; // 0000 1100 | 0011 0000 = 0011 1100 = 0x3C // C và 8 thay đổi bit thứ 6 0 1 nhằm EN
 80001f4:	7cfb      	ldrb	r3, [r7, #19]
 80001f6:	f043 030c 	orr.w	r3, r3, #12
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	733b      	strb	r3, [r7, #12]
	data_t[1] = data_u | 0x08; // 0000 1000 | 0011 0000 = 0011 1000 = 0x38
 80001fe:	7cfb      	ldrb	r3, [r7, #19]
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	b2db      	uxtb	r3, r3
 8000206:	737b      	strb	r3, [r7, #13]
	data_t[2] = data_l | 0x0C; // 0000 1100 | 0000 0000 = 0000 1100 = 0x0C
 8000208:	7cbb      	ldrb	r3, [r7, #18]
 800020a:	f043 030c 	orr.w	r3, r3, #12
 800020e:	b2db      	uxtb	r3, r3
 8000210:	73bb      	strb	r3, [r7, #14]
	data_t[3] = data_l | 0x08; // 0000 1000 | 0000 0000 = 0000 1000 = 0x08
 8000212:	7cbb      	ldrb	r3, [r7, #18]
 8000214:	f043 0308 	orr.w	r3, r3, #8
 8000218:	b2db      	uxtb	r3, r3
 800021a:	73fb      	strb	r3, [r7, #15]

	for(int i = 0;i<4;i++)
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]
 8000220:	e00a      	b.n	8000238 <lcd_Send_Cmd+0x5c>
	{
		hc595_trans(data_t[i]);
 8000222:	f107 020c 	add.w	r2, r7, #12
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	4413      	add	r3, r2
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ff8d 	bl	800014c <hc595_trans>
	for(int i = 0;i<4;i++)
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	3301      	adds	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	2b03      	cmp	r3, #3
 800023c:	ddf1      	ble.n	8000222 <lcd_Send_Cmd+0x46>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
	}
	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	3718      	adds	r7, #24
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <lcd_Send_Data>:
void lcd_Send_Data(char data)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	char data_u,data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f023 030f 	bic.w	r3, r3, #15
 8000258:	74fb      	strb	r3, [r7, #19]
	data_l = ((data << 4) & 0xf0);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	011b      	lsls	r3, r3, #4
 800025e:	74bb      	strb	r3, [r7, #18]
	data_t[0] = data_u | 0x0D; // 1101
 8000260:	7cfb      	ldrb	r3, [r7, #19]
 8000262:	f043 030d 	orr.w	r3, r3, #13
 8000266:	b2db      	uxtb	r3, r3
 8000268:	733b      	strb	r3, [r7, #12]
	data_t[1] = data_u | 0x09; // 1001
 800026a:	7cfb      	ldrb	r3, [r7, #19]
 800026c:	f043 0309 	orr.w	r3, r3, #9
 8000270:	b2db      	uxtb	r3, r3
 8000272:	737b      	strb	r3, [r7, #13]
	data_t[2] = data_l | 0x0D;
 8000274:	7cbb      	ldrb	r3, [r7, #18]
 8000276:	f043 030d 	orr.w	r3, r3, #13
 800027a:	b2db      	uxtb	r3, r3
 800027c:	73bb      	strb	r3, [r7, #14]
	data_t[3] = data_l | 0x09;
 800027e:	7cbb      	ldrb	r3, [r7, #18]
 8000280:	f043 0309 	orr.w	r3, r3, #9
 8000284:	b2db      	uxtb	r3, r3
 8000286:	73fb      	strb	r3, [r7, #15]


	for(int i = 0;i<4;i++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e00a      	b.n	80002a4 <lcd_Send_Data+0x5c>
	{
		hc595_trans(data_t[i]);
 800028e:	f107 020c 	add.w	r2, r7, #12
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	4413      	add	r3, r2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff57 	bl	800014c <hc595_trans>
	for(int i = 0;i<4;i++)
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	3301      	adds	r3, #1
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	ddf1      	ble.n	800028e <lcd_Send_Data+0x46>

	}

	//HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1,(uint8_t *)data_t, 4, 100);
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <lcd_Put_Cur>:
	{
		lcd_Send_Data(' ');
	}
}
void lcd_Put_Cur(int row,int col)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	switch(row)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <lcd_Put_Cur+0x18>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d005      	beq.n	80002d6 <lcd_Put_Cur+0x22>
 80002ca:	e009      	b.n	80002e0 <lcd_Put_Cur+0x2c>
	{
		case 0:
			col |= 0x80; //0x80 1 000 000x
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	603b      	str	r3, [r7, #0]
			break;
 80002d4:	e004      	b.n	80002e0 <lcd_Put_Cur+0x2c>
		case 1:
			col |= 0xC0; // 0xC1 1 100 000x
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002dc:	603b      	str	r3, [r7, #0]
			break;
 80002de:	bf00      	nop
	}
	//Gửi lệnh ứng với vị trí cần xuất hiện con trỏ Set DDRAM address tr24
	lcd_Send_Cmd(col);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff79 	bl	80001dc <lcd_Send_Cmd>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <lcd_Init>:
void lcd_Init(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
	// Khởi tạo 4 bit
	HAL_Delay(50);
 80002f6:	2032      	movs	r0, #50	; 0x32
 80002f8:	f000 fa88 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x30);
 80002fc:	2030      	movs	r0, #48	; 0x30
 80002fe:	f7ff ff6d 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(5);
 8000302:	2005      	movs	r0, #5
 8000304:	f000 fa82 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8000308:	2030      	movs	r0, #48	; 0x30
 800030a:	f7ff ff67 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f000 fa7c 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x30);
 8000314:	2030      	movs	r0, #48	; 0x30
 8000316:	f7ff ff61 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(10);
 800031a:	200a      	movs	r0, #10
 800031c:	f000 fa76 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x20);
 8000320:	2020      	movs	r0, #32
 8000322:	f7ff ff5b 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(10);
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fa70 	bl	800080c <HAL_Delay>
	// Khởi tạo hiển thị
	//00 00 101 00
	lcd_Send_Cmd(0x28); //function set bảng 6/tr23: set data interface 4bits 2lines 5x8 bit
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f7ff ff55 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(1);
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fa6a 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x08); //display on/off control
 8000338:	2008      	movs	r0, #8
 800033a:	f7ff ff4f 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fa64 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x01); //clear display
 8000344:	2001      	movs	r0, #1
 8000346:	f7ff ff49 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(1);
 800034a:	2001      	movs	r0, #1
 800034c:	f000 fa5e 	bl	800080c <HAL_Delay>
	HAL_Delay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fa5b 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x06); //entry mode set: i/d=1 increment s=0
 8000356:	2006      	movs	r0, #6
 8000358:	f7ff ff40 	bl	80001dc <lcd_Send_Cmd>
	HAL_Delay(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fa55 	bl	800080c <HAL_Delay>
	lcd_Send_Cmd(0x0C); // cho phep hien thi man hinh
 8000362:	200c      	movs	r0, #12
 8000364:	f7ff ff3a 	bl	80001dc <lcd_Send_Cmd>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <lcd_Send_String>:
void lcd_Send_String(char *str)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	while(*str) lcd_Send_Data(*str++);
 8000374:	e006      	b.n	8000384 <lcd_Send_String+0x18>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	607a      	str	r2, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff62 	bl	8000248 <lcd_Send_Data>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f4      	bne.n	8000376 <lcd_Send_String+0xa>
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039c:	f000 f9d4 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a0:	f000 f824 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a4:	f000 f896 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003a8:	f000 f866 	bl	8000478 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <main+0x4c>)
 80003b4:	f000 fcb6 	bl	8000d24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <main+0x4c>)
 80003c0:	f000 fcb0 	bl	8000d24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	4806      	ldr	r0, [pc, #24]	; (80003e4 <main+0x4c>)
 80003cc:	f000 fcaa 	bl	8000d24 <HAL_GPIO_WritePin>
  lcd_Init();
 80003d0:	f7ff ff8f 	bl	80002f2 <lcd_Init>
  lcd_Put_Cur(0, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff6c 	bl	80002b4 <lcd_Put_Cur>
  lcd_Send_String("DCMHC595");
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <main+0x50>)
 80003de:	f7ff ffc5 	bl	800036c <lcd_Send_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x4a>
 80003e4:	40010800 	.word	0x40010800
 80003e8:	08001858 	.word	0x08001858

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	; 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fa18 	bl	8001830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040e:	2301      	movs	r3, #1
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	2301      	movs	r3, #1
 800041e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800042e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fdd1 	bl	8000fdc <HAL_RCC_OscConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000440:	f000 f8b8 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	230f      	movs	r3, #15
 8000446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	2302      	movs	r3, #2
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f001 f83e 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800046a:	f000 f8a3 	bl	80005b4 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3740      	adds	r7, #64	; 0x40
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_I2C1_Init+0x50>)
 800047e:	4a13      	ldr	r2, [pc, #76]	; (80004cc <MX_I2C1_Init+0x54>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_I2C1_Init+0x50>)
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_I2C1_Init+0x58>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_I2C1_Init+0x50>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_I2C1_Init+0x50>)
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_I2C1_Init+0x50>)
 8000496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800049a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <MX_I2C1_Init+0x50>)
 800049e:	2200      	movs	r2, #0
 80004a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_I2C1_Init+0x50>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <MX_I2C1_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_I2C1_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_I2C1_Init+0x50>)
 80004b6:	f000 fc4d 	bl	8000d54 <HAL_I2C_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004c0:	f000 f878 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000028 	.word	0x20000028
 80004cc:	40005400 	.word	0x40005400
 80004d0:	000186a0 	.word	0x000186a0

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e8:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <MX_GPIO_Init+0xd4>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <MX_GPIO_Init+0xd4>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xd4>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0320 	and.w	r3, r3, #32
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xd4>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <MX_GPIO_Init+0xd4>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xd4>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xd4>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xd4>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_GPIO_Init+0xd4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|LATCH_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8000536:	481d      	ldr	r0, [pc, #116]	; (80005ac <MX_GPIO_Init+0xd8>)
 8000538:	f000 fbf4 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_RESET_GPIO_Port, M_RESET_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xdc>)
 8000542:	f000 fbef 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000546:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000554:	2303      	movs	r3, #3
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <MX_GPIO_Init+0xd8>)
 8000560:	f000 fa5c 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_Pin */
  GPIO_InitStruct.Pin = LATCH_Pin;
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000572:	2303      	movs	r3, #3
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_GPIO_Init+0xd8>)
 800057e:	f000 fa4d 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : M_RESET_Pin */
  GPIO_InitStruct.Pin = M_RESET_Pin;
 8000582:	2308      	movs	r3, #8
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058e:	2303      	movs	r3, #3
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M_RESET_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xdc>)
 800059a:	f000 fa3f 	bl	8000a1c <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_MspInit+0x5c>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_MspInit+0x5c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x5c>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x5c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_MspInit+0x60>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_MspInit+0x60>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000
 8000620:	40010000 	.word	0x40010000

08000624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <HAL_I2C_MspInit+0x70>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d123      	bne.n	800068c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_I2C_MspInit+0x74>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_I2C_MspInit+0x74>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <HAL_I2C_MspInit+0x74>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800065c:	23c0      	movs	r3, #192	; 0xc0
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000660:	2312      	movs	r3, #18
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <HAL_I2C_MspInit+0x78>)
 8000670:	f000 f9d4 	bl	8000a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_I2C_MspInit+0x74>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_I2C_MspInit+0x74>)
 800067a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067e:	61d3      	str	r3, [r2, #28]
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_I2C_MspInit+0x74>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40005400 	.word	0x40005400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010c00 	.word	0x40010c00

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f875 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	; (8000740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000722:	f7ff ffe4 	bl	80006ee <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 f85f 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fe35 	bl	8000398 <main>
  bx lr
 800072e:	4770      	bx	lr
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000738:	08001894 	.word	0x08001894
  ldr r2, =_sbss
 800073c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000740:	20000080 	.word	0x20000080

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f92b 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff ff2c 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f935 	bl	8000a02 <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f000 f90b 	bl	80009ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	2000007c 	.word	0x2000007c

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000007c 	.word	0x2000007c

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff0 	bl	80007f8 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffe0 	bl	80007f8 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f7ff ff90 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff49 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff5e 	bl	800089c <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff90 	bl	800090c <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5f 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffb0 	bl	8000970 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b08b      	sub	sp, #44	; 0x2c
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e169      	b.n	8000d04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a30:	2201      	movs	r2, #1
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f040 8158 	bne.w	8000cfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a9a      	ldr	r2, [pc, #616]	; (8000cbc <HAL_GPIO_Init+0x2a0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d05e      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
 8000a58:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_GPIO_Init+0x2a0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d875      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a5e:	4a98      	ldr	r2, [pc, #608]	; (8000cc0 <HAL_GPIO_Init+0x2a4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d058      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
 8000a64:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <HAL_GPIO_Init+0x2a4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d86f      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a6a:	4a96      	ldr	r2, [pc, #600]	; (8000cc4 <HAL_GPIO_Init+0x2a8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d052      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
 8000a70:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <HAL_GPIO_Init+0x2a8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d869      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a76:	4a94      	ldr	r2, [pc, #592]	; (8000cc8 <HAL_GPIO_Init+0x2ac>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d04c      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
 8000a7c:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d863      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a82:	4a92      	ldr	r2, [pc, #584]	; (8000ccc <HAL_GPIO_Init+0x2b0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d046      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
 8000a88:	4a90      	ldr	r2, [pc, #576]	; (8000ccc <HAL_GPIO_Init+0x2b0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d85d      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d82a      	bhi.n	8000ae8 <HAL_GPIO_Init+0xcc>
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d859      	bhi.n	8000b4a <HAL_GPIO_Init+0x12e>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <HAL_GPIO_Init+0x80>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000b17 	.word	0x08000b17
 8000aa0:	08000af1 	.word	0x08000af1
 8000aa4:	08000b03 	.word	0x08000b03
 8000aa8:	08000b45 	.word	0x08000b45
 8000aac:	08000b4b 	.word	0x08000b4b
 8000ab0:	08000b4b 	.word	0x08000b4b
 8000ab4:	08000b4b 	.word	0x08000b4b
 8000ab8:	08000b4b 	.word	0x08000b4b
 8000abc:	08000b4b 	.word	0x08000b4b
 8000ac0:	08000b4b 	.word	0x08000b4b
 8000ac4:	08000b4b 	.word	0x08000b4b
 8000ac8:	08000b4b 	.word	0x08000b4b
 8000acc:	08000b4b 	.word	0x08000b4b
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b4b 	.word	0x08000b4b
 8000ad8:	08000b4b 	.word	0x08000b4b
 8000adc:	08000b4b 	.word	0x08000b4b
 8000ae0:	08000af9 	.word	0x08000af9
 8000ae4:	08000b0d 	.word	0x08000b0d
 8000ae8:	4a79      	ldr	r2, [pc, #484]	; (8000cd0 <HAL_GPIO_Init+0x2b4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d013      	beq.n	8000b16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aee:	e02c      	b.n	8000b4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e029      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	3304      	adds	r3, #4
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e024      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	3308      	adds	r3, #8
 8000b08:	623b      	str	r3, [r7, #32]
          break;
 8000b0a:	e01f      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	330c      	adds	r3, #12
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e01a      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e013      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d105      	bne.n	8000b38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	611a      	str	r2, [r3, #16]
          break;
 8000b36:	e009      	b.n	8000b4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	615a      	str	r2, [r3, #20]
          break;
 8000b42:	e003      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x130>
          break;
 8000b4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d801      	bhi.n	8000b56 <HAL_GPIO_Init+0x13a>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	e001      	b.n	8000b5a <HAL_GPIO_Init+0x13e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2bff      	cmp	r3, #255	; 0xff
 8000b60:	d802      	bhi.n	8000b68 <HAL_GPIO_Init+0x14c>
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	e002      	b.n	8000b6e <HAL_GPIO_Init+0x152>
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3b08      	subs	r3, #8
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	210f      	movs	r1, #15
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	401a      	ands	r2, r3
 8000b80:	6a39      	ldr	r1, [r7, #32]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80b1 	beq.w	8000cfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a4c      	ldr	r2, [pc, #304]	; (8000cd4 <HAL_GPIO_Init+0x2b8>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <HAL_GPIO_Init+0x2b8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb4:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <HAL_GPIO_Init+0x2bc>)
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a40      	ldr	r2, [pc, #256]	; (8000cdc <HAL_GPIO_Init+0x2c0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d013      	beq.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <HAL_GPIO_Init+0x2c4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d00d      	beq.n	8000c04 <HAL_GPIO_Init+0x1e8>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3e      	ldr	r2, [pc, #248]	; (8000ce4 <HAL_GPIO_Init+0x2c8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d007      	beq.n	8000c00 <HAL_GPIO_Init+0x1e4>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a3d      	ldr	r2, [pc, #244]	; (8000ce8 <HAL_GPIO_Init+0x2cc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d101      	bne.n	8000bfc <HAL_GPIO_Init+0x1e0>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e006      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e004      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e002      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0c:	f002 0203 	and.w	r2, r2, #3
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	4093      	lsls	r3, r2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c1a:	492f      	ldr	r1, [pc, #188]	; (8000cd8 <HAL_GPIO_Init+0x2bc>)
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3302      	adds	r3, #2
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	492c      	ldr	r1, [pc, #176]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4928      	ldr	r1, [pc, #160]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	4922      	ldr	r1, [pc, #136]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	604b      	str	r3, [r1, #4]
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	491e      	ldr	r1, [pc, #120]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	4918      	ldr	r1, [pc, #96]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4914      	ldr	r1, [pc, #80]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d021      	beq.n	8000cf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	490e      	ldr	r1, [pc, #56]	; (8000cec <HAL_GPIO_Init+0x2d0>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60cb      	str	r3, [r1, #12]
 8000cb8:	e021      	b.n	8000cfe <HAL_GPIO_Init+0x2e2>
 8000cba:	bf00      	nop
 8000cbc:	10320000 	.word	0x10320000
 8000cc0:	10310000 	.word	0x10310000
 8000cc4:	10220000 	.word	0x10220000
 8000cc8:	10210000 	.word	0x10210000
 8000ccc:	10120000 	.word	0x10120000
 8000cd0:	10110000 	.word	0x10110000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	40011400 	.word	0x40011400
 8000cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_GPIO_Init+0x304>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4909      	ldr	r1, [pc, #36]	; (8000d20 <HAL_GPIO_Init+0x304>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f47f ae8e 	bne.w	8000a30 <HAL_GPIO_Init+0x14>
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	372c      	adds	r7, #44	; 0x2c
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40010400 	.word	0x40010400

08000d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d40:	e003      	b.n	8000d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	041a      	lsls	r2, r3, #16
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	611a      	str	r2, [r3, #16]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e12b      	b.n	8000fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fc52 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2224      	movs	r2, #36	; 0x24
 8000d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000db8:	f000 fce4 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8000dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	4a81      	ldr	r2, [pc, #516]	; (8000fc8 <HAL_I2C_Init+0x274>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d807      	bhi.n	8000dd8 <HAL_I2C_Init+0x84>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a80      	ldr	r2, [pc, #512]	; (8000fcc <HAL_I2C_Init+0x278>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	bf94      	ite	ls
 8000dd0:	2301      	movls	r3, #1
 8000dd2:	2300      	movhi	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	e006      	b.n	8000de6 <HAL_I2C_Init+0x92>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <HAL_I2C_Init+0x27c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bf94      	ite	ls
 8000de0:	2301      	movls	r3, #1
 8000de2:	2300      	movhi	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0e7      	b.n	8000fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4a78      	ldr	r2, [pc, #480]	; (8000fd4 <HAL_I2C_Init+0x280>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a6a      	ldr	r2, [pc, #424]	; (8000fc8 <HAL_I2C_Init+0x274>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d802      	bhi.n	8000e28 <HAL_I2C_Init+0xd4>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3301      	adds	r3, #1
 8000e26:	e009      	b.n	8000e3c <HAL_I2C_Init+0xe8>
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <HAL_I2C_Init+0x284>)
 8000e34:	fba2 2303 	umull	r2, r3, r2, r3
 8000e38:	099b      	lsrs	r3, r3, #6
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	495c      	ldr	r1, [pc, #368]	; (8000fc8 <HAL_I2C_Init+0x274>)
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d819      	bhi.n	8000e90 <HAL_I2C_Init+0x13c>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e59      	subs	r1, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e6a:	1c59      	adds	r1, r3, #1
 8000e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e70:	400b      	ands	r3, r1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00a      	beq.n	8000e8c <HAL_I2C_Init+0x138>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1e59      	subs	r1, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e8a:	e051      	b.n	8000f30 <HAL_I2C_Init+0x1dc>
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	e04f      	b.n	8000f30 <HAL_I2C_Init+0x1dc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_I2C_Init+0x168>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1e58      	subs	r0, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6859      	ldr	r1, [r3, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	440b      	add	r3, r1
 8000ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf0c      	ite	eq
 8000eb4:	2301      	moveq	r3, #1
 8000eb6:	2300      	movne	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	e012      	b.n	8000ee2 <HAL_I2C_Init+0x18e>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	0099      	lsls	r1, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_Init+0x196>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e022      	b.n	8000f30 <HAL_I2C_Init+0x1dc>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <HAL_I2C_Init+0x1bc>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1e58      	subs	r0, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6859      	ldr	r1, [r3, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	440b      	add	r3, r1
 8000f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0e:	e00f      	b.n	8000f30 <HAL_I2C_Init+0x1dc>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1e58      	subs	r0, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6859      	ldr	r1, [r3, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	0099      	lsls	r1, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	6809      	ldr	r1, [r1, #0]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69da      	ldr	r2, [r3, #28]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6911      	ldr	r1, [r2, #16]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68d2      	ldr	r2, [r2, #12]
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	000186a0 	.word	0x000186a0
 8000fcc:	001e847f 	.word	0x001e847f
 8000fd0:	003d08ff 	.word	0x003d08ff
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	10624dd3 	.word	0x10624dd3

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e272      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8087 	beq.w	800110a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ffc:	4b92      	ldr	r3, [pc, #584]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b04      	cmp	r3, #4
 8001006:	d00c      	beq.n	8001022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001008:	4b8f      	ldr	r3, [pc, #572]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b08      	cmp	r3, #8
 8001012:	d112      	bne.n	800103a <HAL_RCC_OscConfig+0x5e>
 8001014:	4b8c      	ldr	r3, [pc, #560]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d10b      	bne.n	800103a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001022:	4b89      	ldr	r3, [pc, #548]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d06c      	beq.n	8001108 <HAL_RCC_OscConfig+0x12c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d168      	bne.n	8001108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e24c      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x76>
 8001044:	4b80      	ldr	r3, [pc, #512]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a7f      	ldr	r2, [pc, #508]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e02e      	b.n	80010b0 <HAL_RCC_OscConfig+0xd4>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x98>
 800105a:	4b7b      	ldr	r3, [pc, #492]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b78      	ldr	r3, [pc, #480]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e01d      	b.n	80010b0 <HAL_RCC_OscConfig+0xd4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0xbc>
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a71      	ldr	r2, [pc, #452]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a6e      	ldr	r2, [pc, #440]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e00b      	b.n	80010b0 <HAL_RCC_OscConfig+0xd4>
 8001098:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a6a      	ldr	r2, [pc, #424]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800109e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a67      	ldr	r2, [pc, #412]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fb9e 	bl	80007f8 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fb9a 	bl	80007f8 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e200      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0xe4>
 80010de:	e014      	b.n	800110a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb8a 	bl	80007f8 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb86 	bl	80007f8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e1ec      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x10c>
 8001106:	e000      	b.n	800110a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d063      	beq.n	80011de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00b      	beq.n	800113a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b08      	cmp	r3, #8
 800112c:	d11c      	bne.n	8001168 <HAL_RCC_OscConfig+0x18c>
 800112e:	4b46      	ldr	r3, [pc, #280]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d116      	bne.n	8001168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x176>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d001      	beq.n	8001152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e1c0      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4939      	ldr	r1, [pc, #228]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	e03a      	b.n	80011de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d020      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fb3f 	bl	80007f8 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff fb3b 	bl	80007f8 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1a1      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4927      	ldr	r1, [pc, #156]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fb1e 	bl	80007f8 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fb1a 	bl	80007f8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e180      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d03a      	beq.n	8001260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d019      	beq.n	8001226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_RCC_OscConfig+0x274>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fafe 	bl	80007f8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fafa 	bl	80007f8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e160      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_RCC_OscConfig+0x26c>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f000 fac4 	bl	80017ac <RCC_Delay>
 8001224:	e01c      	b.n	8001260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_RCC_OscConfig+0x274>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122c:	f7ff fae4 	bl	80007f8 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001232:	e00f      	b.n	8001254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fae0 	bl	80007f8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d908      	bls.n	8001254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e146      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	42420000 	.word	0x42420000
 8001250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e9      	bne.n	8001234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80a6 	beq.w	80013ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10d      	bne.n	800129a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a87      	ldr	r2, [pc, #540]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <HAL_RCC_OscConfig+0x4c8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a6:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <HAL_RCC_OscConfig+0x4c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x4c8>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff faa1 	bl	80007f8 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fa9d 	bl	80007f8 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e103      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x4c8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x312>
 80012e0:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a6e      	ldr	r2, [pc, #440]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e02d      	b.n	800134a <HAL_RCC_OscConfig+0x36e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x334>
 80012f6:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4a69      	ldr	r2, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6213      	str	r3, [r2, #32]
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a66      	ldr	r2, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	e01c      	b.n	800134a <HAL_RCC_OscConfig+0x36e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d10c      	bne.n	8001332 <HAL_RCC_OscConfig+0x356>
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a60      	ldr	r2, [pc, #384]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a5d      	ldr	r2, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	e00b      	b.n	800134a <HAL_RCC_OscConfig+0x36e>
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fa51 	bl	80007f8 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fa4d 	bl	80007f8 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0b1      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ee      	beq.n	800135a <HAL_RCC_OscConfig+0x37e>
 800137c:	e014      	b.n	80013a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fa3b 	bl	80007f8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fa37 	bl	80007f8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e09b      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a3b      	ldr	r2, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8087 	beq.w	80014d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d061      	beq.n	8001494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d146      	bne.n	8001466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <HAL_RCC_OscConfig+0x4cc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fa0b 	bl	80007f8 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fa07 	bl	80007f8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e06d      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d108      	bne.n	8001420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4921      	ldr	r1, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a19      	ldr	r1, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	430b      	orrs	r3, r1
 8001432:	491b      	ldr	r1, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x4cc>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff f9db 	bl	80007f8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff f9d7 	bl	80007f8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e03d      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x46a>
 8001464:	e035      	b.n	80014d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_RCC_OscConfig+0x4cc>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff f9c4 	bl	80007f8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff f9c0 	bl	80007f8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e026      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x498>
 8001492:	e01e      	b.n	80014d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e019      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_OscConfig+0x500>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0d0      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4965      	ldr	r1, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d040      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e073      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff f912 	bl	80007f8 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff f90e 	bl	80007f8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e053      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d210      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1cc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f870 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08001874 	.word	0x08001874
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b490      	push	{r4, r7}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_RCC_GetSysClockFreq+0xac>)
 80016bc:	1d3c      	adds	r4, r7, #4
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c4:	f240 2301 	movw	r3, #513	; 0x201
 80016c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x46>
 80016f2:	e02b      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016f6:	623b      	str	r3, [r7, #32]
      break;
 80016f8:	e02b      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3328      	adds	r3, #40	; 0x28
 8001704:	443b      	add	r3, r7
 8001706:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800170a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d012      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0c5b      	lsrs	r3, r3, #17
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	3328      	adds	r3, #40	; 0x28
 8001722:	443b      	add	r3, r7
 8001724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001728:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e004      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	623b      	str	r3, [r7, #32]
      break;
 800174a:	e002      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 800174e:	623b      	str	r3, [r7, #32]
      break;
 8001750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001752:	6a3b      	ldr	r3, [r7, #32]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bc90      	pop	{r4, r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	08001864 	.word	0x08001864
 8001764:	40021000 	.word	0x40021000
 8001768:	007a1200 	.word	0x007a1200
 800176c:	003d0900 	.word	0x003d0900

08001770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_RCC_GetHCLKFreq+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001788:	f7ff fff2 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	08001884 	.word	0x08001884

080017ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <RCC_Delay+0x34>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <RCC_Delay+0x38>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0a5b      	lsrs	r3, r3, #9
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017c8:	bf00      	nop
  }
  while (Delay --);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	60fa      	str	r2, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f9      	bne.n	80017c8 <RCC_Delay+0x1c>
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20000000 	.word	0x20000000
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	2600      	movs	r6, #0
 80017ec:	4d0c      	ldr	r5, [pc, #48]	; (8001820 <__libc_init_array+0x38>)
 80017ee:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <__libc_init_array+0x3c>)
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	42a6      	cmp	r6, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	f000 f822 	bl	8001840 <_init>
 80017fc:	2600      	movs	r6, #0
 80017fe:	4d0a      	ldr	r5, [pc, #40]	; (8001828 <__libc_init_array+0x40>)
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <__libc_init_array+0x44>)
 8001802:	1b64      	subs	r4, r4, r5
 8001804:	10a4      	asrs	r4, r4, #2
 8001806:	42a6      	cmp	r6, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001810:	4798      	blx	r3
 8001812:	3601      	adds	r6, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	f855 3b04 	ldr.w	r3, [r5], #4
 800181a:	4798      	blx	r3
 800181c:	3601      	adds	r6, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	0800188c 	.word	0x0800188c
 8001824:	0800188c 	.word	0x0800188c
 8001828:	0800188c 	.word	0x0800188c
 800182c:	08001890 	.word	0x08001890

08001830 <memset>:
 8001830:	4603      	mov	r3, r0
 8001832:	4402      	add	r2, r0
 8001834:	4293      	cmp	r3, r2
 8001836:	d100      	bne.n	800183a <memset+0xa>
 8001838:	4770      	bx	lr
 800183a:	f803 1b01 	strb.w	r1, [r3], #1
 800183e:	e7f9      	b.n	8001834 <memset+0x4>

08001840 <_init>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	bf00      	nop
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr

0800184c <_fini>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr
