
Project_XXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a51c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a72c  0800a72c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a72c  0800a72c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a72c  0800a72c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  200001e4  0800a918  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  0800a918  000225b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f096  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004736  00000000  00000000  0003f2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  000439e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  00045528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1c0  00000000  00000000  00046ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f798  00000000  00000000  00064080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc90  00000000  00000000  00083818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007550  00000000  00000000  0011f4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a614 	.word	0x0800a614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a614 	.word	0x0800a614

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000200 	.word	0x20000200
 800017c:	200002b4 	.word	0x200002b4

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fcd9 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f825 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f9b9 	bl	8000504 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000192:	f000 f8d7 	bl	8000344 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000196:	f000 f8a7 	bl	80002e8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f989 	bl	80004b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800019e:	f000 f907 	bl	80003b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80001a2:	f000 f873 	bl	800028c <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a6:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <main+0x50>)
 80001a8:	1d3c      	adds	r4, r7, #4
 80001aa:	461d      	mov	r5, r3
 80001ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f008 fae2 	bl	8008786 <osThreadCreate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a03      	ldr	r2, [pc, #12]	; (80001d4 <main+0x54>)
 80001c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c8:	f008 fad6 	bl	8008778 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001cc:	e7fe      	b.n	80001cc <main+0x4c>
 80001ce:	bf00      	nop
 80001d0:	0800a638 	.word	0x0800a638
 80001d4:	20000640 	.word	0x20000640

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f00a f94e 	bl	800a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000224:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fd3a 	bl	8002ca8 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f9fb 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f002 ffa6 	bl	80031ac <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f9e5 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800026a:	2310      	movs	r3, #16
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f003 f961 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000280:	f000 f9d8 	bl	8000634 <Error_Handler>
  }
}
 8000284:	bf00      	nop
 8000286:	3750      	adds	r7, #80	; 0x50
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_I2C1_Init+0x50>)
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <MX_I2C1_Init+0x54>)
 8000294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_I2C1_Init+0x50>)
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <MX_I2C1_Init+0x58>)
 800029a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_I2C1_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_I2C1_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_I2C1_Init+0x50>)
 80002aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MX_I2C1_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_I2C1_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <MX_I2C1_Init+0x50>)
 80002be:	2200      	movs	r2, #0
 80002c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_I2C1_Init+0x50>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_I2C1_Init+0x50>)
 80002ca:	f000 fee5 	bl	8001098 <HAL_I2C_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d4:	f000 f9ae 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200004b4 	.word	0x200004b4
 80002e0:	40005400 	.word	0x40005400
 80002e4:	000186a0 	.word	0x000186a0

080002e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_I2C2_Init+0x50>)
 80002ee:	4a13      	ldr	r2, [pc, #76]	; (800033c <MX_I2C2_Init+0x54>)
 80002f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_I2C2_Init+0x50>)
 80002f4:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_I2C2_Init+0x58>)
 80002f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_I2C2_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_I2C2_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_I2C2_Init+0x50>)
 8000306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800030a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <MX_I2C2_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_I2C2_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <MX_I2C2_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_I2C2_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_I2C2_Init+0x50>)
 8000326:	f000 feb7 	bl	8001098 <HAL_I2C_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000330:	f000 f980 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000508 	.word	0x20000508
 800033c:	40005800 	.word	0x40005800
 8000340:	000186a0 	.word	0x000186a0

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_SPI1_Init+0x64>)
 800034a:	4a18      	ldr	r2, [pc, #96]	; (80003ac <MX_SPI1_Init+0x68>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000378:	2208      	movs	r2, #8
 800037a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000390:	220a      	movs	r2, #10
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_SPI1_Init+0x64>)
 8000396:	f003 f987 	bl	80036a8 <HAL_SPI_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003a0:	f000 f948 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000055c 	.word	0x2000055c
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08c      	sub	sp, #48	; 0x30
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003b6:	f107 031c 	add.w	r3, r7, #28
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003dc:	4b33      	ldr	r3, [pc, #204]	; (80004ac <MX_TIM2_Init+0xfc>)
 80003de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003e4:	4b31      	ldr	r3, [pc, #196]	; (80004ac <MX_TIM2_Init+0xfc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	4b30      	ldr	r3, [pc, #192]	; (80004ac <MX_TIM2_Init+0xfc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003f0:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <MX_TIM2_Init+0xfc>)
 80003f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <MX_TIM2_Init+0xfc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000404:	4829      	ldr	r0, [pc, #164]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000406:	f003 fa7d 	bl	8003904 <HAL_TIM_IC_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000410:	f000 f910 	bl	8000634 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000414:	2304      	movs	r3, #4
 8000416:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000418:	2350      	movs	r3, #80	; 0x50
 800041a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000428:	f107 031c 	add.w	r3, r7, #28
 800042c:	4619      	mov	r1, r3
 800042e:	481f      	ldr	r0, [pc, #124]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000430:	f003 fc53 	bl	8003cda <HAL_TIM_SlaveConfigSynchro>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800043a:	f000 f8fb 	bl	8000634 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000442:	2301      	movs	r3, #1
 8000444:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4815      	ldr	r0, [pc, #84]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000458:	f003 fbab 	bl	8003bb2 <HAL_TIM_IC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000462:	f000 f8e7 	bl	8000634 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000466:	2302      	movs	r3, #2
 8000468:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800046a:	2302      	movs	r3, #2
 800046c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	2204      	movs	r2, #4
 8000474:	4619      	mov	r1, r3
 8000476:	480d      	ldr	r0, [pc, #52]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000478:	f003 fb9b 	bl	8003bb2 <HAL_TIM_IC_ConfigChannel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000482:	f000 f8d7 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4619      	mov	r1, r3
 8000492:	4806      	ldr	r0, [pc, #24]	; (80004ac <MX_TIM2_Init+0xfc>)
 8000494:	f003 ff02 	bl	800429c <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800049e:	f000 f8c9 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	3730      	adds	r7, #48	; 0x30
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200005b4 	.word	0x200005b4

080004b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_USART1_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e8:	f003 ff48 	bl	800437c <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f89f 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200005fc 	.word	0x200005fc
 8000500:	40013800 	.word	0x40013800

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <MX_GPIO_Init+0xe8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a33      	ldr	r2, [pc, #204]	; (80005ec <MX_GPIO_Init+0xe8>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a2d      	ldr	r2, [pc, #180]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_GPIO_Init+0xe8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_GPIO_Init+0xe8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <MX_GPIO_Init+0xe8>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_GPIO_Init+0xe8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	481c      	ldr	r0, [pc, #112]	; (80005f0 <MX_GPIO_Init+0xec>)
 800057e:	f000 fd73 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_INT_Pin|NFC_SS_Pin
 8000582:	2200      	movs	r2, #0
 8000584:	f24e 0127 	movw	r1, #57383	; 0xe027
 8000588:	481a      	ldr	r0, [pc, #104]	; (80005f4 <MX_GPIO_Init+0xf0>)
 800058a:	f000 fd6d 	bl	8001068 <HAL_GPIO_WritePin>
                          |NFC_INT_Pin|NFC_SSB15_Pin|RS485_DERE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4815      	ldr	r0, [pc, #84]	; (80005f8 <MX_GPIO_Init+0xf4>)
 80005a4:	f000 fbdc 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25Q_CS_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin;
 80005a8:	2310      	movs	r3, #16
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xec>)
 80005c0:	f000 fbce 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_INT_Pin NFC_SS_Pin
                           NFC_INT_Pin NFC_SSB15_Pin RS485_DERE_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_INT_Pin|NFC_SS_Pin
 80005c4:	f24e 0327 	movw	r3, #57383	; 0xe027
 80005c8:	613b      	str	r3, [r7, #16]
                          |NFC_INT_Pin|NFC_SSB15_Pin|RS485_DERE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0xf0>)
 80005de:	f000 fbbf 	bl	8000d60 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3720      	adds	r7, #32
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40011000 	.word	0x40011000

080005fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000604:	f009 faa4 	bl	8009b50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f008 f908 	bl	800881e <osDelay>
 800060e:	e7fb      	b.n	8000608 <StartDefaultTask+0xc>

08000610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000622:	f000 faa1 	bl	8000b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40000800 	.word	0x40000800

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_MspInit+0x68>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <HAL_MspInit+0x68>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x68>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x68>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <HAL_MspInit+0x68>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x68>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	210f      	movs	r1, #15
 800067a:	f06f 0001 	mvn.w	r0, #1
 800067e:	f000 fb44 	bl	8000d0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x6c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x6c>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a32      	ldr	r2, [pc, #200]	; (8000794 <HAL_I2C_MspInit+0xe4>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d133      	bne.n	8000738 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	61bb      	str	r3, [r7, #24]
 80006e6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ee:	2312      	movs	r3, #18
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4827      	ldr	r0, [pc, #156]	; (800079c <HAL_I2C_MspInit+0xec>)
 80006fe:	f000 fb2f 	bl	8000d60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <HAL_I2C_MspInit+0xf0>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <HAL_I2C_MspInit+0xf0>)
 800071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000736:	e029      	b.n	800078c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_I2C_MspInit+0xf4>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d124      	bne.n	800078c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800075a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_I2C_MspInit+0xec>)
 8000770:	f000 faf6 	bl	8000d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 800077a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_I2C_MspInit+0xe8>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40021000 	.word	0x40021000
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	40010000 	.word	0x40010000
 80007a4:	40005800 	.word	0x40005800

080007a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <HAL_SPI_MspInit+0x88>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d12f      	bne.n	8000828 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <HAL_SPI_MspInit+0x90>)
 800080c:	f000 faa8 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_SPI_MspInit+0x90>)
 8000824:	f000 fa9c 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013000 	.word	0x40013000
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800085a:	d136      	bne.n	80008ca <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	61d3      	str	r3, [r2, #28]
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_TIM_IC_MspInit+0x98>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800088c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_TIM_IC_MspInit+0x9c>)
 80008a2:	f000 fa5d 	bl	8000d60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_TIM_IC_MspInit+0xa0>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <HAL_TIM_IC_MspInit+0xa0>)
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010000 	.word	0x40010000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <HAL_UART_MspInit+0xa4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d13d      	bne.n	800097c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_UART_MspInit+0xa8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a20      	ldr	r2, [pc, #128]	; (8000988 <HAL_UART_MspInit+0xa8>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_UART_MspInit+0xa8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_UART_MspInit+0xa8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <HAL_UART_MspInit+0xa8>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0xa8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <HAL_UART_MspInit+0xac>)
 8000944:	f000 fa0c 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	480c      	ldr	r0, [pc, #48]	; (800098c <HAL_UART_MspInit+0xac>)
 800095c:	f000 fa00 	bl	8000d60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_UART_MspInit+0xb0>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_UART_MspInit+0xb0>)
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40021000 	.word	0x40021000
 800098c:	40010c00 	.word	0x40010c00
 8000990:	40010000 	.word	0x40010000

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <HAL_InitTick+0xe8>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <HAL_InitTick+0xe8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <HAL_InitTick+0xe8>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c2:	f107 0210 	add.w	r2, r7, #16
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fd67 	bl	80034a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009dc:	f002 fd38 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 80009e0:	6378      	str	r0, [r7, #52]	; 0x34
 80009e2:	e004      	b.n	80009ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e4:	f002 fd34 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 80009e8:	4603      	mov	r3, r0
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_InitTick+0xec>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	0c9b      	lsrs	r3, r3, #18
 80009f8:	3b01      	subs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_InitTick+0xf0>)
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <HAL_InitTick+0xf4>)
 8000a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a08:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a24:	f002 fec4 	bl	80037b0 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11b      	bne.n	8000a6e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a38:	f002 ff12 	bl	8003860 <HAL_TIM_Base_Start_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d111      	bne.n	8000a6e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a4a:	201e      	movs	r0, #30
 8000a4c:	f000 f979 	bl	8000d42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	d808      	bhi.n	8000a68 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a56:	2200      	movs	r2, #0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	201e      	movs	r0, #30
 8000a5c:	f000 f955 	bl	8000d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0xf8>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e002      	b.n	8000a6e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3738      	adds	r7, #56	; 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000644 	.word	0x20000644
 8000a88:	40000800 	.word	0x40000800
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ac2:	f000 fd5e 	bl	8001582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200020a4 	.word	0x200020a4

08000ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM4_IRQHandler+0x10>)
 8000ad6:	f002 ff64 	bl	80039a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000644 	.word	0x20000644

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffe5 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f009 fc8f 	bl	800a43c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb2f 	bl	8000180 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000b2c:	0800a734 	.word	0x0800a734
  ldr r2, =_sbss
 8000b30:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000b34:	200025b8 	.word	0x200025b8

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f8d1 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f7ff ff1e 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fd72 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x20>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_IncTick+0x20>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000008 	.word	0x20000008
 8000b88:	2000068c 	.word	0x2000068c

08000b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <HAL_GetTick+0x10>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	2000068c 	.word	0x2000068c

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4906      	ldr	r1, [pc, #24]	; (8000c38 <__NVIC_EnableIRQ+0x34>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff4f 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff64 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ffb2 	bl	8000c90 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff81 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff57 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	; 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e169      	b.n	8001048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d74:	2201      	movs	r2, #1
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8158 	bne.w	8001042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a9a      	ldr	r2, [pc, #616]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d05e      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a98      	ldr	r2, [pc, #608]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d875      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000da2:	4a98      	ldr	r2, [pc, #608]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d058      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000da8:	4a96      	ldr	r2, [pc, #600]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d86f      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dae:	4a96      	ldr	r2, [pc, #600]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d052      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000db4:	4a94      	ldr	r2, [pc, #592]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d869      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dba:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d04c      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dc0:	4a92      	ldr	r2, [pc, #584]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d863      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dc6:	4a92      	ldr	r2, [pc, #584]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d046      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dcc:	4a90      	ldr	r2, [pc, #576]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d85d      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d82a      	bhi.n	8000e2c <HAL_GPIO_Init+0xcc>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d859      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <HAL_GPIO_Init+0x80>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000e47 	.word	0x08000e47
 8000dec:	08000e89 	.word	0x08000e89
 8000df0:	08000e8f 	.word	0x08000e8f
 8000df4:	08000e8f 	.word	0x08000e8f
 8000df8:	08000e8f 	.word	0x08000e8f
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000e8f 	.word	0x08000e8f
 8000e04:	08000e8f 	.word	0x08000e8f
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000e8f 	.word	0x08000e8f
 8000e10:	08000e8f 	.word	0x08000e8f
 8000e14:	08000e8f 	.word	0x08000e8f
 8000e18:	08000e8f 	.word	0x08000e8f
 8000e1c:	08000e8f 	.word	0x08000e8f
 8000e20:	08000e8f 	.word	0x08000e8f
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e51 	.word	0x08000e51
 8000e2c:	4a79      	ldr	r2, [pc, #484]	; (8001014 <HAL_GPIO_Init+0x2b4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e32:	e02c      	b.n	8000e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e029      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	3304      	adds	r3, #4
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e024      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e01f      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	330c      	adds	r3, #12
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e01a      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e62:	2304      	movs	r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e013      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e70:	2308      	movs	r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	611a      	str	r2, [r3, #16]
          break;
 8000e7a:	e009      	b.n	8000e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	615a      	str	r2, [r3, #20]
          break;
 8000e86:	e003      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
          break;
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          break;
 8000e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d801      	bhi.n	8000e9a <HAL_GPIO_Init+0x13a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <HAL_GPIO_Init+0x13e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d802      	bhi.n	8000eac <HAL_GPIO_Init+0x14c>
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x152>
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3b08      	subs	r3, #8
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	210f      	movs	r1, #15
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	6a39      	ldr	r1, [r7, #32]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80b1 	beq.w	8001042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a40      	ldr	r2, [pc, #256]	; (8001020 <HAL_GPIO_Init+0x2c0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3f      	ldr	r2, [pc, #252]	; (8001024 <HAL_GPIO_Init+0x2c4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1e8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <HAL_GPIO_Init+0x2c8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1e4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3d      	ldr	r2, [pc, #244]	; (800102c <HAL_GPIO_Init+0x2cc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1e0>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e004      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f5e:	492f      	ldr	r1, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	492c      	ldr	r1, [pc, #176]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4928      	ldr	r1, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	491e      	ldr	r1, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	4918      	ldr	r1, [pc, #96]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4914      	ldr	r1, [pc, #80]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d021      	beq.n	8001034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	490e      	ldr	r1, [pc, #56]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60cb      	str	r3, [r1, #12]
 8000ffc:	e021      	b.n	8001042 <HAL_GPIO_Init+0x2e2>
 8000ffe:	bf00      	nop
 8001000:	10320000 	.word	0x10320000
 8001004:	10310000 	.word	0x10310000
 8001008:	10220000 	.word	0x10220000
 800100c:	10210000 	.word	0x10210000
 8001010:	10120000 	.word	0x10120000
 8001014:	10110000 	.word	0x10110000
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000
 800102c:	40011400 	.word	0x40011400
 8001030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_GPIO_Init+0x304>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	43db      	mvns	r3, r3
 800103c:	4909      	ldr	r1, [pc, #36]	; (8001064 <HAL_GPIO_Init+0x304>)
 800103e:	4013      	ands	r3, r2
 8001040:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	fa22 f303 	lsr.w	r3, r2, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f ae8e 	bne.w	8000d74 <HAL_GPIO_Init+0x14>
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	372c      	adds	r7, #44	; 0x2c
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e12b      	b.n	8001302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff faf6 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010fc:	f002 f9a8 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a81      	ldr	r2, [pc, #516]	; (800130c <HAL_I2C_Init+0x274>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d807      	bhi.n	800111c <HAL_I2C_Init+0x84>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a80      	ldr	r2, [pc, #512]	; (8001310 <HAL_I2C_Init+0x278>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	e006      	b.n	800112a <HAL_I2C_Init+0x92>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a7d      	ldr	r2, [pc, #500]	; (8001314 <HAL_I2C_Init+0x27c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	bf94      	ite	ls
 8001124:	2301      	movls	r3, #1
 8001126:	2300      	movhi	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0e7      	b.n	8001302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a78      	ldr	r2, [pc, #480]	; (8001318 <HAL_I2C_Init+0x280>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_I2C_Init+0x274>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d802      	bhi.n	800116c <HAL_I2C_Init+0xd4>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	e009      	b.n	8001180 <HAL_I2C_Init+0xe8>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a69      	ldr	r2, [pc, #420]	; (800131c <HAL_I2C_Init+0x284>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	3301      	adds	r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	430b      	orrs	r3, r1
 8001186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	495c      	ldr	r1, [pc, #368]	; (800130c <HAL_I2C_Init+0x274>)
 800119c:	428b      	cmp	r3, r1
 800119e:	d819      	bhi.n	80011d4 <HAL_I2C_Init+0x13c>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e59      	subs	r1, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ae:	1c59      	adds	r1, r3, #1
 80011b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011b4:	400b      	ands	r3, r1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_I2C_Init+0x138>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1e59      	subs	r1, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	e051      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e04f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <HAL_I2C_Init+0x168>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e012      	b.n	8001226 <HAL_I2C_Init+0x18e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	0099      	lsls	r1, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Init+0x196>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10e      	bne.n	8001254 <HAL_I2C_Init+0x1bc>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e58      	subs	r0, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6859      	ldr	r1, [r3, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	440b      	add	r3, r1
 8001244:	fbb0 f3f3 	udiv	r3, r0, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001252:	e00f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	0099      	lsls	r1, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	6809      	ldr	r1, [r1, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6911      	ldr	r1, [r2, #16]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	000186a0 	.word	0x000186a0
 8001310:	001e847f 	.word	0x001e847f
 8001314:	003d08ff 	.word	0x003d08ff
 8001318:	431bde83 	.word	0x431bde83
 800131c:	10624dd3 	.word	0x10624dd3

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af06      	add	r7, sp, #24
 8001326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0fd      	b.n	800152e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f008 fdce 	bl	8009ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f911 	bl	8004580 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	687e      	ldr	r6, [r7, #4]
 8001366:	466d      	mov	r5, sp
 8001368:	f106 0410 	add.w	r4, r6, #16
 800136c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	602b      	str	r3, [r5, #0]
 8001374:	1d33      	adds	r3, r6, #4
 8001376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f003 f8db 	bl	8004534 <USB_CoreInit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0ce      	b.n	800152e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 f90c 	bl	80045b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e04c      	b.n	800143c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3301      	adds	r3, #1
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	b298      	uxth	r0, r3
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3336      	adds	r3, #54	; 0x36
 80013e0:	4602      	mov	r2, r0
 80013e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3303      	adds	r3, #3
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	3338      	adds	r3, #56	; 0x38
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	333c      	adds	r3, #60	; 0x3c
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3340      	adds	r3, #64	; 0x40
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3ad      	bcc.n	80013a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e044      	b.n	80014d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3b5      	bcc.n	800144c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	687e      	ldr	r6, [r7, #4]
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0410 	add.w	r4, r6, #16
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	602b      	str	r3, [r5, #0]
 80014f6:	1d33      	adds	r3, r6, #4
 80014f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f003 f866 	bl	80045cc <USB_DevInit>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00d      	b.n	800152e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fd18 	bl	8006f5c <USB_DevDisconnect>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001536 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_Start+0x16>
 8001548:	2302      	movs	r3, #2
 800154a:	e016      	b.n	800157a <HAL_PCD_Start+0x44>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fffb 	bl	8004554 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800155e:	2101      	movs	r1, #1
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f008 ff34 	bl	800a3ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fcec 	bl	8006f48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b088      	sub	sp, #32
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fcee 	bl	8006f70 <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159e:	d102      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb5f 	bl	8001c64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fce0 	bl	8006f70 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d112      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	b292      	uxth	r2, r2
 80015d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f008 fd02 	bl	8009fde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f923 	bl	8001828 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fcc2 	bl	8006f70 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d10b      	bne.n	8001610 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800160a:	b292      	uxth	r2, r2
 800160c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fcab 	bl	8006f70 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001624:	d10b      	bne.n	800163e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001638:	b292      	uxth	r2, r2
 800163a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fc94 	bl	8006f70 <USB_ReadInterrupts>
 8001648:	4603      	mov	r3, r0
 800164a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001652:	d126      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	b292      	uxth	r2, r2
 8001668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0208 	bic.w	r2, r2, #8
 800167e:	b292      	uxth	r2, r2
 8001680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f008 fce3 	bl	800a050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 fc62 	bl	8006f70 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b6:	f040 8082 	bne.w	80017be <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	77fb      	strb	r3, [r7, #31]
 80016be:	e010      	b.n	80016e2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	441a      	add	r2, r3
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	8812      	ldrh	r2, [r2, #0]
 80016d0:	b292      	uxth	r2, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	3320      	adds	r3, #32
 80016d6:	443b      	add	r3, r7
 80016d8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
 80016de:	3301      	adds	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	d9eb      	bls.n	80016c0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	b292      	uxth	r2, r2
 80016fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	b292      	uxth	r2, r2
 8001714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001718:	bf00      	nop
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001722:	b29b      	uxth	r3, r3
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f6      	beq.n	800171a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173e:	b292      	uxth	r2, r2
 8001740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
 8001748:	e00f      	b.n	800176a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	4611      	mov	r1, r2
 8001752:	7ffa      	ldrb	r2, [r7, #31]
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	440a      	add	r2, r1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	3320      	adds	r3, #32
 800175c:	443b      	add	r3, r7
 800175e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001762:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	3301      	adds	r3, #1
 8001768:	77fb      	strb	r3, [r7, #31]
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9ec      	bls.n	800174a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0208 	orr.w	r2, r2, #8
 8001782:	b292      	uxth	r2, r2
 8001784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0204 	orr.w	r2, r2, #4
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f008 fc2f 	bl	800a01c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fbd4 	bl	8006f70 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d2:	d10e      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f008 fbe8 	bl	8009fc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fbba 	bl	8006f70 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	d10b      	bne.n	8001820 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_PCD_SetAddress+0x1a>
 800183e:	2302      	movs	r3, #2
 8001840:	e013      	b.n	800186a <HAL_PCD_SetAddress+0x42>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f005 fb61 	bl	8006f22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	4608      	mov	r0, r1
 800187c:	4611      	mov	r1, r2
 800187e:	461a      	mov	r2, r3
 8001880:	4603      	mov	r3, r0
 8001882:	70fb      	strb	r3, [r7, #3]
 8001884:	460b      	mov	r3, r1
 8001886:	803b      	strh	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0e      	bge.n	80018b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	705a      	strb	r2, [r3, #1]
 80018b4:	e00e      	b.n	80018d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0207 	and.w	r2, r3, #7
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018e0:	883a      	ldrh	r2, [r7, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	78ba      	ldrb	r2, [r7, #2]
 80018ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d102      	bne.n	800190a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_PCD_EP_Open+0xa6>
 8001914:	2302      	movs	r3, #2
 8001916:	e00e      	b.n	8001936 <HAL_PCD_EP_Open+0xc4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fe70 	bl	800460c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001934:	7afb      	ldrb	r3, [r7, #11]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0e      	bge.n	8001970 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_EP_Close+0x6a>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e00e      	b.n	80019c6 <HAL_PCD_EP_Close+0x88>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f992 	bl	8004ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	f003 0207 	and.w	r2, r3, #7
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d106      	bne.n	8001a32 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6979      	ldr	r1, [r7, #20]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fb44 	bl	80050b8 <USB_EPStartXfer>
 8001a30:	e005      	b.n	8001a3e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fb3d 	bl	80050b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 0207 	and.w	r2, r3, #7
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 faea 	bl	80050b8 <USB_EPStartXfer>
 8001ae4:	e005      	b.n	8001af2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6979      	ldr	r1, [r7, #20]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fae3 	bl	80050b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d901      	bls.n	8001b1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e04c      	b.n	8001bb4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da0e      	bge.n	8001b40 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
 8001b3e:	e00c      	b.n	8001b5a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_SetStall+0x7e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e01c      	b.n	8001bb4 <HAL_PCD_EP_SetStall+0xb8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f005 f8cd 	bl	8006d28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f005 f9f2 	bl	8006f8e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d901      	bls.n	8001bda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e040      	b.n	8001c5c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da0e      	bge.n	8001c00 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
 8001bfe:	e00e      	b.n	8001c1e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_PCD_EP_ClrStall+0x82>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e00e      	b.n	8001c5c <HAL_PCD_EP_ClrStall+0xa0>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 f8bb 	bl	8006dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c6c:	e2ec      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c76:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8161 	bne.w	8001f50 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d152      	bne.n	8001d3e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3328      	adds	r3, #40	; 0x28
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	441a      	add	r2, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f008 f945 	bl	8009f8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 829b 	beq.w	8002248 <PCD_EP_ISR_Handler+0x5e4>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8296 	bne.w	8002248 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d3c:	e284      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d034      	beq.n	8001dc2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f005 f949 	bl	800702e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001da8:	4013      	ands	r3, r2
 8001daa:	823b      	strh	r3, [r7, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	8a3a      	ldrh	r2, [r7, #16]
 8001db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db6:	b292      	uxth	r2, r2
 8001db8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f008 f8ba 	bl	8009f34 <HAL_PCD_SetupStageCallback>
 8001dc0:	e242      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f280 823e 	bge.w	8002248 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dd8:	4013      	ands	r3, r2
 8001dda:	83bb      	strh	r3, [r7, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	8bba      	ldrh	r2, [r7, #28]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de6:	b292      	uxth	r2, r2
 8001de8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3306      	adds	r3, #6
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <PCD_EP_ISR_Handler+0x1ee>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	6959      	ldr	r1, [r3, #20]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f005 f8f9 	bl	800702e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	441a      	add	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f008 f883 	bl	8009f58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 81f2 	bne.w	8002248 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4413      	add	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d112      	bne.n	8001eb2 <PCD_EP_ISR_Handler+0x24e>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	e02f      	b.n	8001f12 <PCD_EP_ISR_Handler+0x2ae>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8001eb8:	d813      	bhi.n	8001ee2 <PCD_EP_ISR_Handler+0x27e>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <PCD_EP_ISR_Handler+0x270>
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	e017      	b.n	8001f12 <PCD_EP_ISR_Handler+0x2ae>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <PCD_EP_ISR_Handler+0x298>
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	827b      	strh	r3, [r7, #18]
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f2a:	827b      	strh	r3, [r7, #18]
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f32:	827b      	strh	r3, [r7, #18]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	8a7b      	ldrh	r3, [r7, #18]
 8001f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	8013      	strh	r3, [r2, #0]
 8001f4e:	e17b      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f280 80ea 	bge.w	8002140 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f82:	4013      	ands	r3, r2
 8001f84:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	7b1b      	ldrb	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d122      	bne.n	8002002 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fe6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8087 	beq.w	80020fc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	6959      	ldr	r1, [r3, #20]
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	88da      	ldrh	r2, [r3, #6]
 8001ffa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffc:	f005 f817 	bl	800702e <USB_ReadPMA>
 8002000:	e07c      	b.n	80020fc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	78db      	ldrb	r3, [r3, #3]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d108      	bne.n	800201c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800200a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800200c:	461a      	mov	r2, r3
 800200e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f927 	bl	8002264 <HAL_PCD_EP_DB_Receive>
 8002016:	4603      	mov	r3, r0
 8002018:	86fb      	strh	r3, [r7, #54]	; 0x36
 800201a:	e06f      	b.n	80020fc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	847b      	strh	r3, [r7, #34]	; 0x22
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800204c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002058:	b29b      	uxth	r3, r3
 800205a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d021      	beq.n	80020ba <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	3302      	adds	r3, #2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d02a      	beq.n	80020fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	6959      	ldr	r1, [r3, #20]
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	891a      	ldrh	r2, [r3, #8]
 80020b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020b4:	f004 ffbb 	bl	800702e <USB_ReadPMA>
 80020b8:	e020      	b.n	80020fc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	3306      	adds	r3, #6
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	6959      	ldr	r1, [r3, #20]
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	895a      	ldrh	r2, [r3, #10]
 80020f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f8:	f004 ff99 	bl	800702e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002102:	441a      	add	r2, r3
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800210e:	441a      	add	r2, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <PCD_EP_ISR_Handler+0x4c2>
 800211c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d206      	bcs.n	8002134 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f007 ff13 	bl	8009f58 <HAL_PCD_DataOutStageCallback>
 8002132:	e005      	b.n	8002140 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	4618      	mov	r0, r3
 800213c:	f002 ffbc 	bl	80050b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002140:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07e      	beq.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800214a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002178:	843b      	strh	r3, [r7, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	8c3b      	ldrh	r3, [r7, #32]
 800218a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002192:	b29b      	uxth	r3, r3
 8002194:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	78db      	ldrb	r3, [r3, #3]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d00c      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x554>
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d146      	bne.n	800223c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d141      	bne.n	800223c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	3302      	adds	r3, #2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	8bfb      	ldrh	r3, [r7, #30]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d906      	bls.n	80021fa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	8bfb      	ldrh	r3, [r7, #30]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	e002      	b.n	8002200 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f007 febd 	bl	8009f8e <HAL_PCD_DataInStageCallback>
 8002214:	e018      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	8bfb      	ldrh	r3, [r7, #30]
 800221c:	441a      	add	r2, r3
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	441a      	add	r2, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002234:	4618      	mov	r0, r3
 8002236:	f002 ff3f 	bl	80050b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800223a:	e005      	b.n	8002248 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800223c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800223e:	461a      	mov	r2, r3
 8002240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f91b 	bl	800247e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21b      	sxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f6ff ad0a 	blt.w	8001c6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3738      	adds	r7, #56	; 0x38
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d07e      	beq.n	800237a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	3302      	adds	r3, #2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	8b7b      	ldrh	r3, [r7, #26]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d306      	bcc.n	80022be <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	619a      	str	r2, [r3, #24]
 80022bc:	e002      	b.n	80022c4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d123      	bne.n	8002314 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	833b      	strh	r3, [r7, #24]
 80022e8:	8b3b      	ldrh	r3, [r7, #24]
 80022ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022ee:	833b      	strh	r3, [r7, #24]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	8b3b      	ldrh	r3, [r7, #24]
 8002300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	b29b      	uxth	r3, r3
 8002312:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01f      	beq.n	800235e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002338:	82fb      	strh	r3, [r7, #22]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	441a      	add	r2, r3
 8002348:	8afb      	ldrh	r3, [r7, #22]
 800234a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800235e:	8b7b      	ldrh	r3, [r7, #26]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8087 	beq.w	8002474 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	891a      	ldrh	r2, [r3, #8]
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	f004 fe5b 	bl	800702e <USB_ReadPMA>
 8002378:	e07c      	b.n	8002474 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	3306      	adds	r3, #6
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	8b7b      	ldrh	r3, [r7, #26]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d306      	bcc.n	80023bc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	e002      	b.n	80023c2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d123      	bne.n	8002412 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	83fb      	strh	r3, [r7, #30]
 80023e6:	8bfb      	ldrh	r3, [r7, #30]
 80023e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ec:	83fb      	strh	r3, [r7, #30]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11f      	bne.n	800245c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	83bb      	strh	r3, [r7, #28]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	8bbb      	ldrh	r3, [r7, #28]
 8002448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002458:	b29b      	uxth	r3, r3
 800245a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800245c:	8b7b      	ldrh	r3, [r7, #26]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	895a      	ldrh	r2, [r3, #10]
 800246e:	8b7b      	ldrh	r3, [r7, #26]
 8002470:	f004 fddd 	bl	800702e <USB_ReadPMA>
    }
  }

  return count;
 8002474:	8b7b      	ldrh	r3, [r7, #26]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b0a2      	sub	sp, #136	; 0x88
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 81c7 	beq.w	8002826 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	3302      	adds	r3, #2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d907      	bls.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	e002      	b.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80b9 	bne.w	8002662 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d126      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	4413      	add	r3, r2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	4413      	add	r3, r2
 800251a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800252a:	b29a      	uxth	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253e:	b29a      	uxth	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01a      	b.n	800257c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d116      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0xfe>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	4413      	add	r3, r2
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	011a      	lsls	r2, r3, #4
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	4413      	add	r3, r2
 8002570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2200      	movs	r2, #0
 800257a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d126      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	011a      	lsls	r2, r3, #4
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025bc:	b29a      	uxth	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	801a      	strh	r2, [r3, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	e017      	b.n	8002608 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d113      	bne.n	8002608 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	4413      	add	r3, r2
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	011a      	lsls	r2, r3, #4
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	4413      	add	r3, r2
 80025fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2200      	movs	r2, #0
 8002606:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f007 fcbd 	bl	8009f8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 82d4 	beq.w	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	827b      	strh	r3, [r7, #18]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	8a7b      	ldrh	r3, [r7, #18]
 800264c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	b29b      	uxth	r3, r3
 800265e:	8013      	strh	r3, [r2, #0]
 8002660:	e2b2      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d021      	beq.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	441a      	add	r2, r3
 8002698:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800269c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 8286 	bne.w	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c4:	441a      	add	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d2:	441a      	add	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d309      	bcc.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	621a      	str	r2, [r3, #32]
 80026f6:	e015      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002704:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800270e:	e009      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d155      	bne.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	4413      	add	r3, r2
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	011a      	lsls	r2, r3, #4
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	4413      	add	r3, r2
 800274e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
 8002754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002756:	2b00      	cmp	r3, #0
 8002758:	d112      	bne.n	8002780 <HAL_PCD_EP_DB_Transmit+0x302>
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002764:	b29a      	uxth	r2, r3
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002778:	b29a      	uxth	r2, r3
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e047      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x392>
 8002780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002782:	2b3e      	cmp	r3, #62	; 0x3e
 8002784:	d811      	bhi.n	80027aa <HAL_PCD_EP_DB_Transmit+0x32c>
 8002786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002798:	3301      	adds	r3, #1
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48
 800279c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279e:	b29b      	uxth	r3, r3
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e032      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x392>
 80027aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x342>
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027bc:	3b01      	subs	r3, #1
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	e01b      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x392>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d117      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0x392>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	643b      	str	r3, [r7, #64]	; 0x40
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f4:	4413      	add	r3, r2
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	011a      	lsls	r2, r3, #4
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	4413      	add	r3, r2
 8002802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800280a:	b29a      	uxth	r2, r3
 800280c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6959      	ldr	r1, [r3, #20]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	891a      	ldrh	r2, [r3, #8]
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	f004 fbc0 	bl	8006fa4 <USB_WritePMA>
 8002824:	e1d0      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	3306      	adds	r3, #6
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800285a:	429a      	cmp	r2, r3
 800285c:	d307      	bcc.n	800286e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	619a      	str	r2, [r3, #24]
 800286c:	e002      	b.n	8002874 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 80c4 	bne.w	8002a06 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d126      	bne.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	4413      	add	r3, r2
 800289c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	e01a      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x48c>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d116      	bne.n	800290a <HAL_PCD_EP_DB_Transmit+0x48c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	4413      	add	r3, r2
 80028f2:	677b      	str	r3, [r7, #116]	; 0x74
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	011a      	lsls	r2, r3, #4
 80028fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fc:	4413      	add	r3, r2
 80028fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002902:	673b      	str	r3, [r7, #112]	; 0x70
 8002904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002906:	2200      	movs	r2, #0
 8002908:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d12f      	bne.n	8002978 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002930:	4413      	add	r3, r2
 8002932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	011a      	lsls	r2, r3, #4
 800293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002940:	4413      	add	r3, r2
 8002942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800294a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002956:	b29a      	uxth	r2, r3
 8002958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296e:	b29a      	uxth	r2, r3
 8002970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e017      	b.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d113      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298e:	4413      	add	r3, r2
 8002990:	67bb      	str	r3, [r7, #120]	; 0x78
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	011a      	lsls	r2, r3, #4
 8002998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299a:	4413      	add	r3, r2
 800299c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f007 faed 	bl	8009f8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8104 	bne.w	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	441a      	add	r2, r3
 80029ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8013      	strh	r3, [r2, #0]
 8002a04:	e0e0      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d121      	bne.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	f040 80b4 	bne.w	8002bc8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a68:	441a      	add	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d309      	bcc.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	621a      	str	r2, [r3, #32]
 8002a9a:	e015      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002aa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ab2:	e009      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d155      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	4413      	add	r3, r2
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	011a      	lsls	r2, r3, #4
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	4413      	add	r3, r2
 8002af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d112      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e044      	b.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b2e:	d811      	bhi.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	3301      	adds	r3, #1
 8002b44:	657b      	str	r3, [r7, #84]	; 0x54
 8002b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e02f      	b.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	657b      	str	r3, [r7, #84]	; 0x54
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	3b01      	subs	r3, #1
 8002b68:	657b      	str	r3, [r7, #84]	; 0x54
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e018      	b.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d114      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b98:	4413      	add	r3, r2
 8002b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	011a      	lsls	r2, r3, #4
 8002ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6959      	ldr	r1, [r3, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	895a      	ldrh	r2, [r3, #10]
 8002bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f004 f9ee 	bl	8006fa4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be2:	823b      	strh	r3, [r7, #16]
 8002be4:	8a3b      	ldrh	r3, [r7, #16]
 8002be6:	f083 0310 	eor.w	r3, r3, #16
 8002bea:	823b      	strh	r3, [r7, #16]
 8002bec:	8a3b      	ldrh	r3, [r7, #16]
 8002bee:	f083 0320 	eor.w	r3, r3, #32
 8002bf2:	823b      	strh	r3, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	8a3b      	ldrh	r3, [r7, #16]
 8002c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3788      	adds	r7, #136	; 0x88
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b087      	sub	sp, #28
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c34:	897b      	ldrh	r3, [r7, #10]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	897b      	ldrh	r3, [r7, #10]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e009      	b.n	8002c6c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c58:	897a      	ldrh	r2, [r7, #10]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d107      	bne.n	8002c82 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	80da      	strh	r2, [r3, #6]
 8002c80:	e00b      	b.n	8002c9a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2201      	movs	r2, #1
 8002c86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e272      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8087 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc8:	4b92      	ldr	r3, [pc, #584]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d00c      	beq.n	8002cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd4:	4b8f      	ldr	r3, [pc, #572]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d112      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d10b      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d06c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d168      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e24c      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x76>
 8002d10:	4b80      	ldr	r3, [pc, #512]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a7f      	ldr	r2, [pc, #508]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e02e      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b7b      	ldr	r3, [pc, #492]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7a      	ldr	r2, [pc, #488]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b78      	ldr	r3, [pc, #480]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0xbc>
 8002d4a:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a71      	ldr	r2, [pc, #452]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d64:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b68      	ldr	r3, [pc, #416]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a67      	ldr	r2, [pc, #412]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fd ff02 	bl	8000b8c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fd fefe 	bl	8000b8c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e200      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe4>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd feee 	bl	8000b8c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fd feea 	bl	8000b8c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1ec      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x10c>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d063      	beq.n	8002eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de2:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dee:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x18c>
 8002dfa:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x176>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1c0      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4939      	ldr	r1, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e03a      	b.n	8002eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fd fea3 	bl	8000b8c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fd fe9f 	bl	8000b8c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1a1      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4927      	ldr	r1, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_RCC_OscConfig+0x270>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd fe82 	bl	8000b8c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fd fe7e 	bl	8000b8c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e180      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d03a      	beq.n	8002f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d019      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fd fe62 	bl	8000b8c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fd fe5e 	bl	8000b8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e160      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eea:	2001      	movs	r0, #1
 8002eec:	f000 fb08 	bl	8003500 <RCC_Delay>
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef8:	f7fd fe48 	bl	8000b8c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efe:	e00f      	b.n	8002f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fd fe44 	bl	8000b8c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d908      	bls.n	8002f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e146      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	42420000 	.word	0x42420000
 8002f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e9      	bne.n	8002f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a6 	beq.w	8003086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b82      	ldr	r3, [pc, #520]	; (8003170 <HAL_RCC_OscConfig+0x4c8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b7f      	ldr	r3, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x4c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7e      	ldr	r2, [pc, #504]	; (8003170 <HAL_RCC_OscConfig+0x4c8>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fe05 	bl	8000b8c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fd fe01 	bl	8000b8c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	; 0x64
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e103      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_RCC_OscConfig+0x4c8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x312>
 8002fac:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6213      	str	r3, [r2, #32]
 8002fb8:	e02d      	b.n	8003016 <HAL_RCC_OscConfig+0x36e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a69      	ldr	r2, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a66      	ldr	r2, [pc, #408]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6213      	str	r3, [r2, #32]
 8002fda:	e01c      	b.n	8003016 <HAL_RCC_OscConfig+0x36e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x356>
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a60      	ldr	r2, [pc, #384]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x36e>
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a5a      	ldr	r2, [pc, #360]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6213      	str	r3, [r2, #32]
 800300a:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd fdb5 	bl	8000b8c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fd fdb1 	bl	8000b8c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0b1      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <HAL_RCC_OscConfig+0x37e>
 8003048:	e014      	b.n	8003074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fd fd9f 	bl	8000b8c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fd fd9b 	bl	8000b8c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e09b      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ee      	bne.n	8003052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b3c      	ldr	r3, [pc, #240]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a3b      	ldr	r2, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d061      	beq.n	8003160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d146      	bne.n	8003132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fd fd6f 	bl	8000b8c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fd fd6b 	bl	8000b8c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e06d      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d108      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4921      	ldr	r1, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a19      	ldr	r1, [r3, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	430b      	orrs	r3, r1
 80030fe:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fd fd3f 	bl	8000b8c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fd fd3b 	bl	8000b8c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e03d      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x46a>
 8003130:	e035      	b.n	800319e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x4cc>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fd28 	bl	8000b8c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd fd24 	bl	8000b8c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e026      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_OscConfig+0x4c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x498>
 800315e:	e01e      	b.n	800319e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e019      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
 8003174:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x500>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	429a      	cmp	r2, r3
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000

080031ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0d0      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d910      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4965      	ldr	r1, [pc, #404]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800322a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d040      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e073      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06b      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b39      	ldr	r3, [pc, #228]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4936      	ldr	r1, [pc, #216]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fd fc76 	bl	8000b8c <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd fc72 	bl	8000b8c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e053      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d210      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	4922      	ldr	r1, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f821 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1cc>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fb1a 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000
 8003370:	40021000 	.word	0x40021000
 8003374:	0800a6b4 	.word	0x0800a6b4
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b490      	push	{r4, r7}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCC_GetSysClockFreq+0xac>)
 8003388:	1d3c      	adds	r4, r7, #4
 800338a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800338c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003390:	f240 2301 	movw	r3, #513	; 0x201
 8003394:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x46>
 80033be:	e02b      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	e02b      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3328      	adds	r3, #40	; 0x28
 80033d0:	443b      	add	r3, r7
 80033d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0c5b      	lsrs	r3, r3, #17
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	3328      	adds	r3, #40	; 0x28
 80033ee:	443b      	add	r3, r7
 80033f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033fa:	fb03 f202 	mul.w	r2, r3, r2
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e004      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	623b      	str	r3, [r7, #32]
      break;
 8003416:	e002      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb4>)
 800341a:	623b      	str	r3, [r7, #32]
      break;
 800341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341e:	6a3b      	ldr	r3, [r7, #32]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bc90      	pop	{r4, r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	0800a654 	.word	0x0800a654
 8003430:	40021000 	.word	0x40021000
 8003434:	007a1200 	.word	0x007a1200
 8003438:	003d0900 	.word	0x003d0900

0800343c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b02      	ldr	r3, [pc, #8]	; (800344c <HAL_RCC_GetHCLKFreq+0x10>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000000 	.word	0x20000000

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003454:	f7ff fff2 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	0800a6c4 	.word	0x0800a6c4

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800347c:	f7ff ffde 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0adb      	lsrs	r3, r3, #11
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4903      	ldr	r1, [pc, #12]	; (800349c <HAL_RCC_GetPCLK2Freq+0x24>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	0800a6c4 	.word	0x0800a6c4

080034a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	220f      	movs	r2, #15
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetClockConfig+0x5c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0207 	and.w	r2, r3, #7
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40022000 	.word	0x40022000

08003500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <RCC_Delay+0x34>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <RCC_Delay+0x38>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0a5b      	lsrs	r3, r3, #9
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800351c:	bf00      	nop
  }
  while (Delay --);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	60fa      	str	r2, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f9      	bne.n	800351c <RCC_Delay+0x1c>
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	20000000 	.word	0x20000000
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d07d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a4b      	ldr	r2, [pc, #300]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	61d3      	str	r3, [r2, #28]
 8003574:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d118      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003590:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a42      	ldr	r2, [pc, #264]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359c:	f7fd faf6 	bl	8000b8c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fd faf2 	bl	8000b8c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e06d      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d02e      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d027      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035f6:	4a29      	ldr	r2, [pc, #164]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fac1 	bl	8000b8c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fabd 	bl	8000b8c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e036      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ee      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	4313      	orrs	r3, r2
 8003640:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	490b      	ldr	r1, [pc, #44]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4904      	ldr	r1, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42420440 	.word	0x42420440

080036a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e076      	b.n	80037a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ca:	d009      	beq.n	80036e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	61da      	str	r2, [r3, #28]
 80036d2:	e005      	b.n	80036e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd f854 	bl	80007a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	ea42 0103 	orr.w	r1, r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	0c1a      	lsrs	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0204 	and.w	r2, r2, #4
 8003786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f839 	bl	800384e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fada 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e03a      	b.n	80038ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_TIM_Base_Start_IT+0x9c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <HAL_TIM_Base_Start_IT+0xa0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d010      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	e007      	b.n	80038ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800

08003904 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e041      	b.n	800399a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fc ff86 	bl	800083c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f000 fa30 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d122      	bne.n	80039fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d11b      	bne.n	80039fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f06f 0202 	mvn.w	r2, #2
 80039ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9c3 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 80039ea:	e005      	b.n	80039f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f9b6 	bl	8003d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9c5 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d122      	bne.n	8003a52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d11b      	bne.n	8003a52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0204 	mvn.w	r2, #4
 8003a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f999 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003a3e:	e005      	b.n	8003a4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f98c 	bl	8003d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f99b 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d122      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d11b      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0208 	mvn.w	r2, #8
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f96f 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003a92:	e005      	b.n	8003aa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f962 	bl	8003d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f971 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d122      	bne.n	8003afa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d11b      	bne.n	8003afa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0210 	mvn.w	r2, #16
 8003aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2208      	movs	r2, #8
 8003ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f945 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003ae6:	e005      	b.n	8003af4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f938 	bl	8003d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f947 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10e      	bne.n	8003b26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f06f 0201 	mvn.w	r2, #1
 8003b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fc fd75 	bl	8000610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d10e      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d107      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fc0c 	bl	800436a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d10e      	bne.n	8003b7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d107      	bne.n	8003b7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f90b 	bl	8003d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d10e      	bne.n	8003baa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d107      	bne.n	8003baa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0220 	mvn.w	r2, #32
 8003ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fbd7 	bl	8004358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_IC_ConfigChannel+0x1a>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e082      	b.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0x120>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11b      	bne.n	8003c12 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 f9cd 	bl	8003f88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 020c 	bic.w	r2, r2, #12
 8003bfc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6999      	ldr	r1, [r3, #24]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
 8003c10:	e05a      	b.n	8003cc8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11c      	bne.n	8003c52 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 fa36 	bl	8004098 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
 8003c50:	e03a      	b.n	8003cc8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f000 fa81 	bl	800416e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 020c 	bic.w	r2, r2, #12
 8003c7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69d9      	ldr	r1, [r3, #28]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	61da      	str	r2, [r3, #28]
 8003c8e:	e01b      	b.n	8003cc8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f000 faa0 	bl	80041e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cb2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69d9      	ldr	r1, [r3, #28]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e031      	b.n	8003d56 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8b1 	bl	8003e6c <TIM_SlaveTimer_SetConfig>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e018      	b.n	8003d56 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d32:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d42:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
	...

08003da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00b      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d007      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <TIM_Base_SetConfig+0xbc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_Base_SetConfig+0x30>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0xc0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d108      	bne.n	8003dea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d007      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <TIM_Base_SetConfig+0xbc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_Base_SetConfig+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <TIM_Base_SetConfig+0xc0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <TIM_Base_SetConfig+0xb8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800

08003e6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0307 	bic.w	r3, r3, #7
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b70      	cmp	r3, #112	; 0x70
 8003eb0:	d01a      	beq.n	8003ee8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003eb2:	2b70      	cmp	r3, #112	; 0x70
 8003eb4:	d860      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d054      	beq.n	8003f64 <TIM_SlaveTimer_SetConfig+0xf8>
 8003eba:	2b60      	cmp	r3, #96	; 0x60
 8003ebc:	d85c      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ebe:	2b50      	cmp	r3, #80	; 0x50
 8003ec0:	d046      	beq.n	8003f50 <TIM_SlaveTimer_SetConfig+0xe4>
 8003ec2:	2b50      	cmp	r3, #80	; 0x50
 8003ec4:	d858      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d019      	beq.n	8003efe <TIM_SlaveTimer_SetConfig+0x92>
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d854      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ece:	2b30      	cmp	r3, #48	; 0x30
 8003ed0:	d054      	beq.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003ed2:	2b30      	cmp	r3, #48	; 0x30
 8003ed4:	d850      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d050      	beq.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d84c      	bhi.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04c      	beq.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d04a      	beq.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003ee6:	e047      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68d9      	ldr	r1, [r3, #12]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f000 f9b0 	bl	800425c <TIM_ETR_SetConfig>
      break;
 8003efc:	e03f      	b.n	8003f7e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d101      	bne.n	8003f0a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03a      	b.n	8003f80 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f30:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
      break;
 8003f4e:	e016      	b.n	8003f7e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6899      	ldr	r1, [r3, #8]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f000 f86d 	bl	800403c <TIM_TI1_ConfigInputStage>
      break;
 8003f62:	e00c      	b.n	8003f7e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f000 f8cd 	bl	8004110 <TIM_TI2_ConfigInputStage>
      break;
 8003f76:	e002      	b.n	8003f7e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003f7c:	bf00      	nop
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <TIM_TI1_SetConfig+0xa8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <TIM_TI1_SetConfig+0x46>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbc:	d007      	beq.n	8003fce <TIM_TI1_SetConfig+0x46>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <TIM_TI1_SetConfig+0xac>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_TI1_SetConfig+0x46>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <TIM_TI1_SetConfig+0xb0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <TIM_TI1_SetConfig+0x4a>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <TIM_TI1_SetConfig+0x4c>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e003      	b.n	8003ff2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f023 030a 	bic.w	r3, r3, #10
 800400c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f003 030a 	and.w	r3, r3, #10
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800

0800403c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 030a 	bic.w	r3, r3, #10
 8004078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	b29b      	uxth	r3, r3
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f023 0210 	bic.w	r2, r3, #16
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800413a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800414c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004222:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	031b      	lsls	r3, r3, #12
 8004228:	b29b      	uxth	r3, r3
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004236:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	031b      	lsls	r3, r3, #12
 800423c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
	...

0800429c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e046      	b.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d009      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a10      	ldr	r2, [pc, #64]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10c      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800

08004358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e03f      	b.n	800440e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fa9c 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	; 0x24
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f829 	bl	8004418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004452:	f023 030c 	bic.w	r3, r3, #12
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	430b      	orrs	r3, r1
 800445e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2c      	ldr	r2, [pc, #176]	; (800452c <UART_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe fffa 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	e002      	b.n	800448e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7fe ffe2 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 800448c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <UART_SetConfig+0x118>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	0119      	lsls	r1, r3, #4
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009a      	lsls	r2, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c4:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <UART_SetConfig+0x118>)
 80044c6:	fba3 0302 	umull	r0, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2064      	movs	r0, #100	; 0x64
 80044ce:	fb00 f303 	mul.w	r3, r0, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	3332      	adds	r3, #50	; 0x32
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <UART_SetConfig+0x118>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e4:	4419      	add	r1, r3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009a      	lsls	r2, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <UART_SetConfig+0x118>)
 80044fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2064      	movs	r0, #100	; 0x64
 8004506:	fb00 f303 	mul.w	r3, r0, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	3332      	adds	r3, #50	; 0x32
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <UART_SetConfig+0x118>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	440a      	add	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40013800 	.word	0x40013800
 8004530:	51eb851f 	.word	0x51eb851f

08004534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 0014 	add.w	r0, r7, #20
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	b004      	add	sp, #16
 8004552:	4770      	bx	lr

08004554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004564:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004568:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004588:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800458c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	b29b      	uxth	r3, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	4013      	ands	r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045cc:	b084      	sub	sp, #16
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	f107 0014 	add.w	r0, r7, #20
 80045da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	b004      	add	sp, #16
 800460a:	4770      	bx	lr

0800460c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800460c:	b480      	push	{r7}
 800460e:	b09b      	sub	sp, #108	; 0x6c
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	78db      	ldrb	r3, [r3, #3]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d81f      	bhi.n	800467e <USB_ActivateEndpoint+0x72>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <USB_ActivateEndpoint+0x38>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004655 	.word	0x08004655
 8004648:	08004671 	.word	0x08004671
 800464c:	08004687 	.word	0x08004687
 8004650:	08004663 	.word	0x08004663
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004654:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004660:	e012      	b.n	8004688 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004662:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004666:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800466a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800466e:	e00b      	b.n	8004688 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004670:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004678:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800467c:	e004      	b.n	8004688 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004684:	e000      	b.n	8004688 <USB_ActivateEndpoint+0x7c>
      break;
 8004686:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	7b1b      	ldrb	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 8149 	bne.w	800498c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8084 	beq.w	800480c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	4413      	add	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	011a      	lsls	r2, r3, #4
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	88db      	ldrh	r3, [r3, #6]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	81fb      	strh	r3, [r7, #14]
 8004746:	89fb      	ldrh	r3, [r7, #14]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <USB_ActivateEndpoint+0x17c>
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	81bb      	strh	r3, [r7, #12]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	89bb      	ldrh	r3, [r7, #12]
 8004774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	78db      	ldrb	r3, [r3, #3]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d020      	beq.n	80047d2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	813b      	strh	r3, [r7, #8]
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	f083 0320 	eor.w	r3, r3, #32
 80047ae:	813b      	strh	r3, [r7, #8]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	893b      	ldrh	r3, [r7, #8]
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
 80047d0:	e27f      	b.n	8004cd2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	897b      	ldrh	r3, [r7, #10]
 80047f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]
 800480a:	e262      	b.n	8004cd2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	4413      	add	r3, r2
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	4413      	add	r3, r2
 800482a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	88db      	ldrh	r3, [r3, #6]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	4413      	add	r3, r2
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	4413      	add	r3, r2
 800485e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d112      	bne.n	8004892 <USB_ActivateEndpoint+0x286>
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004876:	b29a      	uxth	r2, r3
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488a:	b29a      	uxth	r2, r3
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	e02f      	b.n	80048f2 <USB_ActivateEndpoint+0x2e6>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b3e      	cmp	r3, #62	; 0x3e
 8004898:	d813      	bhi.n	80048c2 <USB_ActivateEndpoint+0x2b6>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	663b      	str	r3, [r7, #96]	; 0x60
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <USB_ActivateEndpoint+0x2a8>
 80048ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b0:	3301      	adds	r3, #1
 80048b2:	663b      	str	r3, [r7, #96]	; 0x60
 80048b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e017      	b.n	80048f2 <USB_ActivateEndpoint+0x2e6>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <USB_ActivateEndpoint+0x2d0>
 80048d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d8:	3b01      	subs	r3, #1
 80048da:	663b      	str	r3, [r7, #96]	; 0x60
 80048dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048de:	b29b      	uxth	r3, r3
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	83fb      	strh	r3, [r7, #30]
 8004900:	8bfb      	ldrh	r3, [r7, #30]
 8004902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01b      	beq.n	8004942 <USB_ActivateEndpoint+0x336>
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	83bb      	strh	r3, [r7, #28]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8bbb      	ldrh	r3, [r7, #28]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	837b      	strh	r3, [r7, #26]
 800495a:	8b7b      	ldrh	r3, [r7, #26]
 800495c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004960:	837b      	strh	r3, [r7, #26]
 8004962:	8b7b      	ldrh	r3, [r7, #26]
 8004964:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004968:	837b      	strh	r3, [r7, #26]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	8b7b      	ldrh	r3, [r7, #26]
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]
 800498a:	e1a2      	b.n	8004cd2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d8:	4413      	add	r3, r2
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ea:	657b      	str	r3, [r7, #84]	; 0x54
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	891b      	ldrh	r3, [r3, #8]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0c:	4413      	add	r3, r2
 8004a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	011a      	lsls	r2, r3, #4
 8004a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	895b      	ldrh	r3, [r3, #10]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8091 	bne.w	8004b5c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01b      	beq.n	8004a8a <USB_ActivateEndpoint+0x47e>
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01b      	beq.n	8004ada <USB_ActivateEndpoint+0x4ce>
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004af2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004af4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004af8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004afa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004afc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b38:	867b      	strh	r3, [r7, #50]	; 0x32
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]
 8004b5a:	e0ba      	b.n	8004cd2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01d      	beq.n	8004bb4 <USB_ActivateEndpoint+0x5a8>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004bc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01d      	beq.n	8004c0c <USB_ActivateEndpoint+0x600>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d024      	beq.n	8004c5e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c32:	f083 0320 	eor.w	r3, r3, #32
 8004c36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]
 8004c5c:	e01d      	b.n	8004c9a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004cd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	376c      	adds	r7, #108	; 0x6c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b08d      	sub	sp, #52	; 0x34
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	7b1b      	ldrb	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 808e 	bne.w	8004e10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d044      	beq.n	8004d86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	81bb      	strh	r3, [r7, #12]
 8004d0a:	89bb      	ldrh	r3, [r7, #12]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <USB_DeactivateEndpoint+0x6c>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	817b      	strh	r3, [r7, #10]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	813b      	strh	r3, [r7, #8]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	893b      	ldrh	r3, [r7, #8]
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
 8004d84:	e192      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	827b      	strh	r3, [r7, #18]
 8004d94:	8a7b      	ldrh	r3, [r7, #18]
 8004d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <USB_DeactivateEndpoint+0xf6>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	823b      	strh	r3, [r7, #16]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8a3b      	ldrh	r3, [r7, #16]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	81fb      	strh	r3, [r7, #14]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
 8004e0e:	e14d      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 80a5 	bne.w	8004f64 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	843b      	strh	r3, [r7, #32]
 8004e28:	8c3b      	ldrh	r3, [r7, #32]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <USB_DeactivateEndpoint+0x18a>
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	83fb      	strh	r3, [r7, #30]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8bfb      	ldrh	r3, [r7, #30]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	83bb      	strh	r3, [r7, #28]
 8004e78:	8bbb      	ldrh	r3, [r7, #28]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01b      	beq.n	8004eba <USB_DeactivateEndpoint+0x1da>
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	837b      	strh	r3, [r7, #26]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	833b      	strh	r3, [r7, #24]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8b3b      	ldrh	r3, [r7, #24]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	82fb      	strh	r3, [r7, #22]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8afb      	ldrh	r3, [r7, #22]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	82bb      	strh	r3, [r7, #20]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	8abb      	ldrh	r3, [r7, #20]
 8004f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8013      	strh	r3, [r2, #0]
 8004f62:	e0a3      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <USB_DeactivateEndpoint+0x2d4>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <USB_DeactivateEndpoint+0x324>
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	847b      	strh	r3, [r7, #34]	; 0x22
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3734      	adds	r7, #52	; 0x34
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b0cc      	sub	sp, #304	; 0x130
 80050bc:	af00      	add	r7, sp, #0
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050c6:	6018      	str	r0, [r3, #0]
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	785b      	ldrb	r3, [r3, #1]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	f041 817d 	bne.w	80063de <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d908      	bls.n	8005112 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005110:	e007      	b.n	8005122 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	7b1b      	ldrb	r3, [r3, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d152      	bne.n	80051d8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6959      	ldr	r1, [r3, #20]
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	88da      	ldrh	r2, [r3, #6]
 800514a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514e:	b29b      	uxth	r3, r3
 8005150:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005154:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005158:	6800      	ldr	r0, [r0, #0]
 800515a:	f001 ff23 	bl	8006fa4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005166:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800516a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005180:	b29b      	uxth	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800518c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005190:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	440a      	add	r2, r1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	011a      	lsls	r2, r3, #4
 80051a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	f001 b8b5 	b.w	8006342 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	78db      	ldrb	r3, [r3, #3]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 84c6 	bne.w	8005b76 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	f240 8443 	bls.w	8005a8e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 823e 	beq.w	8005726 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 809a 	bne.w	8005404 <USB_EPStartXfer+0x34c>
 80052d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005302:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	440a      	add	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4413      	add	r3, r2
 8005326:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d122      	bne.n	8005382 <USB_EPStartXfer+0x2ca>
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800534e:	b29a      	uxth	r2, r3
 8005350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005354:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005360:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005372:	b29a      	uxth	r2, r3
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e079      	b.n	8005476 <USB_EPStartXfer+0x3be>
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	2b3e      	cmp	r3, #62	; 0x3e
 8005388:	d81b      	bhi.n	80053c2 <USB_EPStartXfer+0x30a>
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <USB_EPStartXfer+0x2f2>
 80053a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053a4:	3301      	adds	r3, #1
 80053a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e059      	b.n	8005476 <USB_EPStartXfer+0x3be>
 80053c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <USB_EPStartXfer+0x32a>
 80053d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053dc:	3b01      	subs	r3, #1
 80053de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e038      	b.n	8005476 <USB_EPStartXfer+0x3be>
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d130      	bne.n	8005476 <USB_EPStartXfer+0x3be>
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800542e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005432:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	440a      	add	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	011a      	lsls	r2, r3, #4
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4413      	add	r3, r2
 8005456:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005468:	b29a      	uxth	r2, r3
 800546a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	895b      	ldrh	r3, [r3, #10]
 8005482:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005496:	b29b      	uxth	r3, r3
 8005498:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800549c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054a4:	6800      	ldr	r0, [r0, #0]
 80054a6:	f001 fd7d 	bl	8006fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 80054aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	441a      	add	r2, r3
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d90f      	bls.n	8005504 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	621a      	str	r2, [r3, #32]
 8005502:	e00e      	b.n	8005522 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 809a 	bne.w	8005668 <USB_EPStartXfer+0x5b0>
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800553c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005540:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	4619      	mov	r1, r3
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005566:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	440a      	add	r2, r1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4413      	add	r3, r2
 800558a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d122      	bne.n	80055e6 <USB_EPStartXfer+0x52e>
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e083      	b.n	80056ee <USB_EPStartXfer+0x636>
 80055e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ea:	2b3e      	cmp	r3, #62	; 0x3e
 80055ec:	d81b      	bhi.n	8005626 <USB_EPStartXfer+0x56e>
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <USB_EPStartXfer+0x556>
 8005604:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800560e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29a      	uxth	r2, r3
 8005618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e063      	b.n	80056ee <USB_EPStartXfer+0x636>
 8005626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <USB_EPStartXfer+0x58e>
 800563c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005640:	3b01      	subs	r3, #1
 8005642:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005646:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e042      	b.n	80056ee <USB_EPStartXfer+0x636>
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d13a      	bne.n	80056ee <USB_EPStartXfer+0x636>
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005680:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005684:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056aa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	440a      	add	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	011a      	lsls	r2, r3, #4
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	891b      	ldrh	r3, [r3, #8]
 80056fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6959      	ldr	r1, [r3, #20]
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	b29b      	uxth	r3, r3
 8005710:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005714:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005718:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800571c:	6800      	ldr	r0, [r0, #0]
 800571e:	f001 fc41 	bl	8006fa4 <USB_WritePMA>
 8005722:	f000 be0e 	b.w	8006342 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d16d      	bne.n	8005812 <USB_EPStartXfer+0x75a>
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	64bb      	str	r3, [r7, #72]	; 0x48
 8005742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	4413      	add	r3, r2
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	011a      	lsls	r2, r3, #4
 8005768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576a:	4413      	add	r3, r2
 800576c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
 8005772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <USB_EPStartXfer+0x6e8>
 800577a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005784:	b29a      	uxth	r2, r3
 8005786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005798:	b29a      	uxth	r2, r3
 800579a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e063      	b.n	8005868 <USB_EPStartXfer+0x7b0>
 80057a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a4:	2b3e      	cmp	r3, #62	; 0x3e
 80057a6:	d817      	bhi.n	80057d8 <USB_EPStartXfer+0x720>
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <USB_EPStartXfer+0x710>
 80057be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057c2:	3301      	adds	r3, #1
 80057c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	e047      	b.n	8005868 <USB_EPStartXfer+0x7b0>
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <USB_EPStartXfer+0x740>
 80057ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057f2:	3b01      	subs	r3, #1
 80057f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	029b      	lsls	r3, r3, #10
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e02a      	b.n	8005868 <USB_EPStartXfer+0x7b0>
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d122      	bne.n	8005868 <USB_EPStartXfer+0x7b0>
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	653b      	str	r3, [r7, #80]	; 0x50
 800582e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005842:	4413      	add	r3, r2
 8005844:	653b      	str	r3, [r7, #80]	; 0x50
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	011a      	lsls	r2, r3, #4
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	4413      	add	r3, r2
 8005858:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800585c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005862:	b29a      	uxth	r2, r3
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	891b      	ldrh	r3, [r3, #8]
 8005874:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6959      	ldr	r1, [r3, #20]
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005888:	b29b      	uxth	r3, r3
 800588a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800588e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005892:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	f001 fb84 	bl	8006fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	441a      	add	r2, r3
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90f      	bls.n	80058f6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80058d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	621a      	str	r2, [r3, #32]
 80058f4:	e00e      	b.n	8005914 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80058f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d16d      	bne.n	8005a0c <USB_EPStartXfer+0x954>
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
 800593c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	4413      	add	r3, r2
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	011a      	lsls	r2, r3, #4
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	4413      	add	r3, r2
 8005966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d112      	bne.n	800599a <USB_EPStartXfer+0x8e2>
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597e:	b29a      	uxth	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005992:	b29a      	uxth	r2, r3
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	e05d      	b.n	8005a56 <USB_EPStartXfer+0x99e>
 800599a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599e:	2b3e      	cmp	r3, #62	; 0x3e
 80059a0:	d817      	bhi.n	80059d2 <USB_EPStartXfer+0x91a>
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <USB_EPStartXfer+0x90a>
 80059b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059bc:	3301      	adds	r3, #1
 80059be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e041      	b.n	8005a56 <USB_EPStartXfer+0x99e>
 80059d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <USB_EPStartXfer+0x93a>
 80059e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ec:	3b01      	subs	r3, #1
 80059ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	e024      	b.n	8005a56 <USB_EPStartXfer+0x99e>
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d11c      	bne.n	8005a56 <USB_EPStartXfer+0x99e>
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	4413      	add	r3, r2
 8005a32:	643b      	str	r3, [r7, #64]	; 0x40
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a44:	4413      	add	r3, r2
 8005a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	895b      	ldrh	r3, [r3, #10]
 8005a62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6959      	ldr	r1, [r3, #20]
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a84:	6800      	ldr	r0, [r0, #0]
 8005a86:	f001 fa8d 	bl	8006fa4 <USB_WritePMA>
 8005a8a:	f000 bc5a 	b.w	8006342 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1a:	4413      	add	r3, r2
 8005b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2e:	4413      	add	r3, r2
 8005b30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	891b      	ldrh	r3, [r3, #8]
 8005b4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6959      	ldr	r1, [r3, #20]
 8005b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b66:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b6a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	f001 fa18 	bl	8006fa4 <USB_WritePMA>
 8005b74:	e3e5      	b.n	8006342 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 81bc 	beq.w	8005f90 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d16d      	bne.n	8005d12 <USB_EPStartXfer+0xc5a>
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c56:	4413      	add	r3, r2
 8005c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d112      	bne.n	8005ca0 <USB_EPStartXfer+0xbe8>
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e060      	b.n	8005d62 <USB_EPStartXfer+0xcaa>
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca6:	d817      	bhi.n	8005cd8 <USB_EPStartXfer+0xc20>
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <USB_EPStartXfer+0xc10>
 8005cbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005cc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e044      	b.n	8005d62 <USB_EPStartXfer+0xcaa>
 8005cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <USB_EPStartXfer+0xc40>
 8005cee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005cf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e027      	b.n	8005d62 <USB_EPStartXfer+0xcaa>
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d11f      	bne.n	8005d62 <USB_EPStartXfer+0xcaa>
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d38:	4413      	add	r3, r2
 8005d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	895b      	ldrh	r3, [r3, #10]
 8005d6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d90:	6800      	ldr	r0, [r0, #0]
 8005d92:	f001 f907 	bl	8006fa4 <USB_WritePMA>
          ep->xfer_buff += len;
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	441a      	add	r2, r3
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d90f      	bls.n	8005df0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	621a      	str	r2, [r3, #32]
 8005dee:	e00e      	b.n	8005e0e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8295 	beq.w	8006342 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d16d      	bne.n	8005f04 <USB_EPStartXfer+0xe4c>
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e48:	4413      	add	r3, r2
 8005e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011a      	lsls	r2, r3, #4
 8005e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e62:	667b      	str	r3, [r7, #100]	; 0x64
 8005e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d112      	bne.n	8005e92 <USB_EPStartXfer+0xdda>
 8005e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e063      	b.n	8005f5a <USB_EPStartXfer+0xea2>
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	2b3e      	cmp	r3, #62	; 0x3e
 8005e98:	d817      	bhi.n	8005eca <USB_EPStartXfer+0xe12>
 8005e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_EPStartXfer+0xe02>
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e047      	b.n	8005f5a <USB_EPStartXfer+0xea2>
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <USB_EPStartXfer+0xe32>
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e02a      	b.n	8005f5a <USB_EPStartXfer+0xea2>
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d122      	bne.n	8005f5a <USB_EPStartXfer+0xea2>
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f34:	4413      	add	r3, r2
 8005f36:	673b      	str	r3, [r7, #112]	; 0x70
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	891b      	ldrh	r3, [r3, #8]
 8005f66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6959      	ldr	r1, [r3, #20]
 8005f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f88:	6800      	ldr	r0, [r0, #0]
 8005f8a:	f001 f80b 	bl	8006fa4 <USB_WritePMA>
 8005f8e:	e1d8      	b.n	8006342 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d178      	bne.n	8006092 <USB_EPStartXfer+0xfda>
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	011a      	lsls	r2, r3, #4
 8005fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d116      	bne.n	800601c <USB_EPStartXfer+0xf64>
 8005fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e06b      	b.n	80060f4 <USB_EPStartXfer+0x103c>
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	2b3e      	cmp	r3, #62	; 0x3e
 8006022:	d818      	bhi.n	8006056 <USB_EPStartXfer+0xf9e>
 8006024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <USB_EPStartXfer+0xf8c>
 800603a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800603e:	3301      	adds	r3, #1
 8006040:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006044:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e04e      	b.n	80060f4 <USB_EPStartXfer+0x103c>
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USB_EPStartXfer+0xfbe>
 800606c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006070:	3b01      	subs	r3, #1
 8006072:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006076:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800607a:	b29b      	uxth	r3, r3
 800607c:	029b      	lsls	r3, r3, #10
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006088:	b29a      	uxth	r2, r3
 800608a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e030      	b.n	80060f4 <USB_EPStartXfer+0x103c>
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d128      	bne.n	80060f4 <USB_EPStartXfer+0x103c>
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060c6:	4413      	add	r3, r2
 80060c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060de:	4413      	add	r3, r2
 80060e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	891b      	ldrh	r3, [r3, #8]
 8006100:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6959      	ldr	r1, [r3, #20]
 8006110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006114:	b29b      	uxth	r3, r3
 8006116:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800611a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800611e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	f000 ff3e 	bl	8006fa4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006138:	441a      	add	r2, r3
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d90f      	bls.n	8006182 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a1a      	ldr	r2, [r3, #32]
 800616e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	621a      	str	r2, [r3, #32]
 8006180:	e00e      	b.n	80061a0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2200      	movs	r2, #0
 800619e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80061a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80cc 	beq.w	8006342 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d178      	bne.n	80062ba <USB_EPStartXfer+0x1202>
 80061c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ec:	4413      	add	r3, r2
 80061ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	011a      	lsls	r2, r3, #4
 8006200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006204:	4413      	add	r3, r2
 8006206:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <USB_EPStartXfer+0x118c>
 8006216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e064      	b.n	800630e <USB_EPStartXfer+0x1256>
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	2b3e      	cmp	r3, #62	; 0x3e
 800624a:	d818      	bhi.n	800627e <USB_EPStartXfer+0x11c6>
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <USB_EPStartXfer+0x11b4>
 8006262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006266:	3301      	adds	r3, #1
 8006268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800626c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	e047      	b.n	800630e <USB_EPStartXfer+0x1256>
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <USB_EPStartXfer+0x11e6>
 8006294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006298:	3b01      	subs	r3, #1
 800629a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e029      	b.n	800630e <USB_EPStartXfer+0x1256>
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d121      	bne.n	800630e <USB_EPStartXfer+0x1256>
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062e0:	4413      	add	r3, r2
 80062e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	011a      	lsls	r2, r3, #4
 80062f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062f8:	4413      	add	r3, r2
 80062fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800630c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800630e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	895b      	ldrh	r3, [r3, #10]
 800631a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6959      	ldr	r1, [r3, #20]
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632e:	b29b      	uxth	r3, r3
 8006330:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006334:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006338:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800633c:	6800      	ldr	r0, [r0, #0]
 800633e:	f000 fe31 	bl	8006fa4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006364:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	8013      	strh	r3, [r2, #0]
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800637a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800637e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006382:	8812      	ldrh	r2, [r2, #0]
 8006384:	f082 0210 	eor.w	r2, r2, #16
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006392:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006396:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800639a:	8812      	ldrh	r2, [r2, #0]
 800639c:	f082 0220 	eor.w	r2, r2, #32
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	441a      	add	r2, r3
 80063bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
 80063da:	f000 bc9f 	b.w	8006d1c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	7b1b      	ldrb	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 80ae 	bne.w	800654c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d917      	bls.n	800643c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800641c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	619a      	str	r2, [r3, #24]
 800643a:	e00e      	b.n	800645a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800647e:	4413      	add	r3, r2
 8006480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	011a      	lsls	r2, r3, #4
 8006492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006496:	4413      	add	r3, r2
 8006498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800649c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d116      	bne.n	80064d6 <USB_EPStartXfer+0x141e>
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e3e8      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 80064d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064da:	2b3e      	cmp	r3, #62	; 0x3e
 80064dc:	d818      	bhi.n	8006510 <USB_EPStartXfer+0x1458>
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <USB_EPStartXfer+0x1446>
 80064f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e3cb      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800651a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <USB_EPStartXfer+0x1478>
 8006526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800652a:	3b01      	subs	r3, #1
 800652c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006534:	b29b      	uxth	r3, r3
 8006536:	029b      	lsls	r3, r3, #10
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e3ad      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800654c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	78db      	ldrb	r3, [r3, #3]
 8006558:	2b02      	cmp	r3, #2
 800655a:	f040 8200 	bne.w	800695e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 8091 	bne.w	8006692 <USB_EPStartXfer+0x15da>
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006594:	4413      	add	r3, r2
 8006596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	011a      	lsls	r2, r3, #4
 80065a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <USB_EPStartXfer+0x153c>
 80065c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e083      	b.n	80066fc <USB_EPStartXfer+0x1644>
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b3e      	cmp	r3, #62	; 0x3e
 8006602:	d820      	bhi.n	8006646 <USB_EPStartXfer+0x158e>
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <USB_EPStartXfer+0x157c>
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	3301      	adds	r3, #1
 8006630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e05a      	b.n	80066fc <USB_EPStartXfer+0x1644>
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USB_EPStartXfer+0x15be>
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	3b01      	subs	r3, #1
 8006672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e034      	b.n	80066fc <USB_EPStartXfer+0x1644>
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d12c      	bne.n	80066fc <USB_EPStartXfer+0x1644>
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c6:	4413      	add	r3, r2
 80066c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	011a      	lsls	r2, r3, #4
 80066da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066de:	4413      	add	r3, r2
 80066e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f040 8091 	bne.w	800683e <USB_EPStartXfer+0x1786>
 800671c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006740:	4413      	add	r3, r2
 8006742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	011a      	lsls	r2, r3, #4
 8006754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006758:	4413      	add	r3, r2
 800675a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d116      	bne.n	80067a0 <USB_EPStartXfer+0x16e8>
 8006772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800677e:	b29a      	uxth	r2, r3
 8006780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e07c      	b.n	800689a <USB_EPStartXfer+0x17e2>
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d820      	bhi.n	80067f2 <USB_EPStartXfer+0x173a>
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <USB_EPStartXfer+0x1728>
 80067d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067da:	3301      	adds	r3, #1
 80067dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e053      	b.n	800689a <USB_EPStartXfer+0x17e2>
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <USB_EPStartXfer+0x176a>
 8006818:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800681c:	3b01      	subs	r3, #1
 800681e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006822:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e02d      	b.n	800689a <USB_EPStartXfer+0x17e2>
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d125      	bne.n	800689a <USB_EPStartXfer+0x17e2>
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006864:	4413      	add	r3, r2
 8006866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	011a      	lsls	r2, r3, #4
 8006878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800687c:	4413      	add	r3, r2
 800687e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006898:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 81fe 	beq.w	8006ca8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <USB_EPStartXfer+0x182c>
 80068d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10d      	bne.n	8006900 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 81db 	bne.w	8006ca8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 81d4 	bne.w	8006ca8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]
 800695c:	e1a4      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800695e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	78db      	ldrb	r3, [r3, #3]
 800696a:	2b01      	cmp	r3, #1
 800696c:	f040 819a 	bne.w	8006ca4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	429a      	cmp	r2, r3
 800698a:	d917      	bls.n	80069bc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800698c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ac:	1ad2      	subs	r2, r2, r3
 80069ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	619a      	str	r2, [r3, #24]
 80069ba:	e00e      	b.n	80069da <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80069bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80069cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d178      	bne.n	8006adc <USB_EPStartXfer+0x1a24>
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a0e:	4413      	add	r3, r2
 8006a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	011a      	lsls	r2, r3, #4
 8006a22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d116      	bne.n	8006a66 <USB_EPStartXfer+0x19ae>
 8006a38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e06b      	b.n	8006b3e <USB_EPStartXfer+0x1a86>
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6c:	d818      	bhi.n	8006aa0 <USB_EPStartXfer+0x19e8>
 8006a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <USB_EPStartXfer+0x19d6>
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e04e      	b.n	8006b3e <USB_EPStartXfer+0x1a86>
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <USB_EPStartXfer+0x1a08>
 8006ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aba:	3b01      	subs	r3, #1
 8006abc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e030      	b.n	8006b3e <USB_EPStartXfer+0x1a86>
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d128      	bne.n	8006b3e <USB_EPStartXfer+0x1a86>
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	4413      	add	r3, r2
 8006b12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	011a      	lsls	r2, r3, #4
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d178      	bne.n	8006c4e <USB_EPStartXfer+0x1b96>
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b80:	4413      	add	r3, r2
 8006b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	011a      	lsls	r2, r3, #4
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d116      	bne.n	8006bd8 <USB_EPStartXfer+0x1b20>
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e067      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bde:	d818      	bhi.n	8006c12 <USB_EPStartXfer+0x1b5a>
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <USB_EPStartXfer+0x1b48>
 8006bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	029b      	lsls	r3, r3, #10
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e04a      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 8006c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <USB_EPStartXfer+0x1b7a>
 8006c28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e02c      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	785b      	ldrb	r3, [r3, #1]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d124      	bne.n	8006ca8 <USB_EPStartXfer+0x1bf0>
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	4413      	add	r3, r2
 8006c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	011a      	lsls	r2, r3, #4
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e001      	b.n	8006ca8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e03a      	b.n	8006d1e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006cd2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006cd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006cde:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ce2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ce6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	441a      	add	r2, r3
 8006d04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d020      	beq.n	8006d7c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	81bb      	strh	r3, [r7, #12]
 8006d52:	89bb      	ldrh	r3, [r7, #12]
 8006d54:	f083 0310 	eor.w	r3, r3, #16
 8006d58:	81bb      	strh	r3, [r7, #12]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	89bb      	ldrh	r3, [r7, #12]
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e01f      	b.n	8006dbc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	81fb      	strh	r3, [r7, #14]
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d9a:	81fb      	strh	r3, [r7, #14]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	89fb      	ldrh	r3, [r7, #14]
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	7b1b      	ldrb	r3, [r3, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 809d 	bne.w	8006f16 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d04c      	beq.n	8006e7e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	823b      	strh	r3, [r7, #16]
 8006df2:	8a3b      	ldrh	r3, [r7, #16]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <USB_EPClearStall+0x6c>
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	81fb      	strh	r3, [r7, #14]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
 8006e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d06c      	beq.n	8006f16 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e52:	81bb      	strh	r3, [r7, #12]
 8006e54:	89bb      	ldrh	r3, [r7, #12]
 8006e56:	f083 0320 	eor.w	r3, r3, #32
 8006e5a:	81bb      	strh	r3, [r7, #12]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	89bb      	ldrh	r3, [r7, #12]
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
 8006e7c:	e04b      	b.n	8006f16 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	82fb      	strh	r3, [r7, #22]
 8006e8c:	8afb      	ldrh	r3, [r7, #22]
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <USB_EPClearStall+0x106>
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eac:	82bb      	strh	r3, [r7, #20]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8abb      	ldrh	r3, [r7, #20]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee4:	827b      	strh	r3, [r7, #18]
 8006ee6:	8a7b      	ldrh	r3, [r7, #18]
 8006ee8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eec:	827b      	strh	r3, [r7, #18]
 8006eee:	8a7b      	ldrh	r3, [r7, #18]
 8006ef0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ef4:	827b      	strh	r3, [r7, #18]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	441a      	add	r2, r3
 8006f00:	8a7b      	ldrh	r3, [r7, #18]
 8006f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2280      	movs	r2, #128	; 0x80
 8006f38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr

08006f8e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b08d      	sub	sp, #52	; 0x34
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	80fb      	strh	r3, [r7, #6]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fba:	88bb      	ldrh	r3, [r7, #4]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	005a      	lsls	r2, r3, #1
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fdc:	e01e      	b.n	800701c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	3302      	adds	r3, #2
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	3302      	adds	r3, #2
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	3301      	adds	r3, #1
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	3b01      	subs	r3, #1
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1dd      	bne.n	8006fde <USB_WritePMA+0x3a>
  }
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3734      	adds	r7, #52	; 0x34
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800702e:	b480      	push	{r7}
 8007030:	b08b      	sub	sp, #44	; 0x2c
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	4611      	mov	r1, r2
 800703a:	461a      	mov	r2, r3
 800703c:	460b      	mov	r3, r1
 800703e:	80fb      	strh	r3, [r7, #6]
 8007040:	4613      	mov	r3, r2
 8007042:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007044:	88bb      	ldrh	r3, [r7, #4]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	005a      	lsls	r2, r3, #1
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007060:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	e01b      	b.n	80070a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3302      	adds	r3, #2
 8007074:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3301      	adds	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b2da      	uxtb	r2, r3
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	3301      	adds	r3, #1
 8007092:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	3302      	adds	r3, #2
 8007098:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	3b01      	subs	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e0      	bne.n	8007068 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070a6:	88bb      	ldrh	r3, [r7, #4]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	701a      	strb	r2, [r3, #0]
  }
}
 80070c2:	bf00      	nop
 80070c4:	372c      	adds	r7, #44	; 0x2c
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7c1b      	ldrb	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d115      	bne.n	8007110 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e8:	2202      	movs	r2, #2
 80070ea:	2181      	movs	r1, #129	; 0x81
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f003 f832 	bl	800a156 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070fc:	2202      	movs	r2, #2
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f003 f828 	bl	800a156 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800710e:	e012      	b.n	8007136 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2202      	movs	r2, #2
 8007114:	2181      	movs	r1, #129	; 0x81
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f003 f81d 	bl	800a156 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	2202      	movs	r2, #2
 8007126:	2101      	movs	r1, #1
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f003 f814 	bl	800a156 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007136:	2308      	movs	r3, #8
 8007138:	2203      	movs	r2, #3
 800713a:	2182      	movs	r1, #130	; 0x82
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f003 f80a 	bl	800a156 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007148:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800714c:	f003 f92a 	bl	800a3a4 <USBD_static_malloc>
 8007150:	4602      	mov	r2, r0
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
 8007166:	e026      	b.n	80071b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	7c1b      	ldrb	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719c:	2101      	movs	r1, #1
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f003 f8ca 	bl	800a338 <USBD_LL_PrepareReceive>
 80071a4:	e007      	b.n	80071b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ac:	2340      	movs	r3, #64	; 0x40
 80071ae:	2101      	movs	r1, #1
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f003 f8c1 	bl	800a338 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80071d0:	2181      	movs	r1, #129	; 0x81
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f002 ffe5 	bl	800a1a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80071de:	2101      	movs	r1, #1
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f002 ffde 	bl	800a1a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80071ee:	2182      	movs	r1, #130	; 0x82
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 ffd6 	bl	800a1a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00e      	beq.n	8007224 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	4618      	mov	r0, r3
 8007218:	f003 f8d0 	bl	800a3bc <USBD_static_free>
    pdev->pClassData = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007254:	2b00      	cmp	r3, #0
 8007256:	d039      	beq.n	80072cc <USBD_CDC_Setup+0x9e>
 8007258:	2b20      	cmp	r3, #32
 800725a:	d17f      	bne.n	800735c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d029      	beq.n	80072b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	b25b      	sxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	da11      	bge.n	8007292 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800727a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	88d2      	ldrh	r2, [r2, #6]
 8007280:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007282:	6939      	ldr	r1, [r7, #16]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	88db      	ldrh	r3, [r3, #6]
 8007288:	461a      	mov	r2, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 f9d9 	bl	8008642 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007290:	e06b      	b.n	800736a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	785a      	ldrb	r2, [r3, #1]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	88db      	ldrh	r3, [r3, #6]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072a8:	6939      	ldr	r1, [r7, #16]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	88db      	ldrh	r3, [r3, #6]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f9f4 	bl	800869e <USBD_CtlPrepareRx>
      break;
 80072b6:	e058      	b.n	800736a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	7850      	ldrb	r0, [r2, #1]
 80072c4:	2200      	movs	r2, #0
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	4798      	blx	r3
      break;
 80072ca:	e04e      	b.n	800736a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b0b      	cmp	r3, #11
 80072d2:	d02e      	beq.n	8007332 <USBD_CDC_Setup+0x104>
 80072d4:	2b0b      	cmp	r3, #11
 80072d6:	dc38      	bgt.n	800734a <USBD_CDC_Setup+0x11c>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <USBD_CDC_Setup+0xb4>
 80072dc:	2b0a      	cmp	r3, #10
 80072de:	d014      	beq.n	800730a <USBD_CDC_Setup+0xdc>
 80072e0:	e033      	b.n	800734a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d107      	bne.n	80072fc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	2202      	movs	r2, #2
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f9a4 	bl	8008642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072fa:	e02e      	b.n	800735a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f935 	bl	800856e <USBD_CtlError>
            ret = USBD_FAIL;
 8007304:	2302      	movs	r3, #2
 8007306:	75fb      	strb	r3, [r7, #23]
          break;
 8007308:	e027      	b.n	800735a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	2b03      	cmp	r3, #3
 8007312:	d107      	bne.n	8007324 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007314:	f107 030f 	add.w	r3, r7, #15
 8007318:	2201      	movs	r2, #1
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f990 	bl	8008642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007322:	e01a      	b.n	800735a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 f921 	bl	800856e <USBD_CtlError>
            ret = USBD_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	75fb      	strb	r3, [r7, #23]
          break;
 8007330:	e013      	b.n	800735a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	2b03      	cmp	r3, #3
 800733a:	d00d      	beq.n	8007358 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f915 	bl	800856e <USBD_CtlError>
            ret = USBD_FAIL;
 8007344:	2302      	movs	r3, #2
 8007346:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007348:	e006      	b.n	8007358 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f90e 	bl	800856e <USBD_CtlError>
          ret = USBD_FAIL;
 8007352:	2302      	movs	r3, #2
 8007354:	75fb      	strb	r3, [r7, #23]
          break;
 8007356:	e000      	b.n	800735a <USBD_CDC_Setup+0x12c>
          break;
 8007358:	bf00      	nop
      }
      break;
 800735a:	e006      	b.n	800736a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f905 	bl	800856e <USBD_CtlError>
      ret = USBD_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	75fb      	strb	r3, [r7, #23]
      break;
 8007368:	bf00      	nop
  }

  return ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800738e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d03a      	beq.n	8007410 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	331c      	adds	r3, #28
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d029      	beq.n	8007404 <USBD_CDC_DataIn+0x90>
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	331c      	adds	r3, #28
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	78f9      	ldrb	r1, [r7, #3]
 80073c4:	68b8      	ldr	r0, [r7, #8]
 80073c6:	460b      	mov	r3, r1
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	4403      	add	r3, r0
 80073d0:	3338      	adds	r3, #56	; 0x38
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d110      	bne.n	8007404 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	331c      	adds	r3, #28
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073f6:	78f9      	ldrb	r1, [r7, #3]
 80073f8:	2300      	movs	r3, #0
 80073fa:	2200      	movs	r2, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 ff78 	bl	800a2f2 <USBD_LL_Transmit>
 8007402:	e003      	b.n	800740c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	e000      	b.n	8007412 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007410:	2302      	movs	r3, #2
  }
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f002 ffa3 	bl	800a37e <USBD_LL_GetRxDataSize>
 8007438:	4602      	mov	r2, r0
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800745e:	4611      	mov	r1, r2
 8007460:	4798      	blx	r3

    return USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <USBD_CDC_EP0_RxReady+0x46>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	d010      	beq.n	80074b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074aa:	b292      	uxth	r2, r2
 80074ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	22ff      	movs	r2, #255	; 0xff
 80074b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2243      	movs	r2, #67	; 0x43
 80074cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000094 	.word	0x20000094

080074e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2243      	movs	r2, #67	; 0x43
 80074ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000050 	.word	0x20000050

08007500 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2243      	movs	r2, #67	; 0x43
 800750c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	200000d8 	.word	0x200000d8

08007520 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	2000000c 	.word	0x2000000c

08007540 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr

0800759e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d017      	beq.n	800760e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7c1b      	ldrb	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075f0:	2101      	movs	r1, #1
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fea0 	bl	800a338 <USBD_LL_PrepareReceive>
 80075f8:	e007      	b.n	800760a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	2101      	movs	r1, #1
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f002 fe97 	bl	800a338 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800762c:	2302      	movs	r3, #2
 800762e:	e01a      	b.n	8007666 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	79fa      	ldrb	r2, [r7, #7]
 800765c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f002 fd04 	bl	800a06c <USBD_LL_Init>

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d006      	beq.n	8007690 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
 800768e:	e001      	b.n	8007694 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007690:	2302      	movs	r3, #2
 8007692:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 fd39 	bl	800a120 <USBD_LL_Start>

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076d8:	2302      	movs	r3, #2
 80076da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00c      	beq.n	8007700 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	4611      	mov	r1, r2
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fed7 	bl	80084f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2b02      	cmp	r3, #2
 800776a:	d016      	beq.n	800779a <USBD_LL_SetupStage+0x6a>
 800776c:	2b02      	cmp	r3, #2
 800776e:	d81c      	bhi.n	80077aa <USBD_LL_SetupStage+0x7a>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <USBD_LL_SetupStage+0x4a>
 8007774:	2b01      	cmp	r3, #1
 8007776:	d008      	beq.n	800778a <USBD_LL_SetupStage+0x5a>
 8007778:	e017      	b.n	80077aa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9ca 	bl	8007b1c <USBD_StdDevReq>
      break;
 8007788:	e01a      	b.n	80077c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa2c 	bl	8007bf0 <USBD_StdItfReq>
      break;
 8007798:	e012      	b.n	80077c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa6c 	bl	8007c80 <USBD_StdEPReq>
      break;
 80077a8:	e00a      	b.n	80077c0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 fd11 	bl	800a1e0 <USBD_LL_StallEP>
      break;
 80077be:	bf00      	nop
  }

  return USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	460b      	mov	r3, r1
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d14b      	bne.n	8007876 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d134      	bne.n	800785a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d919      	bls.n	8007830 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	1ad2      	subs	r2, r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007812:	429a      	cmp	r2, r3
 8007814:	d203      	bcs.n	800781e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800781a:	b29b      	uxth	r3, r3
 800781c:	e002      	b.n	8007824 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007822:	b29b      	uxth	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 ff56 	bl	80086da <USBD_CtlContinueRx>
 800782e:	e038      	b.n	80078a2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007842:	2b03      	cmp	r3, #3
 8007844:	d105      	bne.n	8007852 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 ff53 	bl	80086fe <USBD_CtlSendStatus>
 8007858:	e023      	b.n	80078a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007860:	2b05      	cmp	r3, #5
 8007862:	d11e      	bne.n	80078a2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800786c:	2100      	movs	r1, #0
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f002 fcb6 	bl	800a1e0 <USBD_LL_StallEP>
 8007874:	e015      	b.n	80078a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00d      	beq.n	800789e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007888:	2b03      	cmp	r3, #3
 800788a:	d108      	bne.n	800789e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	7afa      	ldrb	r2, [r7, #11]
 8007896:	4611      	mov	r1, r2
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	4798      	blx	r3
 800789c:	e001      	b.n	80078a2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800789e:	2302      	movs	r3, #2
 80078a0:	e000      	b.n	80078a4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	460b      	mov	r3, r1
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d17f      	bne.n	80079c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3314      	adds	r3, #20
 80078c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d15c      	bne.n	800798a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d915      	bls.n	8007908 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	1ad2      	subs	r2, r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fec0 	bl	800867a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078fa:	2300      	movs	r3, #0
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f002 fd19 	bl	800a338 <USBD_LL_PrepareReceive>
 8007906:	e04e      	b.n	80079a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	6912      	ldr	r2, [r2, #16]
 8007910:	fbb3 f1f2 	udiv	r1, r3, r2
 8007914:	fb01 f202 	mul.w	r2, r1, r2
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d11c      	bne.n	8007958 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007926:	429a      	cmp	r2, r3
 8007928:	d316      	bcc.n	8007958 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007934:	429a      	cmp	r2, r3
 8007936:	d20f      	bcs.n	8007958 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fe9c 	bl	800867a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f002 fcf1 	bl	800a338 <USBD_LL_PrepareReceive>
 8007956:	e026      	b.n	80079a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800796a:	2b03      	cmp	r3, #3
 800796c:	d105      	bne.n	800797a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f002 fc2f 	bl	800a1e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fece 	bl	8008724 <USBD_CtlReceiveStatus>
 8007988:	e00d      	b.n	80079a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007990:	2b04      	cmp	r3, #4
 8007992:	d004      	beq.n	800799e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f002 fc1d 	bl	800a1e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d11d      	bne.n	80079ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7ff fe81 	bl	80076b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079be:	e015      	b.n	80079ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d108      	bne.n	80079e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	7afa      	ldrb	r2, [r7, #11]
 80079e0:	4611      	mov	r1, r2
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	4798      	blx	r3
 80079e6:	e001      	b.n	80079ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079e8:	2302      	movs	r3, #2
 80079ea:	e000      	b.n	80079ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	2200      	movs	r2, #0
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f002 fba6 	bl	800a156 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2240      	movs	r2, #64	; 0x40
 8007a16:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a1a:	2340      	movs	r3, #64	; 0x40
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2180      	movs	r1, #128	; 0x80
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f002 fb98 	bl	800a156 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2240      	movs	r2, #64	; 0x40
 8007a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6852      	ldr	r2, [r2, #4]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	4611      	mov	r1, r2
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
  }

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2204      	movs	r2, #4
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d105      	bne.n	8007adc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d10b      	bne.n	8007b12 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d005      	beq.n	8007b42 <USBD_StdDevReq+0x26>
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d84f      	bhi.n	8007bda <USBD_StdDevReq+0xbe>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USBD_StdDevReq+0x36>
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d14b      	bne.n	8007bda <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
      break;
 8007b50:	e048      	b.n	8007be4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d839      	bhi.n	8007bce <USBD_StdDevReq+0xb2>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <USBD_StdDevReq+0x44>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bc5 	.word	0x08007bc5
 8007b68:	08007bcf 	.word	0x08007bcf
 8007b6c:	08007bbb 	.word	0x08007bbb
 8007b70:	08007bcf 	.word	0x08007bcf
 8007b74:	08007b93 	.word	0x08007b93
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007bcf 	.word	0x08007bcf
 8007b80:	08007ba7 	.word	0x08007ba7
 8007b84:	08007b9d 	.word	0x08007b9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9dc 	bl	8007f48 <USBD_GetDescriptor>
          break;
 8007b90:	e022      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb3f 	bl	8008218 <USBD_SetAddress>
          break;
 8007b9a:	e01d      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb7e 	bl	80082a0 <USBD_SetConfig>
          break;
 8007ba4:	e018      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc07 	bl	80083bc <USBD_GetConfig>
          break;
 8007bae:	e013      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc37 	bl	8008426 <USBD_GetStatus>
          break;
 8007bb8:	e00e      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fc65 	bl	800848c <USBD_SetFeature>
          break;
 8007bc2:	e009      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fc74 	bl	80084b4 <USBD_ClrFeature>
          break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fccc 	bl	800856e <USBD_CtlError>
          break;
 8007bd6:	bf00      	nop
      }
      break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fcc6 	bl	800856e <USBD_CtlError>
      break;
 8007be2:	bf00      	nop
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop

08007bf0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d005      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d82e      	bhi.n	8007c6c <USBD_StdItfReq+0x7c>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d12a      	bne.n	8007c6c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d81d      	bhi.n	8007c5e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	889b      	ldrh	r3, [r3, #4]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d813      	bhi.n	8007c54 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	88db      	ldrh	r3, [r3, #6]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d110      	bne.n	8007c68 <USBD_StdItfReq+0x78>
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10d      	bne.n	8007c68 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fd56 	bl	80086fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c52:	e009      	b.n	8007c68 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fc89 	bl	800856e <USBD_CtlError>
          break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc84 	bl	800856e <USBD_CtlError>
          break;
 8007c66:	e000      	b.n	8007c6a <USBD_StdItfReq+0x7a>
          break;
 8007c68:	bf00      	nop
      }
      break;
 8007c6a:	e004      	b.n	8007c76 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fc7d 	bl	800856e <USBD_CtlError>
      break;
 8007c74:	bf00      	nop
  }

  return USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	889b      	ldrh	r3, [r3, #4]
 8007c92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d007      	beq.n	8007cb0 <USBD_StdEPReq+0x30>
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	f200 8146 	bhi.w	8007f32 <USBD_StdEPReq+0x2b2>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <USBD_StdEPReq+0x40>
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	f040 8141 	bne.w	8007f32 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
      break;
 8007cbe:	e13d      	b.n	8007f3c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d10a      	bne.n	8007ce2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	e12d      	b.n	8007f3e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	785b      	ldrb	r3, [r3, #1]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d007      	beq.n	8007cfa <USBD_StdEPReq+0x7a>
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	f300 811b 	bgt.w	8007f26 <USBD_StdEPReq+0x2a6>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d072      	beq.n	8007dda <USBD_StdEPReq+0x15a>
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d03a      	beq.n	8007d6e <USBD_StdEPReq+0xee>
 8007cf8:	e115      	b.n	8007f26 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d002      	beq.n	8007d0a <USBD_StdEPReq+0x8a>
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d015      	beq.n	8007d34 <USBD_StdEPReq+0xb4>
 8007d08:	e02b      	b.n	8007d62 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00c      	beq.n	8007d2a <USBD_StdEPReq+0xaa>
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d009      	beq.n	8007d2a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f002 fa60 	bl	800a1e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f002 fa5c 	bl	800a1e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d28:	e020      	b.n	8007d6c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc1e 	bl	800856e <USBD_CtlError>
              break;
 8007d32:	e01b      	b.n	8007d6c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	885b      	ldrh	r3, [r3, #2]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10e      	bne.n	8007d5a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <USBD_StdEPReq+0xda>
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b80      	cmp	r3, #128	; 0x80
 8007d46:	d008      	beq.n	8007d5a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 fa43 	bl	800a1e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fccf 	bl	80086fe <USBD_CtlSendStatus>

              break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fc02 	bl	800856e <USBD_CtlError>
              break;
 8007d6a:	bf00      	nop
          }
          break;
 8007d6c:	e0e0      	b.n	8007f30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d002      	beq.n	8007d7e <USBD_StdEPReq+0xfe>
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d015      	beq.n	8007da8 <USBD_StdEPReq+0x128>
 8007d7c:	e026      	b.n	8007dcc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <USBD_StdEPReq+0x11e>
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d009      	beq.n	8007d9e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f002 fa26 	bl	800a1e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d94:	2180      	movs	r1, #128	; 0x80
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f002 fa22 	bl	800a1e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d9c:	e01c      	b.n	8007dd8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fbe4 	bl	800856e <USBD_CtlError>
              break;
 8007da6:	e017      	b.n	8007dd8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	885b      	ldrh	r3, [r3, #2]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d112      	bne.n	8007dd6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f002 fa2d 	bl	800a21e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc9a 	bl	80086fe <USBD_CtlSendStatus>
              }
              break;
 8007dca:	e004      	b.n	8007dd6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fbcd 	bl	800856e <USBD_CtlError>
              break;
 8007dd4:	e000      	b.n	8007dd8 <USBD_StdEPReq+0x158>
              break;
 8007dd6:	bf00      	nop
          }
          break;
 8007dd8:	e0aa      	b.n	8007f30 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d002      	beq.n	8007dea <USBD_StdEPReq+0x16a>
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d032      	beq.n	8007e4e <USBD_StdEPReq+0x1ce>
 8007de8:	e097      	b.n	8007f1a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <USBD_StdEPReq+0x180>
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d004      	beq.n	8007e00 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fbb8 	bl	800856e <USBD_CtlError>
                break;
 8007dfe:	e091      	b.n	8007f24 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da0b      	bge.n	8007e20 <USBD_StdEPReq+0x1a0>
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	3310      	adds	r3, #16
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	e00b      	b.n	8007e38 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	3304      	adds	r3, #4
 8007e38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2202      	movs	r2, #2
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fbfb 	bl	8008642 <USBD_CtlSendData>
              break;
 8007e4c:	e06a      	b.n	8007f24 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da11      	bge.n	8007e7a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	f003 020f 	and.w	r2, r3, #15
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	3318      	adds	r3, #24
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d117      	bne.n	8007ea0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fb7b 	bl	800856e <USBD_CtlError>
                  break;
 8007e78:	e054      	b.n	8007f24 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fb68 	bl	800856e <USBD_CtlError>
                  break;
 8007e9e:	e041      	b.n	8007f24 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da0b      	bge.n	8007ec0 <USBD_StdEPReq+0x240>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	3310      	adds	r3, #16
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	e00b      	b.n	8007ed8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <USBD_StdEPReq+0x266>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d103      	bne.n	8007eee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e00e      	b.n	8007f0c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f002 f9b2 	bl	800a25c <USBD_LL_IsStallEP>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e002      	b.n	8007f0c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb95 	bl	8008642 <USBD_CtlSendData>
              break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fb26 	bl	800856e <USBD_CtlError>
              break;
 8007f22:	bf00      	nop
          }
          break;
 8007f24:	e004      	b.n	8007f30 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb20 	bl	800856e <USBD_CtlError>
          break;
 8007f2e:	bf00      	nop
      }
      break;
 8007f30:	e004      	b.n	8007f3c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb1a 	bl	800856e <USBD_CtlError>
      break;
 8007f3a:	bf00      	nop
  }

  return ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b06      	cmp	r3, #6
 8007f6a:	f200 8128 	bhi.w	80081be <USBD_GetDescriptor+0x276>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_GetDescriptor+0x2c>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007fa9 	.word	0x08007fa9
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	080081bf 	.word	0x080081bf
 8007f84:	080081bf 	.word	0x080081bf
 8007f88:	0800815f 	.word	0x0800815f
 8007f8c:	0800818b 	.word	0x0800818b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	7c12      	ldrb	r2, [r2, #16]
 8007f9c:	f107 0108 	add.w	r1, r7, #8
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	60f8      	str	r0, [r7, #12]
      break;
 8007fa6:	e112      	b.n	80081ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7c1b      	ldrb	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10d      	bne.n	8007fcc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f107 0208 	add.w	r2, r7, #8
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4798      	blx	r3
 8007fc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fca:	e100      	b.n	80081ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	f107 0208 	add.w	r2, r7, #8
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
 8007fdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e0f2      	b.n	80081ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	f200 80ac 	bhi.w	800814c <USBD_GetDescriptor+0x204>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_GetDescriptor+0xb4>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008015 	.word	0x08008015
 8008000:	08008049 	.word	0x08008049
 8008004:	0800807d 	.word	0x0800807d
 8008008:	080080b1 	.word	0x080080b1
 800800c:	080080e5 	.word	0x080080e5
 8008010:	08008119 	.word	0x08008119
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	7c12      	ldrb	r2, [r2, #16]
 800802c:	f107 0108 	add.w	r1, r7, #8
 8008030:	4610      	mov	r0, r2
 8008032:	4798      	blx	r3
 8008034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008036:	e091      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa97 	bl	800856e <USBD_CtlError>
            err++;
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	3301      	adds	r3, #1
 8008044:	72fb      	strb	r3, [r7, #11]
          break;
 8008046:	e089      	b.n	800815c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	7c12      	ldrb	r2, [r2, #16]
 8008060:	f107 0108 	add.w	r1, r7, #8
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806a:	e077      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa7d 	bl	800856e <USBD_CtlError>
            err++;
 8008074:	7afb      	ldrb	r3, [r7, #11]
 8008076:	3301      	adds	r3, #1
 8008078:	72fb      	strb	r3, [r7, #11]
          break;
 800807a:	e06f      	b.n	800815c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809e:	e05d      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa63 	bl	800856e <USBD_CtlError>
            err++;
 80080a8:	7afb      	ldrb	r3, [r7, #11]
 80080aa:	3301      	adds	r3, #1
 80080ac:	72fb      	strb	r3, [r7, #11]
          break;
 80080ae:	e055      	b.n	800815c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d2:	e043      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa49 	bl	800856e <USBD_CtlError>
            err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
          break;
 80080e2:	e03b      	b.n	800815c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7c12      	ldrb	r2, [r2, #16]
 80080fc:	f107 0108 	add.w	r1, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008106:	e029      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa2f 	bl	800856e <USBD_CtlError>
            err++;
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	3301      	adds	r3, #1
 8008114:	72fb      	strb	r3, [r7, #11]
          break;
 8008116:	e021      	b.n	800815c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	7c12      	ldrb	r2, [r2, #16]
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
 8008138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813a:	e00f      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa15 	bl	800856e <USBD_CtlError>
            err++;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	3301      	adds	r3, #1
 8008148:	72fb      	strb	r3, [r7, #11]
          break;
 800814a:	e007      	b.n	800815c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa0d 	bl	800856e <USBD_CtlError>
          err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800815a:	e038      	b.n	80081ce <USBD_GetDescriptor+0x286>
 800815c:	e037      	b.n	80081ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7c1b      	ldrb	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	f107 0208 	add.w	r2, r7, #8
 8008172:	4610      	mov	r0, r2
 8008174:	4798      	blx	r3
 8008176:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008178:	e029      	b.n	80081ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f9f6 	bl	800856e <USBD_CtlError>
        err++;
 8008182:	7afb      	ldrb	r3, [r7, #11]
 8008184:	3301      	adds	r3, #1
 8008186:	72fb      	strb	r3, [r7, #11]
      break;
 8008188:	e021      	b.n	80081ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7c1b      	ldrb	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f107 0208 	add.w	r2, r7, #8
 800819e:	4610      	mov	r0, r2
 80081a0:	4798      	blx	r3
 80081a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	2207      	movs	r2, #7
 80081aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081ac:	e00f      	b.n	80081ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f9dc 	bl	800856e <USBD_CtlError>
        err++;
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	3301      	adds	r3, #1
 80081ba:	72fb      	strb	r3, [r7, #11]
      break;
 80081bc:	e007      	b.n	80081ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f9d4 	bl	800856e <USBD_CtlError>
      err++;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	3301      	adds	r3, #1
 80081ca:	72fb      	strb	r3, [r7, #11]
      break;
 80081cc:	bf00      	nop
  }

  if (err != 0U)
 80081ce:	7afb      	ldrb	r3, [r7, #11]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11c      	bne.n	800820e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80081d4:	893b      	ldrh	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d011      	beq.n	80081fe <USBD_GetDescriptor+0x2b6>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88db      	ldrh	r3, [r3, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	88da      	ldrh	r2, [r3, #6]
 80081e6:	893b      	ldrh	r3, [r7, #8]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bf28      	it	cs
 80081ec:	4613      	movcs	r3, r2
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081f2:	893b      	ldrh	r3, [r7, #8]
 80081f4:	461a      	mov	r2, r3
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fa22 	bl	8008642 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa79 	bl	80086fe <USBD_CtlSendStatus>
 800820c:	e000      	b.n	8008210 <USBD_GetDescriptor+0x2c8>
    return;
 800820e:	bf00      	nop
    }
  }
}
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop

08008218 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	889b      	ldrh	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d130      	bne.n	800828c <USBD_SetAddress+0x74>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	88db      	ldrh	r3, [r3, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d12c      	bne.n	800828c <USBD_SetAddress+0x74>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	2b7f      	cmp	r3, #127	; 0x7f
 8008238:	d828      	bhi.n	800828c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	2b03      	cmp	r3, #3
 800824e:	d104      	bne.n	800825a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f98b 	bl	800856e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008258:	e01d      	b.n	8008296 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 f824 	bl	800a2b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa46 	bl	80086fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008280:	e009      	b.n	8008296 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828a:	e004      	b.n	8008296 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f96d 	bl	800856e <USBD_CtlError>
  }
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	885b      	ldrh	r3, [r3, #2]
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	4b41      	ldr	r3, [pc, #260]	; (80083b8 <USBD_SetConfig+0x118>)
 80082b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082b4:	4b40      	ldr	r3, [pc, #256]	; (80083b8 <USBD_SetConfig+0x118>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d904      	bls.n	80082c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f955 	bl	800856e <USBD_CtlError>
 80082c4:	e075      	b.n	80083b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d002      	beq.n	80082d6 <USBD_SetConfig+0x36>
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d023      	beq.n	800831c <USBD_SetConfig+0x7c>
 80082d4:	e062      	b.n	800839c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80082d6:	4b38      	ldr	r3, [pc, #224]	; (80083b8 <USBD_SetConfig+0x118>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01a      	beq.n	8008314 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80082de:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <USBD_SetConfig+0x118>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2203      	movs	r2, #3
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082f0:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <USBD_SetConfig+0x118>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff f9e8 	bl	80076cc <USBD_SetClassConfig>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d104      	bne.n	800830c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f932 	bl	800856e <USBD_CtlError>
            return;
 800830a:	e052      	b.n	80083b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f9f6 	bl	80086fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008312:	e04e      	b.n	80083b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9f2 	bl	80086fe <USBD_CtlSendStatus>
        break;
 800831a:	e04a      	b.n	80083b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800831c:	4b26      	ldr	r3, [pc, #152]	; (80083b8 <USBD_SetConfig+0x118>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d112      	bne.n	800834a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800832c:	4b22      	ldr	r3, [pc, #136]	; (80083b8 <USBD_SetConfig+0x118>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008336:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <USBD_SetConfig+0x118>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff f9e4 	bl	800770a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9db 	bl	80086fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008348:	e033      	b.n	80083b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <USBD_SetConfig+0x118>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d01d      	beq.n	8008394 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff f9d2 	bl	800770a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <USBD_SetConfig+0x118>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008370:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <USBD_SetConfig+0x118>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff f9a8 	bl	80076cc <USBD_SetClassConfig>
 800837c:	4603      	mov	r3, r0
 800837e:	2b02      	cmp	r3, #2
 8008380:	d104      	bne.n	800838c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8f2 	bl	800856e <USBD_CtlError>
            return;
 800838a:	e012      	b.n	80083b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f9b6 	bl	80086fe <USBD_CtlSendStatus>
        break;
 8008392:	e00e      	b.n	80083b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9b2 	bl	80086fe <USBD_CtlSendStatus>
        break;
 800839a:	e00a      	b.n	80083b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8e5 	bl	800856e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80083a4:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <USBD_SetConfig+0x118>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff f9ad 	bl	800770a <USBD_ClrClassConfig>
        break;
 80083b0:	bf00      	nop
    }
  }
}
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000690 	.word	0x20000690

080083bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d004      	beq.n	80083d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f8cc 	bl	800856e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083d6:	e022      	b.n	800841e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083de:	2b02      	cmp	r3, #2
 80083e0:	dc02      	bgt.n	80083e8 <USBD_GetConfig+0x2c>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dc03      	bgt.n	80083ee <USBD_GetConfig+0x32>
 80083e6:	e015      	b.n	8008414 <USBD_GetConfig+0x58>
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d00b      	beq.n	8008404 <USBD_GetConfig+0x48>
 80083ec:	e012      	b.n	8008414 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3308      	adds	r3, #8
 80083f8:	2201      	movs	r2, #1
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f920 	bl	8008642 <USBD_CtlSendData>
        break;
 8008402:	e00c      	b.n	800841e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
 8008408:	2201      	movs	r2, #1
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f918 	bl	8008642 <USBD_CtlSendData>
        break;
 8008412:	e004      	b.n	800841e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f8a9 	bl	800856e <USBD_CtlError>
        break;
 800841c:	bf00      	nop
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008436:	3b01      	subs	r3, #1
 8008438:	2b02      	cmp	r3, #2
 800843a:	d81e      	bhi.n	800847a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	88db      	ldrh	r3, [r3, #6]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d004      	beq.n	800844e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f891 	bl	800856e <USBD_CtlError>
        break;
 800844c:	e01a      	b.n	8008484 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f043 0202 	orr.w	r2, r3, #2
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	330c      	adds	r3, #12
 800846e:	2202      	movs	r2, #2
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8e5 	bl	8008642 <USBD_CtlSendData>
      break;
 8008478:	e004      	b.n	8008484 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f876 	bl	800856e <USBD_CtlError>
      break;
 8008482:	bf00      	nop
  }
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	885b      	ldrh	r3, [r3, #2]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d106      	bne.n	80084ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f929 	bl	80086fe <USBD_CtlSendStatus>
  }
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c4:	3b01      	subs	r3, #1
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d80b      	bhi.n	80084e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	885b      	ldrh	r3, [r3, #2]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d10c      	bne.n	80084ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f90f 	bl	80086fe <USBD_CtlSendStatus>
      }
      break;
 80084e0:	e004      	b.n	80084ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f842 	bl	800856e <USBD_CtlError>
      break;
 80084ea:	e000      	b.n	80084ee <USBD_ClrFeature+0x3a>
      break;
 80084ec:	bf00      	nop
  }
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781a      	ldrb	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785a      	ldrb	r2, [r3, #1]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	3302      	adds	r3, #2
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	b29a      	uxth	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	3303      	adds	r3, #3
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	b29b      	uxth	r3, r3
 8008524:	4413      	add	r3, r2
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	3304      	adds	r3, #4
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	b29a      	uxth	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3305      	adds	r3, #5
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	b29b      	uxth	r3, r3
 8008540:	4413      	add	r3, r2
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	3306      	adds	r3, #6
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3307      	adds	r3, #7
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	b29b      	uxth	r3, r3
 800855c:	4413      	add	r3, r2
 800855e:	b29a      	uxth	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	80da      	strh	r2, [r3, #6]

}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008578:	2180      	movs	r1, #128	; 0x80
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 fe30 	bl	800a1e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fe2c 	bl	800a1e0 <USBD_LL_StallEP>
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d032      	beq.n	800860c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f834 	bl	8008614 <USBD_GetLen>
 80085ac:	4603      	mov	r3, r0
 80085ae:	3301      	adds	r3, #1
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	75fa      	strb	r2, [r7, #23]
 80085c0:	461a      	mov	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4413      	add	r3, r2
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	7812      	ldrb	r2, [r2, #0]
 80085ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	75fa      	strb	r2, [r7, #23]
 80085d2:	461a      	mov	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4413      	add	r3, r2
 80085d8:	2203      	movs	r2, #3
 80085da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085dc:	e012      	b.n	8008604 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	60fa      	str	r2, [r7, #12]
 80085e4:	7dfa      	ldrb	r2, [r7, #23]
 80085e6:	1c51      	adds	r1, r2, #1
 80085e8:	75f9      	strb	r1, [r7, #23]
 80085ea:	4611      	mov	r1, r2
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	440a      	add	r2, r1
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	75fa      	strb	r2, [r7, #23]
 80085fa:	461a      	mov	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4413      	add	r3, r2
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e8      	bne.n	80085de <USBD_GetString+0x4e>
    }
  }
}
 800860c:	bf00      	nop
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008620:	e005      	b.n	800862e <USBD_GetLen+0x1a>
  {
    len++;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	3301      	adds	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3301      	adds	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f5      	bne.n	8008622 <USBD_GetLen+0xe>
  }

  return len;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	4613      	mov	r3, r2
 800864e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2202      	movs	r2, #2
 8008654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	2100      	movs	r1, #0
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f001 fe41 	bl	800a2f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	4613      	mov	r3, r2
 8008686:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	2100      	movs	r1, #0
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fe2f 	bl	800a2f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	4613      	mov	r3, r2
 80086aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2203      	movs	r2, #3
 80086b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	2100      	movs	r1, #0
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f001 fe34 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f001 fe22 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2204      	movs	r2, #4
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fdec 	bl	800a2f2 <USBD_LL_Transmit>

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2205      	movs	r2, #5
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008734:	2300      	movs	r3, #0
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fdfc 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800875c:	2b84      	cmp	r3, #132	; 0x84
 800875e:	d005      	beq.n	800876c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008760:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	3303      	adds	r3, #3
 800876a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800877c:	f000 fae8 	bl	8008d50 <vTaskStartScheduler>
  
  return osOK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	bd80      	pop	{r7, pc}

08008786 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008788:	b089      	sub	sp, #36	; 0x24
 800878a:	af04      	add	r7, sp, #16
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d020      	beq.n	80087da <osThreadCreate+0x54>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01c      	beq.n	80087da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685c      	ldr	r4, [r3, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681d      	ldr	r5, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691e      	ldr	r6, [r3, #16]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff ffc9 	bl	800874a <makeFreeRtosPriority>
 80087b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087c2:	9202      	str	r2, [sp, #8]
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	9100      	str	r1, [sp, #0]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	4632      	mov	r2, r6
 80087cc:	4629      	mov	r1, r5
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f8e8 	bl	80089a4 <xTaskCreateStatic>
 80087d4:	4603      	mov	r3, r0
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	e01c      	b.n	8008814 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685c      	ldr	r4, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087e6:	b29e      	uxth	r6, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff ffab 	bl	800874a <makeFreeRtosPriority>
 80087f4:	4602      	mov	r2, r0
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	9200      	str	r2, [sp, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	4632      	mov	r2, r6
 8008802:	4629      	mov	r1, r5
 8008804:	4620      	mov	r0, r4
 8008806:	f000 f929 	bl	8008a5c <xTaskCreate>
 800880a:	4603      	mov	r3, r0
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	e000      	b.n	8008816 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008814:	68fb      	ldr	r3, [r7, #12]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800881e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <osDelay+0x16>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	e000      	b.n	8008836 <osDelay+0x18>
 8008834:	2301      	movs	r3, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fa56 	bl	8008ce8 <vTaskDelay>
  
  return osOK;
 800883c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f103 0208 	add.w	r2, r3, #8
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800885e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f103 0208 	add.w	r2, r3, #8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f103 0208 	add.w	r2, r3, #8
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f8:	d103      	bne.n	8008902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e00c      	b.n	800891c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3308      	adds	r3, #8
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e002      	b.n	8008910 <vListInsert+0x2e>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d2f6      	bcs.n	800890a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]
}
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	bc80      	pop	{r7}
 8008950:	4770      	bx	lr

08008952 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6892      	ldr	r2, [r2, #8]
 8008968:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6852      	ldr	r2, [r2, #4]
 8008972:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d103      	bne.n	8008986 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	1e5a      	subs	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08e      	sub	sp, #56	; 0x38
 80089a8:	af04      	add	r7, sp, #16
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xTaskCreateStatic+0x46>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	61fb      	str	r3, [r7, #28]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089ea:	23b4      	movs	r3, #180	; 0xb4
 80089ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2bb4      	cmp	r3, #180	; 0xb4
 80089f2:	d00a      	beq.n	8008a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	61bb      	str	r3, [r7, #24]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01e      	beq.n	8008a4e <xTaskCreateStatic+0xaa>
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01b      	beq.n	8008a4e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9303      	str	r3, [sp, #12]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	9302      	str	r3, [sp, #8]
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f851 	bl	8008ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a48:	f000 f8e4 	bl	8008c14 <prvAddNewTaskToReadyList>
 8008a4c:	e001      	b.n	8008a52 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a52:	697b      	ldr	r3, [r7, #20]
	}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3728      	adds	r7, #40	; 0x28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	; 0x30
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fe95 	bl	80097a0 <pvPortMalloc>
 8008a76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a7e:	20b4      	movs	r0, #180	; 0xb4
 8008a80:	f000 fe8e 	bl	80097a0 <pvPortMalloc>
 8008a84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
 8008a92:	e005      	b.n	8008aa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a94:	6978      	ldr	r0, [r7, #20]
 8008a96:	f000 ff47 	bl	8009928 <vPortFree>
 8008a9a:	e001      	b.n	8008aa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d017      	beq.n	8008ad6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008aae:	88fa      	ldrh	r2, [r7, #6]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9303      	str	r3, [sp, #12]
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	9302      	str	r3, [sp, #8]
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f80f 	bl	8008ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aca:	69f8      	ldr	r0, [r7, #28]
 8008acc:	f000 f8a2 	bl	8008c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	e002      	b.n	8008adc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ada:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008adc:	69bb      	ldr	r3, [r7, #24]
	}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b00:	3b01      	subs	r3, #1
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f023 0307 	bic.w	r3, r3, #7
 8008b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	617b      	str	r3, [r7, #20]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	e012      	b.n	8008b5c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	7819      	ldrb	r1, [r3, #0]
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	3334      	adds	r3, #52	; 0x34
 8008b46:	460a      	mov	r2, r1
 8008b48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d006      	beq.n	8008b64 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	2b0f      	cmp	r3, #15
 8008b60:	d9e9      	bls.n	8008b36 <prvInitialiseNewTask+0x4e>
 8008b62:	e000      	b.n	8008b66 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008b64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d901      	bls.n	8008b78 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b74:	2306      	movs	r3, #6
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	2200      	movs	r2, #0
 8008b88:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fe78 	bl	8008884 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	3318      	adds	r3, #24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fe73 	bl	8008884 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	f1c3 0207 	rsb	r2, r3, #7
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	334c      	adds	r3, #76	; 0x4c
 8008bc8:	2260      	movs	r2, #96	; 0x60
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 fc5b 	bl	800a488 <memset>
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	4a0c      	ldr	r2, [pc, #48]	; (8008c08 <prvInitialiseNewTask+0x120>)
 8008bd6:	651a      	str	r2, [r3, #80]	; 0x50
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <prvInitialiseNewTask+0x124>)
 8008bdc:	655a      	str	r2, [r3, #84]	; 0x54
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	4a0b      	ldr	r2, [pc, #44]	; (8008c10 <prvInitialiseNewTask+0x128>)
 8008be2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	69b8      	ldr	r0, [r7, #24]
 8008bea:	f000 fc29 	bl	8009440 <pxPortInitialiseStack>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c00:	bf00      	nop
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	0800a6ec 	.word	0x0800a6ec
 8008c0c:	0800a70c 	.word	0x0800a70c
 8008c10:	0800a6cc 	.word	0x0800a6cc

08008c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c1c:	f000 fcfe 	bl	800961c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c20:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <prvAddNewTaskToReadyList+0xb8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	4a29      	ldr	r2, [pc, #164]	; (8008ccc <prvAddNewTaskToReadyList+0xb8>)
 8008c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c2a:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <prvAddNewTaskToReadyList+0xbc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c32:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <prvAddNewTaskToReadyList+0xbc>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c38:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <prvAddNewTaskToReadyList+0xb8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d110      	bne.n	8008c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c40:	f000 fad2 	bl	80091e8 <prvInitialiseTaskLists>
 8008c44:	e00d      	b.n	8008c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c46:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <prvAddNewTaskToReadyList+0xc0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d109      	bne.n	8008c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <prvAddNewTaskToReadyList+0xbc>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d802      	bhi.n	8008c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c5c:	4a1c      	ldr	r2, [pc, #112]	; (8008cd0 <prvAddNewTaskToReadyList+0xbc>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c62:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <prvAddNewTaskToReadyList+0xc4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3301      	adds	r3, #1
 8008c68:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <prvAddNewTaskToReadyList+0xc4>)
 8008c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	2201      	movs	r2, #1
 8008c72:	409a      	lsls	r2, r3
 8008c74:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <prvAddNewTaskToReadyList+0xc8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <prvAddNewTaskToReadyList+0xc8>)
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <prvAddNewTaskToReadyList+0xcc>)
 8008c8c:	441a      	add	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f7ff fe01 	bl	800889c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c9a:	f000 fcef 	bl	800967c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <prvAddNewTaskToReadyList+0xc0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00e      	beq.n	8008cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <prvAddNewTaskToReadyList+0xbc>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d207      	bcs.n	8008cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <prvAddNewTaskToReadyList+0xd0>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000794 	.word	0x20000794
 8008cd0:	20000694 	.word	0x20000694
 8008cd4:	200007a0 	.word	0x200007a0
 8008cd8:	200007b0 	.word	0x200007b0
 8008cdc:	2000079c 	.word	0x2000079c
 8008ce0:	20000698 	.word	0x20000698
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d017      	beq.n	8008d2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cfa:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <vTaskDelay+0x60>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <vTaskDelay+0x30>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	60bb      	str	r3, [r7, #8]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d18:	f000 f884 	bl	8008e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fb28 	bl	8009374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d24:	f000 f88c 	bl	8008e40 <xTaskResumeAll>
 8008d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d107      	bne.n	8008d40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <vTaskDelay+0x64>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	200007bc 	.word	0x200007bc
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d5e:	463a      	mov	r2, r7
 8008d60:	1d39      	adds	r1, r7, #4
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f7 f9f2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	9202      	str	r2, [sp, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	460a      	mov	r2, r1
 8008d7e:	4921      	ldr	r1, [pc, #132]	; (8008e04 <vTaskStartScheduler+0xb4>)
 8008d80:	4821      	ldr	r0, [pc, #132]	; (8008e08 <vTaskStartScheduler+0xb8>)
 8008d82:	f7ff fe0f 	bl	80089a4 <xTaskCreateStatic>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4a20      	ldr	r2, [pc, #128]	; (8008e0c <vTaskStartScheduler+0xbc>)
 8008d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d8c:	4b1f      	ldr	r3, [pc, #124]	; (8008e0c <vTaskStartScheduler+0xbc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	e001      	b.n	8008d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d11b      	bne.n	8008ddc <vTaskStartScheduler+0x8c>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	613b      	str	r3, [r7, #16]
}
 8008db6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <vTaskStartScheduler+0xc0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	334c      	adds	r3, #76	; 0x4c
 8008dbe:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <vTaskStartScheduler+0xc4>)
 8008dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <vTaskStartScheduler+0xc8>)
 8008dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dca:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <vTaskStartScheduler+0xcc>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008dd0:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <vTaskStartScheduler+0xd0>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dd6:	f000 fbaf 	bl	8009538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dda:	e00e      	b.n	8008dfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de2:	d10a      	bne.n	8008dfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	60fb      	str	r3, [r7, #12]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <vTaskStartScheduler+0xa8>
}
 8008dfa:	bf00      	nop
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	0800a664 	.word	0x0800a664
 8008e08:	080091b9 	.word	0x080091b9
 8008e0c:	200007b8 	.word	0x200007b8
 8008e10:	20000694 	.word	0x20000694
 8008e14:	20000180 	.word	0x20000180
 8008e18:	200007b4 	.word	0x200007b4
 8008e1c:	200007a0 	.word	0x200007a0
 8008e20:	20000798 	.word	0x20000798

08008e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <vTaskSuspendAll+0x18>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a03      	ldr	r2, [pc, #12]	; (8008e3c <vTaskSuspendAll+0x18>)
 8008e30:	6013      	str	r3, [r2, #0]
}
 8008e32:	bf00      	nop
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	200007bc 	.word	0x200007bc

08008e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e4e:	4b41      	ldr	r3, [pc, #260]	; (8008f54 <xTaskResumeAll+0x114>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	603b      	str	r3, [r7, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e6c:	f000 fbd6 	bl	800961c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e70:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <xTaskResumeAll+0x114>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	4a37      	ldr	r2, [pc, #220]	; (8008f54 <xTaskResumeAll+0x114>)
 8008e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e7a:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <xTaskResumeAll+0x114>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d161      	bne.n	8008f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e82:	4b35      	ldr	r3, [pc, #212]	; (8008f58 <xTaskResumeAll+0x118>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d05d      	beq.n	8008f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e8a:	e02e      	b.n	8008eea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008e8c:	4b33      	ldr	r3, [pc, #204]	; (8008f5c <xTaskResumeAll+0x11c>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3318      	adds	r3, #24
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fd5a 	bl	8008952 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fd55 	bl	8008952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	2201      	movs	r2, #1
 8008eae:	409a      	lsls	r2, r3
 8008eb0:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <xTaskResumeAll+0x120>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <xTaskResumeAll+0x120>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a27      	ldr	r2, [pc, #156]	; (8008f64 <xTaskResumeAll+0x124>)
 8008ec8:	441a      	add	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f7ff fce3 	bl	800889c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <xTaskResumeAll+0x128>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008ee4:	4b21      	ldr	r3, [pc, #132]	; (8008f6c <xTaskResumeAll+0x12c>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eea:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <xTaskResumeAll+0x11c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1cc      	bne.n	8008e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ef8:	f000 fa18 	bl	800932c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008efc:	4b1c      	ldr	r3, [pc, #112]	; (8008f70 <xTaskResumeAll+0x130>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f08:	f000 f836 	bl	8008f78 <xTaskIncrementTick>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <xTaskResumeAll+0x12c>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f1      	bne.n	8008f08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008f24:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <xTaskResumeAll+0x130>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f2a:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <xTaskResumeAll+0x12c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f32:	2301      	movs	r3, #1
 8008f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <xTaskResumeAll+0x134>)
 8008f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f46:	f000 fb99 	bl	800967c <vPortExitCritical>

	return xAlreadyYielded;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	200007bc 	.word	0x200007bc
 8008f58:	20000794 	.word	0x20000794
 8008f5c:	20000754 	.word	0x20000754
 8008f60:	2000079c 	.word	0x2000079c
 8008f64:	20000698 	.word	0x20000698
 8008f68:	20000694 	.word	0x20000694
 8008f6c:	200007a8 	.word	0x200007a8
 8008f70:	200007a4 	.word	0x200007a4
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f82:	4b51      	ldr	r3, [pc, #324]	; (80090c8 <xTaskIncrementTick+0x150>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f040 808d 	bne.w	80090a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f8c:	4b4f      	ldr	r3, [pc, #316]	; (80090cc <xTaskIncrementTick+0x154>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f94:	4a4d      	ldr	r2, [pc, #308]	; (80090cc <xTaskIncrementTick+0x154>)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d120      	bne.n	8008fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fa0:	4b4b      	ldr	r3, [pc, #300]	; (80090d0 <xTaskIncrementTick+0x158>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	603b      	str	r3, [r7, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <xTaskIncrementTick+0x46>
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <xTaskIncrementTick+0x158>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	4b43      	ldr	r3, [pc, #268]	; (80090d4 <xTaskIncrementTick+0x15c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a41      	ldr	r2, [pc, #260]	; (80090d0 <xTaskIncrementTick+0x158>)
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	4a41      	ldr	r2, [pc, #260]	; (80090d4 <xTaskIncrementTick+0x15c>)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <xTaskIncrementTick+0x160>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	4a3f      	ldr	r2, [pc, #252]	; (80090d8 <xTaskIncrementTick+0x160>)
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	f000 f9a5 	bl	800932c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fe2:	4b3e      	ldr	r3, [pc, #248]	; (80090dc <xTaskIncrementTick+0x164>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d34d      	bcc.n	8009088 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fec:	4b38      	ldr	r3, [pc, #224]	; (80090d0 <xTaskIncrementTick+0x158>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <xTaskIncrementTick+0x82>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xTaskIncrementTick+0x84>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009000:	4b36      	ldr	r3, [pc, #216]	; (80090dc <xTaskIncrementTick+0x164>)
 8009002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009006:	601a      	str	r2, [r3, #0]
					break;
 8009008:	e03e      	b.n	8009088 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800900a:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <xTaskIncrementTick+0x158>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	429a      	cmp	r2, r3
 8009020:	d203      	bcs.n	800902a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009022:	4a2e      	ldr	r2, [pc, #184]	; (80090dc <xTaskIncrementTick+0x164>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6013      	str	r3, [r2, #0]
						break;
 8009028:	e02e      	b.n	8009088 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	3304      	adds	r3, #4
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fc8f 	bl	8008952 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d004      	beq.n	8009046 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3318      	adds	r3, #24
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff fc86 	bl	8008952 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	2201      	movs	r2, #1
 800904c:	409a      	lsls	r2, r3
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <xTaskIncrementTick+0x168>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4313      	orrs	r3, r2
 8009054:	4a22      	ldr	r2, [pc, #136]	; (80090e0 <xTaskIncrementTick+0x168>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4a1f      	ldr	r2, [pc, #124]	; (80090e4 <xTaskIncrementTick+0x16c>)
 8009066:	441a      	add	r2, r3
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7ff fc14 	bl	800889c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	4b1b      	ldr	r3, [pc, #108]	; (80090e8 <xTaskIncrementTick+0x170>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	429a      	cmp	r2, r3
 8009080:	d3b4      	bcc.n	8008fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009082:	2301      	movs	r3, #1
 8009084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009086:	e7b1      	b.n	8008fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009088:	4b17      	ldr	r3, [pc, #92]	; (80090e8 <xTaskIncrementTick+0x170>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908e:	4915      	ldr	r1, [pc, #84]	; (80090e4 <xTaskIncrementTick+0x16c>)
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d907      	bls.n	80090b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e004      	b.n	80090b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090a6:	4b11      	ldr	r3, [pc, #68]	; (80090ec <xTaskIncrementTick+0x174>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3301      	adds	r3, #1
 80090ac:	4a0f      	ldr	r2, [pc, #60]	; (80090ec <xTaskIncrementTick+0x174>)
 80090ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <xTaskIncrementTick+0x178>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80090bc:	697b      	ldr	r3, [r7, #20]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	200007bc 	.word	0x200007bc
 80090cc:	20000798 	.word	0x20000798
 80090d0:	2000074c 	.word	0x2000074c
 80090d4:	20000750 	.word	0x20000750
 80090d8:	200007ac 	.word	0x200007ac
 80090dc:	200007b4 	.word	0x200007b4
 80090e0:	2000079c 	.word	0x2000079c
 80090e4:	20000698 	.word	0x20000698
 80090e8:	20000694 	.word	0x20000694
 80090ec:	200007a4 	.word	0x200007a4
 80090f0:	200007a8 	.word	0x200007a8

080090f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090fa:	4b29      	ldr	r3, [pc, #164]	; (80091a0 <vTaskSwitchContext+0xac>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009102:	4b28      	ldr	r3, [pc, #160]	; (80091a4 <vTaskSwitchContext+0xb0>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009108:	e044      	b.n	8009194 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800910a:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <vTaskSwitchContext+0xb0>)
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009110:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <vTaskSwitchContext+0xb4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	fab3 f383 	clz	r3, r3
 800911c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	f1c3 031f 	rsb	r3, r3, #31
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	4921      	ldr	r1, [pc, #132]	; (80091ac <vTaskSwitchContext+0xb8>)
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <vTaskSwitchContext+0x5c>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	607b      	str	r3, [r7, #4]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <vTaskSwitchContext+0x5a>
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4a14      	ldr	r2, [pc, #80]	; (80091ac <vTaskSwitchContext+0xb8>)
 800915c:	4413      	add	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	605a      	str	r2, [r3, #4]
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	3308      	adds	r3, #8
 8009172:	429a      	cmp	r2, r3
 8009174:	d104      	bne.n	8009180 <vTaskSwitchContext+0x8c>
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	605a      	str	r2, [r3, #4]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	4a0a      	ldr	r2, [pc, #40]	; (80091b0 <vTaskSwitchContext+0xbc>)
 8009188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <vTaskSwitchContext+0xbc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	334c      	adds	r3, #76	; 0x4c
 8009190:	4a08      	ldr	r2, [pc, #32]	; (80091b4 <vTaskSwitchContext+0xc0>)
 8009192:	6013      	str	r3, [r2, #0]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	200007bc 	.word	0x200007bc
 80091a4:	200007a8 	.word	0x200007a8
 80091a8:	2000079c 	.word	0x2000079c
 80091ac:	20000698 	.word	0x20000698
 80091b0:	20000694 	.word	0x20000694
 80091b4:	20000180 	.word	0x20000180

080091b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091c0:	f000 f852 	bl	8009268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091c4:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <prvIdleTask+0x28>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d9f9      	bls.n	80091c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <prvIdleTask+0x2c>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091dc:	e7f0      	b.n	80091c0 <prvIdleTask+0x8>
 80091de:	bf00      	nop
 80091e0:	20000698 	.word	0x20000698
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091ee:	2300      	movs	r3, #0
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	e00c      	b.n	800920e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4a12      	ldr	r2, [pc, #72]	; (8009248 <prvInitialiseTaskLists+0x60>)
 8009200:	4413      	add	r3, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fb1f 	bl	8008846 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3301      	adds	r3, #1
 800920c:	607b      	str	r3, [r7, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b06      	cmp	r3, #6
 8009212:	d9ef      	bls.n	80091f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009214:	480d      	ldr	r0, [pc, #52]	; (800924c <prvInitialiseTaskLists+0x64>)
 8009216:	f7ff fb16 	bl	8008846 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800921a:	480d      	ldr	r0, [pc, #52]	; (8009250 <prvInitialiseTaskLists+0x68>)
 800921c:	f7ff fb13 	bl	8008846 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009220:	480c      	ldr	r0, [pc, #48]	; (8009254 <prvInitialiseTaskLists+0x6c>)
 8009222:	f7ff fb10 	bl	8008846 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009226:	480c      	ldr	r0, [pc, #48]	; (8009258 <prvInitialiseTaskLists+0x70>)
 8009228:	f7ff fb0d 	bl	8008846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800922c:	480b      	ldr	r0, [pc, #44]	; (800925c <prvInitialiseTaskLists+0x74>)
 800922e:	f7ff fb0a 	bl	8008846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <prvInitialiseTaskLists+0x78>)
 8009234:	4a05      	ldr	r2, [pc, #20]	; (800924c <prvInitialiseTaskLists+0x64>)
 8009236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009238:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <prvInitialiseTaskLists+0x7c>)
 800923a:	4a05      	ldr	r2, [pc, #20]	; (8009250 <prvInitialiseTaskLists+0x68>)
 800923c:	601a      	str	r2, [r3, #0]
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000698 	.word	0x20000698
 800924c:	20000724 	.word	0x20000724
 8009250:	20000738 	.word	0x20000738
 8009254:	20000754 	.word	0x20000754
 8009258:	20000768 	.word	0x20000768
 800925c:	20000780 	.word	0x20000780
 8009260:	2000074c 	.word	0x2000074c
 8009264:	20000750 	.word	0x20000750

08009268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800926e:	e019      	b.n	80092a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009270:	f000 f9d4 	bl	800961c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009274:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <prvCheckTasksWaitingTermination+0x50>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fb66 	bl	8008952 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009286:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <prvCheckTasksWaitingTermination+0x54>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3b01      	subs	r3, #1
 800928c:	4a0b      	ldr	r2, [pc, #44]	; (80092bc <prvCheckTasksWaitingTermination+0x54>)
 800928e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009290:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <prvCheckTasksWaitingTermination+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3b01      	subs	r3, #1
 8009296:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <prvCheckTasksWaitingTermination+0x58>)
 8009298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800929a:	f000 f9ef 	bl	800967c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f810 	bl	80092c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092a4:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <prvCheckTasksWaitingTermination+0x58>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e1      	bne.n	8009270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20000768 	.word	0x20000768
 80092bc:	20000794 	.word	0x20000794
 80092c0:	2000077c 	.word	0x2000077c

080092c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	334c      	adds	r3, #76	; 0x4c
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f8ef 	bl	800a4b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fb1f 	bl	8009928 <vPortFree>
				vPortFree( pxTCB );
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fb1c 	bl	8009928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092f0:	e018      	b.n	8009324 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d103      	bne.n	8009304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fb13 	bl	8009928 <vPortFree>
	}
 8009302:	e00f      	b.n	8009324 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800930a:	2b02      	cmp	r3, #2
 800930c:	d00a      	beq.n	8009324 <prvDeleteTCB+0x60>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	60fb      	str	r3, [r7, #12]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <prvDeleteTCB+0x5e>
	}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009332:	4b0e      	ldr	r3, [pc, #56]	; (800936c <prvResetNextTaskUnblockTime+0x40>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <prvResetNextTaskUnblockTime+0x14>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <prvResetNextTaskUnblockTime+0x16>
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <prvResetNextTaskUnblockTime+0x44>)
 8009348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800934c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800934e:	e008      	b.n	8009362 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <prvResetNextTaskUnblockTime+0x40>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <prvResetNextTaskUnblockTime+0x44>)
 8009360:	6013      	str	r3, [r2, #0]
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	2000074c 	.word	0x2000074c
 8009370:	200007b4 	.word	0x200007b4

08009374 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800937e:	4b29      	ldr	r3, [pc, #164]	; (8009424 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009384:	4b28      	ldr	r3, [pc, #160]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3304      	adds	r3, #4
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff fae1 	bl	8008952 <uxListRemove>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	2201      	movs	r2, #1
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	43da      	mvns	r2, r3
 80093a4:	4b21      	ldr	r3, [pc, #132]	; (800942c <prvAddCurrentTaskToDelayedList+0xb8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4013      	ands	r3, r2
 80093aa:	4a20      	ldr	r2, [pc, #128]	; (800942c <prvAddCurrentTaskToDelayedList+0xb8>)
 80093ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b4:	d10a      	bne.n	80093cc <prvAddCurrentTaskToDelayedList+0x58>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d007      	beq.n	80093cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093bc:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	481a      	ldr	r0, [pc, #104]	; (8009430 <prvAddCurrentTaskToDelayedList+0xbc>)
 80093c6:	f7ff fa69 	bl	800889c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093ca:	e026      	b.n	800941a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093d4:	4b14      	ldr	r3, [pc, #80]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d209      	bcs.n	80093f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093e4:	4b13      	ldr	r3, [pc, #76]	; (8009434 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7ff fa76 	bl	80088e2 <vListInsert>
}
 80093f6:	e010      	b.n	800941a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <prvAddCurrentTaskToDelayedList+0xc4>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7ff fa6c 	bl	80088e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <prvAddCurrentTaskToDelayedList+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	429a      	cmp	r2, r3
 8009412:	d202      	bcs.n	800941a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009414:	4a09      	ldr	r2, [pc, #36]	; (800943c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6013      	str	r3, [r2, #0]
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000798 	.word	0x20000798
 8009428:	20000694 	.word	0x20000694
 800942c:	2000079c 	.word	0x2000079c
 8009430:	20000780 	.word	0x20000780
 8009434:	20000750 	.word	0x20000750
 8009438:	2000074c 	.word	0x2000074c
 800943c:	200007b4 	.word	0x200007b4

08009440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3b04      	subs	r3, #4
 8009450:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3b04      	subs	r3, #4
 800945e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3b04      	subs	r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009470:	4a08      	ldr	r2, [pc, #32]	; (8009494 <pxPortInitialiseStack+0x54>)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3b14      	subs	r3, #20
 800947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3b20      	subs	r3, #32
 8009486:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009488:	68fb      	ldr	r3, [r7, #12]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bc80      	pop	{r7}
 8009492:	4770      	bx	lr
 8009494:	08009499 	.word	0x08009499

08009498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800949e:	2300      	movs	r3, #0
 80094a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094a2:	4b12      	ldr	r3, [pc, #72]	; (80094ec <prvTaskExitError+0x54>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094aa:	d00a      	beq.n	80094c2 <prvTaskExitError+0x2a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	60fb      	str	r3, [r7, #12]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <prvTaskExitError+0x28>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60bb      	str	r3, [r7, #8]
}
 80094d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094d6:	bf00      	nop
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0fc      	beq.n	80094d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	2000011c 	.word	0x2000011c

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	f04e 0e0d 	orr.w	lr, lr, #13
 800950e:	4770      	bx	lr

08009510 <pxCurrentTCBConst2>:
 8009510:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009518:	4806      	ldr	r0, [pc, #24]	; (8009534 <prvPortStartFirstTask+0x1c>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	b662      	cpsie	i
 8009524:	b661      	cpsie	f
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	df00      	svc	0
 8009530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009532:	bf00      	nop
 8009534:	e000ed08 	.word	0xe000ed08

08009538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800953e:	4b32      	ldr	r3, [pc, #200]	; (8009608 <xPortStartScheduler+0xd0>)
 8009540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009560:	b2da      	uxtb	r2, r3
 8009562:	4b2a      	ldr	r3, [pc, #168]	; (800960c <xPortStartScheduler+0xd4>)
 8009564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009566:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <xPortStartScheduler+0xd8>)
 8009568:	2207      	movs	r2, #7
 800956a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800956c:	e009      	b.n	8009582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800956e:	4b28      	ldr	r3, [pc, #160]	; (8009610 <xPortStartScheduler+0xd8>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3b01      	subs	r3, #1
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <xPortStartScheduler+0xd8>)
 8009576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958a:	2b80      	cmp	r3, #128	; 0x80
 800958c:	d0ef      	beq.n	800956e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800958e:	4b20      	ldr	r3, [pc, #128]	; (8009610 <xPortStartScheduler+0xd8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f1c3 0307 	rsb	r3, r3, #7
 8009596:	2b04      	cmp	r3, #4
 8009598:	d00a      	beq.n	80095b0 <xPortStartScheduler+0x78>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095b0:	4b17      	ldr	r3, [pc, #92]	; (8009610 <xPortStartScheduler+0xd8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	4a16      	ldr	r2, [pc, #88]	; (8009610 <xPortStartScheduler+0xd8>)
 80095b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095ba:	4b15      	ldr	r3, [pc, #84]	; (8009610 <xPortStartScheduler+0xd8>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c2:	4a13      	ldr	r2, [pc, #76]	; (8009610 <xPortStartScheduler+0xd8>)
 80095c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ce:	4b11      	ldr	r3, [pc, #68]	; (8009614 <xPortStartScheduler+0xdc>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a10      	ldr	r2, [pc, #64]	; (8009614 <xPortStartScheduler+0xdc>)
 80095d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <xPortStartScheduler+0xdc>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a0d      	ldr	r2, [pc, #52]	; (8009614 <xPortStartScheduler+0xdc>)
 80095e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095e6:	f000 f8b9 	bl	800975c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <xPortStartScheduler+0xe0>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095f0:	f7ff ff92 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095f4:	f7ff fd7e 	bl	80090f4 <vTaskSwitchContext>
	prvTaskExitError();
 80095f8:	f7ff ff4e 	bl	8009498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	e000e400 	.word	0xe000e400
 800960c:	200007c0 	.word	0x200007c0
 8009610:	200007c4 	.word	0x200007c4
 8009614:	e000ed20 	.word	0xe000ed20
 8009618:	2000011c 	.word	0x2000011c

0800961c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	607b      	str	r3, [r7, #4]
}
 8009634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <vPortEnterCritical+0x58>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	4a0d      	ldr	r2, [pc, #52]	; (8009674 <vPortEnterCritical+0x58>)
 800963e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <vPortEnterCritical+0x58>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10f      	bne.n	8009668 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <vPortEnterCritical+0x5c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <vPortEnterCritical+0x4c>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	603b      	str	r3, [r7, #0]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <vPortEnterCritical+0x4a>
	}
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	2000011c 	.word	0x2000011c
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <vPortExitCritical+0x4c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <vPortExitCritical+0x24>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	607b      	str	r3, [r7, #4]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096a0:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <vPortExitCritical+0x4c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <vPortExitCritical+0x4c>)
 80096a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <vPortExitCritical+0x4c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <vPortExitCritical+0x42>
 80096b2:	2300      	movs	r3, #0
 80096b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr
 80096c8:	2000011c 	.word	0x2000011c
 80096cc:	00000000 	.word	0x00000000

080096d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096d0:	f3ef 8009 	mrs	r0, PSP
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <pxCurrentTCBConst>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80096e0:	6010      	str	r0, [r2, #0]
 80096e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80096e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096ea:	f380 8811 	msr	BASEPRI, r0
 80096ee:	f7ff fd01 	bl	80090f4 <vTaskSwitchContext>
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009706:	f380 8809 	msr	PSP, r0
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	4770      	bx	lr

08009710 <pxCurrentTCBConst>:
 8009710:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009732:	f7ff fc21 	bl	8008f78 <xTaskIncrementTick>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <SysTick_Handler+0x40>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f383 8811 	msr	BASEPRI, r3
}
 800974e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <vPortSetupTimerInterrupt+0x30>)
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800976c:	4b09      	ldr	r3, [pc, #36]	; (8009794 <vPortSetupTimerInterrupt+0x38>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a09      	ldr	r2, [pc, #36]	; (8009798 <vPortSetupTimerInterrupt+0x3c>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	099b      	lsrs	r3, r3, #6
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <vPortSetupTimerInterrupt+0x40>)
 800977a:	3b01      	subs	r3, #1
 800977c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <vPortSetupTimerInterrupt+0x30>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr
 800978c:	e000e010 	.word	0xe000e010
 8009790:	e000e018 	.word	0xe000e018
 8009794:	20000000 	.word	0x20000000
 8009798:	10624dd3 	.word	0x10624dd3
 800979c:	e000e014 	.word	0xe000e014

080097a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	; 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097ac:	f7ff fb3a 	bl	8008e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097b0:	4b58      	ldr	r3, [pc, #352]	; (8009914 <pvPortMalloc+0x174>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b8:	f000 f910 	bl	80099dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097bc:	4b56      	ldr	r3, [pc, #344]	; (8009918 <pvPortMalloc+0x178>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4013      	ands	r3, r2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 808e 	bne.w	80098e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01d      	beq.n	800980c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097d0:	2208      	movs	r2, #8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d014      	beq.n	800980c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	3308      	adds	r3, #8
 80097ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <pvPortMalloc+0x6c>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	617b      	str	r3, [r7, #20]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d069      	beq.n	80098e6 <pvPortMalloc+0x146>
 8009812:	4b42      	ldr	r3, [pc, #264]	; (800991c <pvPortMalloc+0x17c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d864      	bhi.n	80098e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800981c:	4b40      	ldr	r3, [pc, #256]	; (8009920 <pvPortMalloc+0x180>)
 800981e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009820:	4b3f      	ldr	r3, [pc, #252]	; (8009920 <pvPortMalloc+0x180>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009826:	e004      	b.n	8009832 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	429a      	cmp	r2, r3
 800983a:	d903      	bls.n	8009844 <pvPortMalloc+0xa4>
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1f1      	bne.n	8009828 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009844:	4b33      	ldr	r3, [pc, #204]	; (8009914 <pvPortMalloc+0x174>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984a:	429a      	cmp	r2, r3
 800984c:	d04b      	beq.n	80098e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2208      	movs	r2, #8
 8009854:	4413      	add	r3, r2
 8009856:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	2308      	movs	r3, #8
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	429a      	cmp	r2, r3
 800986e:	d91f      	bls.n	80098b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4413      	add	r3, r2
 8009876:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <pvPortMalloc+0xf8>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	613b      	str	r3, [r7, #16]
}
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098aa:	69b8      	ldr	r0, [r7, #24]
 80098ac:	f000 f8f8 	bl	8009aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098b0:	4b1a      	ldr	r3, [pc, #104]	; (800991c <pvPortMalloc+0x17c>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	4a18      	ldr	r2, [pc, #96]	; (800991c <pvPortMalloc+0x17c>)
 80098bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098be:	4b17      	ldr	r3, [pc, #92]	; (800991c <pvPortMalloc+0x17c>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b18      	ldr	r3, [pc, #96]	; (8009924 <pvPortMalloc+0x184>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d203      	bcs.n	80098d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098ca:	4b14      	ldr	r3, [pc, #80]	; (800991c <pvPortMalloc+0x17c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a15      	ldr	r2, [pc, #84]	; (8009924 <pvPortMalloc+0x184>)
 80098d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	4b10      	ldr	r3, [pc, #64]	; (8009918 <pvPortMalloc+0x178>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	431a      	orrs	r2, r3
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e6:	f7ff faab 	bl	8008e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <pvPortMalloc+0x16a>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	60fb      	str	r3, [r7, #12]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <pvPortMalloc+0x168>
	return pvReturn;
 800990a:	69fb      	ldr	r3, [r7, #28]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	200013d0 	.word	0x200013d0
 8009918:	200013dc 	.word	0x200013dc
 800991c:	200013d4 	.word	0x200013d4
 8009920:	200013c8 	.word	0x200013c8
 8009924:	200013d8 	.word	0x200013d8

08009928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d048      	beq.n	80099cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800993a:	2308      	movs	r3, #8
 800993c:	425b      	negs	r3, r3
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	4413      	add	r3, r2
 8009942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	4b21      	ldr	r3, [pc, #132]	; (80099d4 <vPortFree+0xac>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4013      	ands	r3, r2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10a      	bne.n	800996c <vPortFree+0x44>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	60fb      	str	r3, [r7, #12]
}
 8009968:	bf00      	nop
 800996a:	e7fe      	b.n	800996a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00a      	beq.n	800998a <vPortFree+0x62>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60bb      	str	r3, [r7, #8]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <vPortFree+0xac>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4013      	ands	r3, r2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d019      	beq.n	80099cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d115      	bne.n	80099cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <vPortFree+0xac>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	43db      	mvns	r3, r3
 80099aa:	401a      	ands	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b0:	f7ff fa38 	bl	8008e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <vPortFree+0xb0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4413      	add	r3, r2
 80099be:	4a06      	ldr	r2, [pc, #24]	; (80099d8 <vPortFree+0xb0>)
 80099c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099c2:	6938      	ldr	r0, [r7, #16]
 80099c4:	f000 f86c 	bl	8009aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80099c8:	f7ff fa3a 	bl	8008e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099cc:	bf00      	nop
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	200013dc 	.word	0x200013dc
 80099d8:	200013d4 	.word	0x200013d4

080099dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80099e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099e8:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <prvHeapInit+0xac>)
 80099ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00c      	beq.n	8009a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3307      	adds	r3, #7
 80099fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0307 	bic.w	r3, r3, #7
 8009a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <prvHeapInit+0xac>)
 8009a0c:	4413      	add	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a14:	4a1d      	ldr	r2, [pc, #116]	; (8009a8c <prvHeapInit+0xb0>)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a1a:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <prvHeapInit+0xb0>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	4413      	add	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a28:	2208      	movs	r2, #8
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <prvHeapInit+0xb4>)
 8009a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a3e:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <prvHeapInit+0xb4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <prvHeapInit+0xb4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <prvHeapInit+0xb4>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4a0a      	ldr	r2, [pc, #40]	; (8009a94 <prvHeapInit+0xb8>)
 8009a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <prvHeapInit+0xbc>)
 8009a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a74:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <prvHeapInit+0xc0>)
 8009a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a7a:	601a      	str	r2, [r3, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	200007c8 	.word	0x200007c8
 8009a8c:	200013c8 	.word	0x200013c8
 8009a90:	200013d0 	.word	0x200013d0
 8009a94:	200013d8 	.word	0x200013d8
 8009a98:	200013d4 	.word	0x200013d4
 8009a9c:	200013dc 	.word	0x200013dc

08009aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009aa8:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <prvInsertBlockIntoFreeList+0xa8>)
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	e002      	b.n	8009ab4 <prvInsertBlockIntoFreeList+0x14>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d8f7      	bhi.n	8009aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	4413      	add	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d108      	bne.n	8009ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	441a      	add	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d118      	bne.n	8009b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <prvInsertBlockIntoFreeList+0xac>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d00d      	beq.n	8009b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	441a      	add	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	e008      	b.n	8009b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <prvInsertBlockIntoFreeList+0xac>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e003      	b.n	8009b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d002      	beq.n	8009b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b3e:	bf00      	nop
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr
 8009b48:	200013c8 	.word	0x200013c8
 8009b4c:	200013d0 	.word	0x200013d0

08009b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4912      	ldr	r1, [pc, #72]	; (8009ba0 <MX_USB_DEVICE_Init+0x50>)
 8009b58:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fd fd5d 	bl	8007618 <USBD_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b64:	f7f6 fd66 	bl	8000634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b68:	490f      	ldr	r1, [pc, #60]	; (8009ba8 <MX_USB_DEVICE_Init+0x58>)
 8009b6a:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b6c:	f7fd fd7f 	bl	800766e <USBD_RegisterClass>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b76:	f7f6 fd5d 	bl	8000634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b7a:	490c      	ldr	r1, [pc, #48]	; (8009bac <MX_USB_DEVICE_Init+0x5c>)
 8009b7c:	4809      	ldr	r0, [pc, #36]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b7e:	f7fd fcdf 	bl	8007540 <USBD_CDC_RegisterInterface>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b88:	f7f6 fd54 	bl	8000634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b8c:	4805      	ldr	r0, [pc, #20]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b8e:	f7fd fd87 	bl	80076a0 <USBD_Start>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b98:	f7f6 fd4c 	bl	8000634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000130 	.word	0x20000130
 8009ba4:	200013e0 	.word	0x200013e0
 8009ba8:	20000018 	.word	0x20000018
 8009bac:	20000120 	.word	0x20000120

08009bb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4905      	ldr	r1, [pc, #20]	; (8009bcc <CDC_Init_FS+0x1c>)
 8009bb8:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <CDC_Init_FS+0x20>)
 8009bba:	f7fd fcd7 	bl	800756c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bbe:	4905      	ldr	r1, [pc, #20]	; (8009bd4 <CDC_Init_FS+0x24>)
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <CDC_Init_FS+0x20>)
 8009bc2:	f7fd fcec 	bl	800759e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20001aa4 	.word	0x20001aa4
 8009bd0:	200013e0 	.word	0x200013e0
 8009bd4:	200016a4 	.word	0x200016a4

08009bd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bc80      	pop	{r7}
 8009be4:	4770      	bx	lr
	...

08009be8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	2b23      	cmp	r3, #35	; 0x23
 8009bfc:	d84a      	bhi.n	8009c94 <CDC_Control_FS+0xac>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <CDC_Control_FS+0x1c>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c95 	.word	0x08009c95
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c95 	.word	0x08009c95
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009c95 	.word	0x08009c95
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c95 	.word	0x08009c95
 8009c64:	08009c95 	.word	0x08009c95
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009c95 	.word	0x08009c95
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c95 	.word	0x08009c95
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c95 	.word	0x08009c95
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009c95 	.word	0x08009c95
 8009c8c:	08009c95 	.word	0x08009c95
 8009c90:	08009c95 	.word	0x08009c95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c94:	bf00      	nop
  }

  return (USBD_OK);
 8009c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <CDC_Receive_FS+0x24>)
 8009cb2:	f7fd fc74 	bl	800759e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cb6:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <CDC_Receive_FS+0x24>)
 8009cb8:	f7fd fc84 	bl	80075c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	200013e0 	.word	0x200013e0

08009ccc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2212      	movs	r2, #18
 8009cdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cde:	4b03      	ldr	r3, [pc, #12]	; (8009cec <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	2000014c 	.word	0x2000014c

08009cf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d02:	4b03      	ldr	r3, [pc, #12]	; (8009d10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	20000160 	.word	0x20000160

08009d14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4907      	ldr	r1, [pc, #28]	; (8009d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d2a:	4808      	ldr	r0, [pc, #32]	; (8009d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d2c:	f7fe fc30 	bl	8008590 <USBD_GetString>
 8009d30:	e004      	b.n	8009d3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4904      	ldr	r1, [pc, #16]	; (8009d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d36:	4805      	ldr	r0, [pc, #20]	; (8009d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d38:	f7fe fc2a 	bl	8008590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d3c:	4b02      	ldr	r3, [pc, #8]	; (8009d48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20001ea4 	.word	0x20001ea4
 8009d4c:	0800a66c 	.word	0x0800a66c

08009d50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	4904      	ldr	r1, [pc, #16]	; (8009d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d60:	4804      	ldr	r0, [pc, #16]	; (8009d74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d62:	f7fe fc15 	bl	8008590 <USBD_GetString>
  return USBD_StrDesc;
 8009d66:	4b02      	ldr	r3, [pc, #8]	; (8009d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20001ea4 	.word	0x20001ea4
 8009d74:	0800a684 	.word	0x0800a684

08009d78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	221a      	movs	r2, #26
 8009d88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d8a:	f000 f843 	bl	8009e14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d8e:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000164 	.word	0x20000164

08009d9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4907      	ldr	r1, [pc, #28]	; (8009dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009db2:	4808      	ldr	r0, [pc, #32]	; (8009dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009db4:	f7fe fbec 	bl	8008590 <USBD_GetString>
 8009db8:	e004      	b.n	8009dc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4904      	ldr	r1, [pc, #16]	; (8009dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dbe:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dc0:	f7fe fbe6 	bl	8008590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001ea4 	.word	0x20001ea4
 8009dd4:	0800a698 	.word	0x0800a698

08009dd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	6039      	str	r1, [r7, #0]
 8009de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d105      	bne.n	8009df6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	4907      	ldr	r1, [pc, #28]	; (8009e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dee:	4808      	ldr	r0, [pc, #32]	; (8009e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009df0:	f7fe fbce 	bl	8008590 <USBD_GetString>
 8009df4:	e004      	b.n	8009e00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4904      	ldr	r1, [pc, #16]	; (8009e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dfa:	4805      	ldr	r0, [pc, #20]	; (8009e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dfc:	f7fe fbc8 	bl	8008590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e00:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20001ea4 	.word	0x20001ea4
 8009e10:	0800a6a4 	.word	0x0800a6a4

08009e14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <Get_SerialNum+0x44>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <Get_SerialNum+0x48>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e26:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <Get_SerialNum+0x4c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4413      	add	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	4909      	ldr	r1, [pc, #36]	; (8009e64 <Get_SerialNum+0x50>)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f814 	bl	8009e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e44:	2204      	movs	r2, #4
 8009e46:	4908      	ldr	r1, [pc, #32]	; (8009e68 <Get_SerialNum+0x54>)
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f000 f80f 	bl	8009e6c <IntToUnicode>
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	1ffff7e8 	.word	0x1ffff7e8
 8009e5c:	1ffff7ec 	.word	0x1ffff7ec
 8009e60:	1ffff7f0 	.word	0x1ffff7f0
 8009e64:	20000166 	.word	0x20000166
 8009e68:	20000176 	.word	0x20000176

08009e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]
 8009e82:	e027      	b.n	8009ed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	0f1b      	lsrs	r3, r3, #28
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	d80b      	bhi.n	8009ea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	0f1b      	lsrs	r3, r3, #28
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	4619      	mov	r1, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3230      	adds	r2, #48	; 0x30
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e00a      	b.n	8009eba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	0f1b      	lsrs	r3, r3, #28
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	440b      	add	r3, r1
 8009eb4:	3237      	adds	r2, #55	; 0x37
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
 8009ed4:	7dfa      	ldrb	r2, [r7, #23]
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d3d3      	bcc.n	8009e84 <IntToUnicode+0x18>
  }
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <HAL_PCD_MspInit+0x44>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d113      	bne.n	8009f22 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009efa:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <HAL_PCD_MspInit+0x48>)
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	4a0c      	ldr	r2, [pc, #48]	; (8009f30 <HAL_PCD_MspInit+0x48>)
 8009f00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f04:	61d3      	str	r3, [r2, #28]
 8009f06:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <HAL_PCD_MspInit+0x48>)
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009f12:	2200      	movs	r2, #0
 8009f14:	2105      	movs	r1, #5
 8009f16:	2014      	movs	r0, #20
 8009f18:	f7f6 fef7 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009f1c:	2014      	movs	r0, #20
 8009f1e:	f7f6 ff10 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40005c00 	.word	0x40005c00
 8009f30:	40021000 	.word	0x40021000

08009f34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f7fd fbf0 	bl	8007730 <USBD_LL_SetupStage>
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	440b      	add	r3, r1
 8009f78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	4619      	mov	r1, r3
 8009f82:	f7fd fc22 	bl	80077ca <USBD_LL_DataOutStage>
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	440b      	add	r3, r1
 8009fae:	333c      	adds	r3, #60	; 0x3c
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f7fd fc79 	bl	80078ac <USBD_LL_DataInStage>
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fd fd89 	bl	8007ae8 <USBD_LL_SOF>
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d001      	beq.n	8009ff6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ff2:	f7f6 fb1f 	bl	8000634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ffc:	7bfa      	ldrb	r2, [r7, #15]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f7fd fd39 	bl	8007a78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fd fcf2 	bl	80079f6 <USBD_LL_Reset>
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fd fd33 	bl	8007a96 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a038:	4b04      	ldr	r3, [pc, #16]	; (800a04c <HAL_PCD_SuspendCallback+0x30>)
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	4a03      	ldr	r2, [pc, #12]	; (800a04c <HAL_PCD_SuspendCallback+0x30>)
 800a03e:	f043 0306 	orr.w	r3, r3, #6
 800a042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	e000ed00 	.word	0xe000ed00

0800a050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fd fd2d 	bl	8007abe <USBD_LL_Resume>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a074:	4a28      	ldr	r2, [pc, #160]	; (800a118 <USBD_LL_Init+0xac>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a26      	ldr	r2, [pc, #152]	; (800a118 <USBD_LL_Init+0xac>)
 800a080:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a084:	4b24      	ldr	r3, [pc, #144]	; (800a118 <USBD_LL_Init+0xac>)
 800a086:	4a25      	ldr	r2, [pc, #148]	; (800a11c <USBD_LL_Init+0xb0>)
 800a088:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a08a:	4b23      	ldr	r3, [pc, #140]	; (800a118 <USBD_LL_Init+0xac>)
 800a08c:	2208      	movs	r2, #8
 800a08e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a090:	4b21      	ldr	r3, [pc, #132]	; (800a118 <USBD_LL_Init+0xac>)
 800a092:	2202      	movs	r2, #2
 800a094:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a096:	4b20      	ldr	r3, [pc, #128]	; (800a118 <USBD_LL_Init+0xac>)
 800a098:	2200      	movs	r2, #0
 800a09a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a09c:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <USBD_LL_Init+0xac>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0a2:	4b1d      	ldr	r3, [pc, #116]	; (800a118 <USBD_LL_Init+0xac>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0a8:	481b      	ldr	r0, [pc, #108]	; (800a118 <USBD_LL_Init+0xac>)
 800a0aa:	f7f7 f939 	bl	8001320 <HAL_PCD_Init>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a0b4:	f7f6 fabe 	bl	8000634 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0be:	2318      	movs	r3, #24
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	f7f8 fdad 	bl	8002c22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ce:	2358      	movs	r3, #88	; 0x58
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2180      	movs	r1, #128	; 0x80
 800a0d4:	f7f8 fda5 	bl	8002c22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0de:	23c0      	movs	r3, #192	; 0xc0
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2181      	movs	r1, #129	; 0x81
 800a0e4:	f7f8 fd9d 	bl	8002c22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	f7f8 fd94 	bl	8002c22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a100:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a104:	2200      	movs	r2, #0
 800a106:	2182      	movs	r1, #130	; 0x82
 800a108:	f7f8 fd8b 	bl	8002c22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	200020a4 	.word	0x200020a4
 800a11c:	40005c00 	.word	0x40005c00

0800a120 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a136:	4618      	mov	r0, r3
 800a138:	f7f7 f9fd 	bl	8001536 <HAL_PCD_Start>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f94e 	bl	800a3e4 <USBD_Get_USB_Status>
 800a148:	4603      	mov	r3, r0
 800a14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	4608      	mov	r0, r1
 800a160:	4611      	mov	r1, r2
 800a162:	461a      	mov	r2, r3
 800a164:	4603      	mov	r3, r0
 800a166:	70fb      	strb	r3, [r7, #3]
 800a168:	460b      	mov	r3, r1
 800a16a:	70bb      	strb	r3, [r7, #2]
 800a16c:	4613      	mov	r3, r2
 800a16e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a17e:	78bb      	ldrb	r3, [r7, #2]
 800a180:	883a      	ldrh	r2, [r7, #0]
 800a182:	78f9      	ldrb	r1, [r7, #3]
 800a184:	f7f7 fb75 	bl	8001872 <HAL_PCD_EP_Open>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f928 	bl	800a3e4 <USBD_Get_USB_Status>
 800a194:	4603      	mov	r3, r0
 800a196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a198:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7f7 fbbc 	bl	800193e <HAL_PCD_EP_Close>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f909 	bl	800a3e4 <USBD_Get_USB_Status>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f7 fc7c 	bl	8001afc <HAL_PCD_EP_SetStall>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 f8ea 	bl	800a3e4 <USBD_Get_USB_Status>
 800a210:	4603      	mov	r3, r0
 800a212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a214:	7bbb      	ldrb	r3, [r7, #14]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7f7 fcbd 	bl	8001bbc <HAL_PCD_EP_ClrStall>
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 f8cb 	bl	800a3e4 <USBD_Get_USB_Status>
 800a24e:	4603      	mov	r3, r0
 800a250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a252:	7bbb      	ldrb	r3, [r7, #14]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a26e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a274:	2b00      	cmp	r3, #0
 800a276:	da0c      	bge.n	800a292 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a27e:	68f9      	ldr	r1, [r7, #12]
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	4613      	mov	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	440b      	add	r3, r1
 800a28c:	3302      	adds	r3, #2
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	e00b      	b.n	800a2aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a298:	68f9      	ldr	r1, [r7, #12]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bc80      	pop	{r7}
 800a2b2:	4770      	bx	lr

0800a2b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7f7 faa8 	bl	8001828 <HAL_PCD_SetAddress>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f880 	bl	800a3e4 <USBD_Get_USB_Status>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	460b      	mov	r3, r1
 800a300:	72fb      	strb	r3, [r7, #11]
 800a302:	4613      	mov	r3, r2
 800a304:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a314:	893b      	ldrh	r3, [r7, #8]
 800a316:	7af9      	ldrb	r1, [r7, #11]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f7f7 fbac 	bl	8001a76 <HAL_PCD_EP_Transmit>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f85d 	bl	800a3e4 <USBD_Get_USB_Status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a32e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	461a      	mov	r2, r3
 800a344:	460b      	mov	r3, r1
 800a346:	72fb      	strb	r3, [r7, #11]
 800a348:	4613      	mov	r3, r2
 800a34a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a35a:	893b      	ldrh	r3, [r7, #8]
 800a35c:	7af9      	ldrb	r1, [r7, #11]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f7f7 fb35 	bl	80019ce <HAL_PCD_EP_Receive>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f83a 	bl	800a3e4 <USBD_Get_USB_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a374:	7dbb      	ldrb	r3, [r7, #22]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f7f7 fb57 	bl	8001a48 <HAL_PCD_EP_GetRxCount>
 800a39a:	4603      	mov	r3, r0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3ac:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <USBD_static_malloc+0x14>)
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	20002390 	.word	0x20002390

0800a3bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]

}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d817      	bhi.n	800a428 <USBD_Get_USB_Status+0x44>
 800a3f8:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <USBD_Get_USB_Status+0x1c>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a411 	.word	0x0800a411
 800a404:	0800a417 	.word	0x0800a417
 800a408:	0800a41d 	.word	0x0800a41d
 800a40c:	0800a423 	.word	0x0800a423
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
    break;
 800a414:	e00b      	b.n	800a42e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a416:	2302      	movs	r3, #2
 800a418:	73fb      	strb	r3, [r7, #15]
    break;
 800a41a:	e008      	b.n	800a42e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a41c:	2301      	movs	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
    break;
 800a420:	e005      	b.n	800a42e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a422:	2302      	movs	r3, #2
 800a424:	73fb      	strb	r3, [r7, #15]
    break;
 800a426:	e002      	b.n	800a42e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a428:	2302      	movs	r3, #2
 800a42a:	73fb      	strb	r3, [r7, #15]
    break;
 800a42c:	bf00      	nop
  }
  return usb_status;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	bc80      	pop	{r7}
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	2600      	movs	r6, #0
 800a440:	4d0c      	ldr	r5, [pc, #48]	; (800a474 <__libc_init_array+0x38>)
 800a442:	4c0d      	ldr	r4, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a444:	1b64      	subs	r4, r4, r5
 800a446:	10a4      	asrs	r4, r4, #2
 800a448:	42a6      	cmp	r6, r4
 800a44a:	d109      	bne.n	800a460 <__libc_init_array+0x24>
 800a44c:	f000 f8e2 	bl	800a614 <_init>
 800a450:	2600      	movs	r6, #0
 800a452:	4d0a      	ldr	r5, [pc, #40]	; (800a47c <__libc_init_array+0x40>)
 800a454:	4c0a      	ldr	r4, [pc, #40]	; (800a480 <__libc_init_array+0x44>)
 800a456:	1b64      	subs	r4, r4, r5
 800a458:	10a4      	asrs	r4, r4, #2
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	d105      	bne.n	800a46a <__libc_init_array+0x2e>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	f855 3b04 	ldr.w	r3, [r5], #4
 800a464:	4798      	blx	r3
 800a466:	3601      	adds	r6, #1
 800a468:	e7ee      	b.n	800a448 <__libc_init_array+0xc>
 800a46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46e:	4798      	blx	r3
 800a470:	3601      	adds	r6, #1
 800a472:	e7f2      	b.n	800a45a <__libc_init_array+0x1e>
 800a474:	0800a72c 	.word	0x0800a72c
 800a478:	0800a72c 	.word	0x0800a72c
 800a47c:	0800a72c 	.word	0x0800a72c
 800a480:	0800a730 	.word	0x0800a730

0800a484 <__retarget_lock_acquire_recursive>:
 800a484:	4770      	bx	lr

0800a486 <__retarget_lock_release_recursive>:
 800a486:	4770      	bx	lr

0800a488 <memset>:
 800a488:	4603      	mov	r3, r0
 800a48a:	4402      	add	r2, r0
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d100      	bne.n	800a492 <memset+0xa>
 800a490:	4770      	bx	lr
 800a492:	f803 1b01 	strb.w	r1, [r3], #1
 800a496:	e7f9      	b.n	800a48c <memset+0x4>

0800a498 <cleanup_glue>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	460c      	mov	r4, r1
 800a49c:	6809      	ldr	r1, [r1, #0]
 800a49e:	4605      	mov	r5, r0
 800a4a0:	b109      	cbz	r1, 800a4a6 <cleanup_glue+0xe>
 800a4a2:	f7ff fff9 	bl	800a498 <cleanup_glue>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ae:	f000 b869 	b.w	800a584 <_free_r>
	...

0800a4b4 <_reclaim_reent>:
 800a4b4:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <_reclaim_reent+0xb4>)
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4283      	cmp	r3, r0
 800a4be:	d051      	beq.n	800a564 <_reclaim_reent+0xb0>
 800a4c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a4c2:	b143      	cbz	r3, 800a4d6 <_reclaim_reent+0x22>
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d14a      	bne.n	800a560 <_reclaim_reent+0xac>
 800a4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4cc:	6819      	ldr	r1, [r3, #0]
 800a4ce:	b111      	cbz	r1, 800a4d6 <_reclaim_reent+0x22>
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 f857 	bl	800a584 <_free_r>
 800a4d6:	6961      	ldr	r1, [r4, #20]
 800a4d8:	b111      	cbz	r1, 800a4e0 <_reclaim_reent+0x2c>
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f852 	bl	800a584 <_free_r>
 800a4e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4e2:	b111      	cbz	r1, 800a4ea <_reclaim_reent+0x36>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 f84d 	bl	800a584 <_free_r>
 800a4ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4ec:	b111      	cbz	r1, 800a4f4 <_reclaim_reent+0x40>
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f848 	bl	800a584 <_free_r>
 800a4f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4f6:	b111      	cbz	r1, 800a4fe <_reclaim_reent+0x4a>
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f843 	bl	800a584 <_free_r>
 800a4fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a500:	b111      	cbz	r1, 800a508 <_reclaim_reent+0x54>
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f83e 	bl	800a584 <_free_r>
 800a508:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a50a:	b111      	cbz	r1, 800a512 <_reclaim_reent+0x5e>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 f839 	bl	800a584 <_free_r>
 800a512:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a514:	b111      	cbz	r1, 800a51c <_reclaim_reent+0x68>
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f834 	bl	800a584 <_free_r>
 800a51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51e:	b111      	cbz	r1, 800a526 <_reclaim_reent+0x72>
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f82f 	bl	800a584 <_free_r>
 800a526:	69a3      	ldr	r3, [r4, #24]
 800a528:	b1e3      	cbz	r3, 800a564 <_reclaim_reent+0xb0>
 800a52a:	4620      	mov	r0, r4
 800a52c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a52e:	4798      	blx	r3
 800a530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a532:	b1b9      	cbz	r1, 800a564 <_reclaim_reent+0xb0>
 800a534:	4620      	mov	r0, r4
 800a536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a53a:	f7ff bfad 	b.w	800a498 <cleanup_glue>
 800a53e:	5949      	ldr	r1, [r1, r5]
 800a540:	b941      	cbnz	r1, 800a554 <_reclaim_reent+0xa0>
 800a542:	3504      	adds	r5, #4
 800a544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a546:	2d80      	cmp	r5, #128	; 0x80
 800a548:	68d9      	ldr	r1, [r3, #12]
 800a54a:	d1f8      	bne.n	800a53e <_reclaim_reent+0x8a>
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 f819 	bl	800a584 <_free_r>
 800a552:	e7ba      	b.n	800a4ca <_reclaim_reent+0x16>
 800a554:	680e      	ldr	r6, [r1, #0]
 800a556:	4620      	mov	r0, r4
 800a558:	f000 f814 	bl	800a584 <_free_r>
 800a55c:	4631      	mov	r1, r6
 800a55e:	e7ef      	b.n	800a540 <_reclaim_reent+0x8c>
 800a560:	2500      	movs	r5, #0
 800a562:	e7ef      	b.n	800a544 <_reclaim_reent+0x90>
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	bf00      	nop
 800a568:	20000180 	.word	0x20000180

0800a56c <__malloc_lock>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__malloc_lock+0x8>)
 800a56e:	f7ff bf89 	b.w	800a484 <__retarget_lock_acquire_recursive>
 800a572:	bf00      	nop
 800a574:	200025b0 	.word	0x200025b0

0800a578 <__malloc_unlock>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__malloc_unlock+0x8>)
 800a57a:	f7ff bf84 	b.w	800a486 <__retarget_lock_release_recursive>
 800a57e:	bf00      	nop
 800a580:	200025b0 	.word	0x200025b0

0800a584 <_free_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4605      	mov	r5, r0
 800a588:	2900      	cmp	r1, #0
 800a58a:	d040      	beq.n	800a60e <_free_r+0x8a>
 800a58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a590:	1f0c      	subs	r4, r1, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	18e4      	addlt	r4, r4, r3
 800a598:	f7ff ffe8 	bl	800a56c <__malloc_lock>
 800a59c:	4a1c      	ldr	r2, [pc, #112]	; (800a610 <_free_r+0x8c>)
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	b933      	cbnz	r3, 800a5b0 <_free_r+0x2c>
 800a5a2:	6063      	str	r3, [r4, #4]
 800a5a4:	6014      	str	r4, [r2, #0]
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ac:	f7ff bfe4 	b.w	800a578 <__malloc_unlock>
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d908      	bls.n	800a5c6 <_free_r+0x42>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf01      	itttt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	1809      	addeq	r1, r1, r0
 800a5c2:	6021      	streq	r1, [r4, #0]
 800a5c4:	e7ed      	b.n	800a5a2 <_free_r+0x1e>
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	b10b      	cbz	r3, 800a5d0 <_free_r+0x4c>
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d9fa      	bls.n	800a5c6 <_free_r+0x42>
 800a5d0:	6811      	ldr	r1, [r2, #0]
 800a5d2:	1850      	adds	r0, r2, r1
 800a5d4:	42a0      	cmp	r0, r4
 800a5d6:	d10b      	bne.n	800a5f0 <_free_r+0x6c>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	4401      	add	r1, r0
 800a5dc:	1850      	adds	r0, r2, r1
 800a5de:	4283      	cmp	r3, r0
 800a5e0:	6011      	str	r1, [r2, #0]
 800a5e2:	d1e0      	bne.n	800a5a6 <_free_r+0x22>
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	4401      	add	r1, r0
 800a5ea:	6011      	str	r1, [r2, #0]
 800a5ec:	6053      	str	r3, [r2, #4]
 800a5ee:	e7da      	b.n	800a5a6 <_free_r+0x22>
 800a5f0:	d902      	bls.n	800a5f8 <_free_r+0x74>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	e7d6      	b.n	800a5a6 <_free_r+0x22>
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	1821      	adds	r1, r4, r0
 800a5fc:	428b      	cmp	r3, r1
 800a5fe:	bf01      	itttt	eq
 800a600:	6819      	ldreq	r1, [r3, #0]
 800a602:	685b      	ldreq	r3, [r3, #4]
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	6063      	str	r3, [r4, #4]
 800a60a:	6054      	str	r4, [r2, #4]
 800a60c:	e7cb      	b.n	800a5a6 <_free_r+0x22>
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	200025b4 	.word	0x200025b4

0800a614 <_init>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr

0800a620 <_fini>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	bf00      	nop
 800a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a626:	bc08      	pop	{r3}
 800a628:	469e      	mov	lr, r3
 800a62a:	4770      	bx	lr
