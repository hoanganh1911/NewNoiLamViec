
TTP229_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d68  08008d68  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008d68  08008d68  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d68  08008d68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  200001e0  08008f50  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08008f50  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c67  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e7  00000000  00000000  00034e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00038258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae38  00000000  00000000  0003a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017361  00000000  00000000  00055490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f812  00000000  00000000  0006c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  000fc054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ca0 	.word	0x08008ca0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008ca0 	.word	0x08008ca0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 faf2 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f82a 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8b0 	bl	80002cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800016c:	f000 f880 	bl	8000270 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000170:	f007 fc4e 	bl	8007a10 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Key = Read_Keypad();
 8000174:	f000 f922 	bl	80003bc <Read_Keypad>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <main+0x54>)
 800017e:	701a      	strb	r2, [r3, #0]
	  if (Key)
 8000180:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <main+0x54>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d00f      	beq.n	80001a8 <main+0x4c>
	  {
			sprintf(data,"key: %d\r\n",Key);
 8000188:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <main+0x54>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	461a      	mov	r2, r3
 800018e:	4909      	ldr	r1, [pc, #36]	; (80001b4 <main+0x58>)
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <main+0x5c>)
 8000192:	f008 f90b 	bl	80083ac <siprintf>
			CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <main+0x5c>)
 8000198:	f7ff ffd8 	bl	800014c <strlen>
 800019c:	4603      	mov	r3, r0
 800019e:	b29b      	uxth	r3, r3
 80001a0:	4619      	mov	r1, r3
 80001a2:	4805      	ldr	r0, [pc, #20]	; (80001b8 <main+0x5c>)
 80001a4:	f007 fcf2 	bl	8007b8c <CDC_Transmit_FS>
	  }
	  HAL_Delay(100);
 80001a8:	2064      	movs	r0, #100	; 0x64
 80001aa:	f000 faff 	bl	80007ac <HAL_Delay>
	  Key = Read_Keypad();
 80001ae:	e7e1      	b.n	8000174 <main+0x18>
 80001b0:	20000250 	.word	0x20000250
 80001b4:	08008cb8 	.word	0x08008cb8
 80001b8:	20000254 	.word	0x20000254

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 f8e6 	bl	800839c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fb8a 	bl	800292c <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f904 	bl	800042a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fdf6 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f8ee 	bl	800042a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f002 ff9d 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000264:	f000 f8e1 	bl	800042a <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	; 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <MX_I2C1_Init+0x54>)
 8000278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_I2C1_Init+0x50>)
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <MX_I2C1_Init+0x58>)
 800027e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_I2C1_Init+0x50>)
 800028e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002ae:	f000 fd35 	bl	8000d1c <HAL_I2C_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b8:	f000 f8b7 	bl	800042a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200001fc 	.word	0x200001fc
 80002c4:	40005400 	.word	0x40005400
 80002c8:	000186a0 	.word	0x000186a0

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <MX_GPIO_Init+0xe8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a33      	ldr	r2, [pc, #204]	; (80003b4 <MX_GPIO_Init+0xe8>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <MX_GPIO_Init+0xe8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0320 	and.w	r3, r3, #32
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <MX_GPIO_Init+0xe8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2d      	ldr	r2, [pc, #180]	; (80003b4 <MX_GPIO_Init+0xe8>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <MX_GPIO_Init+0xe8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <MX_GPIO_Init+0xe8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <MX_GPIO_Init+0xe8>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_GPIO_Init+0xe8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4822      	ldr	r0, [pc, #136]	; (80003b8 <MX_GPIO_Init+0xec>)
 800032e:	f000 fcdc 	bl	8000cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	481f      	ldr	r0, [pc, #124]	; (80003b8 <MX_GPIO_Init+0xec>)
 800033a:	f000 fcd6 	bl	8000cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800033e:	2301      	movs	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	4619      	mov	r1, r3
 8000354:	4818      	ldr	r0, [pc, #96]	; (80003b8 <MX_GPIO_Init+0xec>)
 8000356:	f000 fb2d 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800035a:	2302      	movs	r3, #2
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000362:	2301      	movs	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_GPIO_Init+0xec>)
 800036e:	f000 fb21 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	480c      	ldr	r0, [pc, #48]	; (80003b8 <MX_GPIO_Init+0xec>)
 8000388:	f000 fb14 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800038c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800039a:	2303      	movs	r3, #3
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_GPIO_Init+0xec>)
 80003a6:	f000 fb05 	bl	80009b4 <HAL_GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800

080003bc <Read_Keypad>:

/* USER CODE BEGIN 4 */
uint8_t Read_Keypad(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	  uint8_t count;
	  uint8_t key_state = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	71bb      	strb	r3, [r7, #6]
	  for(count = 1;count<=16;count++)
 80003c6:	2301      	movs	r3, #1
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	e015      	b.n	80003f8 <Read_Keypad+0x3c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <Read_Keypad+0x4c>)
 80003d2:	f000 fc8a 	bl	8000cea <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80003d6:	2102      	movs	r1, #2
 80003d8:	480b      	ldr	r0, [pc, #44]	; (8000408 <Read_Keypad+0x4c>)
 80003da:	f000 fc6f 	bl	8000cbc <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <Read_Keypad+0x2c>
			{
				key_state = count;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2101      	movs	r1, #1
 80003ec:	4806      	ldr	r0, [pc, #24]	; (8000408 <Read_Keypad+0x4c>)
 80003ee:	f000 fc7c 	bl	8000cea <HAL_GPIO_WritePin>
	  for(count = 1;count<=16;count++)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3301      	adds	r3, #1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b10      	cmp	r3, #16
 80003fc:	d9e6      	bls.n	80003cc <Read_Keypad+0x10>
		}
	  return key_state;
 80003fe:	79bb      	ldrb	r3, [r7, #6]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40010800 	.word	0x40010800

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f000 f9a9 	bl	8000774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042e:	b672      	cpsid	i
}
 8000430:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <Error_Handler+0x8>

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <HAL_I2C_MspInit+0x70>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d123      	bne.n	8000500 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a13      	ldr	r2, [pc, #76]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d0:	23c0      	movs	r3, #192	; 0xc0
 80004d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d4:	2312      	movs	r3, #18
 80004d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004e4:	f000 fa66 	bl	80009b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f2:	61d3      	str	r3, [r2, #28]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40005400 	.word	0x40005400
 800050c:	40021000 	.word	0x40021000
 8000510:	40010c00 	.word	0x40010c00

08000514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800051c:	2300      	movs	r3, #0
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000520:	2300      	movs	r3, #0
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000524:	2300      	movs	r3, #0
 8000526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <HAL_InitTick+0xe8>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a33      	ldr	r2, [pc, #204]	; (80005fc <HAL_InitTick+0xe8>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <HAL_InitTick+0xe8>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000542:	f107 0210 	add.w	r2, r7, #16
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4611      	mov	r1, r2
 800054c:	4618      	mov	r0, r3
 800054e:	f002 fdd5 	bl	80030fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000552:	6a3b      	ldr	r3, [r7, #32]
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800055c:	f002 fdba 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8000560:	6378      	str	r0, [r7, #52]	; 0x34
 8000562:	e004      	b.n	800056e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000564:	f002 fdb6 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8000568:	4603      	mov	r3, r0
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800056e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <HAL_InitTick+0xec>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	0c9b      	lsrs	r3, r3, #18
 8000578:	3b01      	subs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <HAL_InitTick+0xf0>)
 800057e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_InitTick+0xf0>)
 8000586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800058a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_InitTick+0xf0>)
 800058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000590:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_InitTick+0xf0>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_InitTick+0xf0>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_InitTick+0xf0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <HAL_InitTick+0xf0>)
 80005a6:	f002 fead 	bl	8003304 <HAL_TIM_Base_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d11b      	bne.n	80005f0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <HAL_InitTick+0xf0>)
 80005ba:	f002 fefb 	bl	80033b4 <HAL_TIM_Base_Start_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d111      	bne.n	80005f0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005cc:	201c      	movs	r0, #28
 80005ce:	f000 f9e2 	bl	8000996 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d808      	bhi.n	80005ea <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	201c      	movs	r0, #28
 80005de:	f000 f9be 	bl	800095e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <HAL_InitTick+0xf4>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e002      	b.n	80005f0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3738      	adds	r7, #56	; 0x38
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	431bde83 	.word	0x431bde83
 8000604:	20000260 	.word	0x20000260
 8000608:	20000004 	.word	0x20000004

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
	...

0800065c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000662:	f000 fdd0 	bl	8001206 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000f78 	.word	0x20000f78

08000670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <TIM2_IRQHandler+0x10>)
 8000676:	f002 feef 	bl	8003458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000260 	.word	0x20000260

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f007 fe48 	bl	8008348 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20005000 	.word	0x20005000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	200002a8 	.word	0x200002a8
 80006ec:	20001498 	.word	0x20001498

080006f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	; (8000740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000722:	f7ff ffe5 	bl	80006f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f007 fe15 	bl	8008354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fd17 	bl	800015c <main>
  bx lr
 800072e:	4770      	bx	lr
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000738:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 800073c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000740:	20001494 	.word	0x20001494

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f8f5 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	200f      	movs	r0, #15
 8000760:	f7ff fed8 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fe66 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000008 	.word	0x20000008
 8000794:	200002ac 	.word	0x200002ac

08000798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	200002ac 	.word	0x200002ac

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff fff0 	bl	8000798 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffe0 	bl	8000798 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008

080007f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db0b      	blt.n	8000882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 021f 	and.w	r2, r3, #31
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <__NVIC_EnableIRQ+0x34>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	2001      	movs	r0, #1
 800087a:	fa00 f202 	lsl.w	r2, r0, r2
 800087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff4f 	bl	80007f4 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff64 	bl	800083c <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ffb2 	bl	80008e4 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff81 	bl	8000890 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff57 	bl	8000858 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b08b      	sub	sp, #44	; 0x2c
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	e169      	b.n	8000c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009c8:	2201      	movs	r2, #1
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	f040 8158 	bne.w	8000c96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a9a      	ldr	r2, [pc, #616]	; (8000c54 <HAL_GPIO_Init+0x2a0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d05e      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
 80009f0:	4a98      	ldr	r2, [pc, #608]	; (8000c54 <HAL_GPIO_Init+0x2a0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d875      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 80009f6:	4a98      	ldr	r2, [pc, #608]	; (8000c58 <HAL_GPIO_Init+0x2a4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d058      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
 80009fc:	4a96      	ldr	r2, [pc, #600]	; (8000c58 <HAL_GPIO_Init+0x2a4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d86f      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 8000a02:	4a96      	ldr	r2, [pc, #600]	; (8000c5c <HAL_GPIO_Init+0x2a8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d052      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
 8000a08:	4a94      	ldr	r2, [pc, #592]	; (8000c5c <HAL_GPIO_Init+0x2a8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d869      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 8000a0e:	4a94      	ldr	r2, [pc, #592]	; (8000c60 <HAL_GPIO_Init+0x2ac>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d04c      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
 8000a14:	4a92      	ldr	r2, [pc, #584]	; (8000c60 <HAL_GPIO_Init+0x2ac>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d863      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 8000a1a:	4a92      	ldr	r2, [pc, #584]	; (8000c64 <HAL_GPIO_Init+0x2b0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d046      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
 8000a20:	4a90      	ldr	r2, [pc, #576]	; (8000c64 <HAL_GPIO_Init+0x2b0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d85d      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 8000a26:	2b12      	cmp	r3, #18
 8000a28:	d82a      	bhi.n	8000a80 <HAL_GPIO_Init+0xcc>
 8000a2a:	2b12      	cmp	r3, #18
 8000a2c:	d859      	bhi.n	8000ae2 <HAL_GPIO_Init+0x12e>
 8000a2e:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <HAL_GPIO_Init+0x80>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000a89 	.word	0x08000a89
 8000a3c:	08000a9b 	.word	0x08000a9b
 8000a40:	08000add 	.word	0x08000add
 8000a44:	08000ae3 	.word	0x08000ae3
 8000a48:	08000ae3 	.word	0x08000ae3
 8000a4c:	08000ae3 	.word	0x08000ae3
 8000a50:	08000ae3 	.word	0x08000ae3
 8000a54:	08000ae3 	.word	0x08000ae3
 8000a58:	08000ae3 	.word	0x08000ae3
 8000a5c:	08000ae3 	.word	0x08000ae3
 8000a60:	08000ae3 	.word	0x08000ae3
 8000a64:	08000ae3 	.word	0x08000ae3
 8000a68:	08000ae3 	.word	0x08000ae3
 8000a6c:	08000ae3 	.word	0x08000ae3
 8000a70:	08000ae3 	.word	0x08000ae3
 8000a74:	08000ae3 	.word	0x08000ae3
 8000a78:	08000a91 	.word	0x08000a91
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	4a79      	ldr	r2, [pc, #484]	; (8000c68 <HAL_GPIO_Init+0x2b4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d013      	beq.n	8000aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a86:	e02c      	b.n	8000ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e029      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	3304      	adds	r3, #4
 8000a96:	623b      	str	r3, [r7, #32]
          break;
 8000a98:	e024      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e01f      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e01a      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e013      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d105      	bne.n	8000ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	611a      	str	r2, [r3, #16]
          break;
 8000ace:	e009      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	615a      	str	r2, [r3, #20]
          break;
 8000ada:	e003      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x130>
          break;
 8000ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d801      	bhi.n	8000aee <HAL_GPIO_Init+0x13a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	e001      	b.n	8000af2 <HAL_GPIO_Init+0x13e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3304      	adds	r3, #4
 8000af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	2bff      	cmp	r3, #255	; 0xff
 8000af8:	d802      	bhi.n	8000b00 <HAL_GPIO_Init+0x14c>
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	e002      	b.n	8000b06 <HAL_GPIO_Init+0x152>
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	3b08      	subs	r3, #8
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	401a      	ands	r2, r3
 8000b18:	6a39      	ldr	r1, [r7, #32]
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	431a      	orrs	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 80b1 	beq.w	8000c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b34:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a4c      	ldr	r2, [pc, #304]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_GPIO_Init+0x2bc>)
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	220f      	movs	r2, #15
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_GPIO_Init+0x2c0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d013      	beq.n	8000ba0 <HAL_GPIO_Init+0x1ec>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <HAL_GPIO_Init+0x2c4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <HAL_GPIO_Init+0x1e8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <HAL_GPIO_Init+0x2c8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x1e4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3d      	ldr	r2, [pc, #244]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b90:	2303      	movs	r3, #3
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b94:	2304      	movs	r3, #4
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb2:	492f      	ldr	r1, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x2bc>)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	492c      	ldr	r1, [pc, #176]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	4928      	ldr	r1, [pc, #160]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4922      	ldr	r1, [pc, #136]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	491e      	ldr	r1, [pc, #120]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	4918      	ldr	r1, [pc, #96]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	608b      	str	r3, [r1, #8]
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4914      	ldr	r1, [pc, #80]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d021      	beq.n	8000c88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	490e      	ldr	r1, [pc, #56]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60cb      	str	r3, [r1, #12]
 8000c50:	e021      	b.n	8000c96 <HAL_GPIO_Init+0x2e2>
 8000c52:	bf00      	nop
 8000c54:	10320000 	.word	0x10320000
 8000c58:	10310000 	.word	0x10310000
 8000c5c:	10220000 	.word	0x10220000
 8000c60:	10210000 	.word	0x10210000
 8000c64:	10120000 	.word	0x10120000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40011400 	.word	0x40011400
 8000c84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_GPIO_Init+0x304>)
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4909      	ldr	r1, [pc, #36]	; (8000cb8 <HAL_GPIO_Init+0x304>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	3301      	adds	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f47f ae8e 	bne.w	80009c8 <HAL_GPIO_Init+0x14>
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	372c      	adds	r7, #44	; 0x2c
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e001      	b.n	8000cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfa:	787b      	ldrb	r3, [r7, #1]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d00:	887a      	ldrh	r2, [r7, #2]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d06:	e003      	b.n	8000d10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	611a      	str	r2, [r3, #16]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e12b      	b.n	8000f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d106      	bne.n	8000d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fba8 	bl	8000498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2224      	movs	r2, #36	; 0x24
 8000d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0201 	bic.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d80:	f002 f9a8 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8000d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4a81      	ldr	r2, [pc, #516]	; (8000f90 <HAL_I2C_Init+0x274>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d807      	bhi.n	8000da0 <HAL_I2C_Init+0x84>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4a80      	ldr	r2, [pc, #512]	; (8000f94 <HAL_I2C_Init+0x278>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf94      	ite	ls
 8000d98:	2301      	movls	r3, #1
 8000d9a:	2300      	movhi	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	e006      	b.n	8000dae <HAL_I2C_Init+0x92>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4a7d      	ldr	r2, [pc, #500]	; (8000f98 <HAL_I2C_Init+0x27c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bf94      	ite	ls
 8000da8:	2301      	movls	r3, #1
 8000daa:	2300      	movhi	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e0e7      	b.n	8000f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4a78      	ldr	r2, [pc, #480]	; (8000f9c <HAL_I2C_Init+0x280>)
 8000dba:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbe:	0c9b      	lsrs	r3, r3, #18
 8000dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a6a      	ldr	r2, [pc, #424]	; (8000f90 <HAL_I2C_Init+0x274>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d802      	bhi.n	8000df0 <HAL_I2C_Init+0xd4>
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3301      	adds	r3, #1
 8000dee:	e009      	b.n	8000e04 <HAL_I2C_Init+0xe8>
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_I2C_Init+0x284>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	099b      	lsrs	r3, r3, #6
 8000e02:	3301      	adds	r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	495c      	ldr	r1, [pc, #368]	; (8000f90 <HAL_I2C_Init+0x274>)
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d819      	bhi.n	8000e58 <HAL_I2C_Init+0x13c>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	1e59      	subs	r1, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e32:	1c59      	adds	r1, r3, #1
 8000e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e38:	400b      	ands	r3, r1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00a      	beq.n	8000e54 <HAL_I2C_Init+0x138>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1e59      	subs	r1, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e52:	e051      	b.n	8000ef8 <HAL_I2C_Init+0x1dc>
 8000e54:	2304      	movs	r3, #4
 8000e56:	e04f      	b.n	8000ef8 <HAL_I2C_Init+0x1dc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d111      	bne.n	8000e84 <HAL_I2C_Init+0x168>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1e58      	subs	r0, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6859      	ldr	r1, [r3, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	440b      	add	r3, r1
 8000e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	e012      	b.n	8000eaa <HAL_I2C_Init+0x18e>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1e58      	subs	r0, r3, #1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	0099      	lsls	r1, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_I2C_Init+0x196>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e022      	b.n	8000ef8 <HAL_I2C_Init+0x1dc>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10e      	bne.n	8000ed8 <HAL_I2C_Init+0x1bc>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1e58      	subs	r0, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6859      	ldr	r1, [r3, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	440b      	add	r3, r1
 8000ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed6:	e00f      	b.n	8000ef8 <HAL_I2C_Init+0x1dc>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1e58      	subs	r0, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	0099      	lsls	r1, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	6809      	ldr	r1, [r1, #0]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6911      	ldr	r1, [r2, #16]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68d2      	ldr	r2, [r2, #12]
 8000f32:	4311      	orrs	r1, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2220      	movs	r2, #32
 8000f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	000186a0 	.word	0x000186a0
 8000f94:	001e847f 	.word	0x001e847f
 8000f98:	003d08ff 	.word	0x003d08ff
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	10624dd3 	.word	0x10624dd3

08000fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	b08b      	sub	sp, #44	; 0x2c
 8000fa8:	af06      	add	r7, sp, #24
 8000faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0fd      	b.n	80011b2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f006 ff12 	bl	8007df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fc01 	bl	80037e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	687e      	ldr	r6, [r7, #4]
 8000fea:	466d      	mov	r5, sp
 8000fec:	f106 0410 	add.w	r4, r6, #16
 8000ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	602b      	str	r3, [r5, #0]
 8000ff8:	1d33      	adds	r3, r6, #4
 8000ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f002 fbcb 	bl	8003798 <USB_CoreInit>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0ce      	b.n	80011b2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fbfc 	bl	8003818 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e04c      	b.n	80010c0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3301      	adds	r3, #1
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	b298      	uxth	r0, r3
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	3336      	adds	r3, #54	; 0x36
 8001064:	4602      	mov	r2, r0
 8001066:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	3303      	adds	r3, #3
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3338      	adds	r3, #56	; 0x38
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	333c      	adds	r3, #60	; 0x3c
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	3340      	adds	r3, #64	; 0x40
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3ad      	bcc.n	8001026 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e044      	b.n	800115a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	3301      	adds	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3b5      	bcc.n	80010d0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	687e      	ldr	r6, [r7, #4]
 800116c:	466d      	mov	r5, sp
 800116e:	f106 0410 	add.w	r4, r6, #16
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	1d33      	adds	r3, r6, #4
 800117c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f002 fb56 	bl	8003830 <USB_DevInit>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00d      	b.n	80011b2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 f808 	bl	80061c0 <USB_DevDisconnect>

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_PCD_Start+0x16>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e016      	b.n	80011fe <HAL_PCD_Start+0x44>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 faeb 	bl	80037b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e2:	2101      	movs	r1, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f007 f878 	bl	80082da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 ffdc 	bl	80061ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b088      	sub	sp, #32
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f004 ffde 	bl	80061d4 <USB_ReadInterrupts>
 8001218:	4603      	mov	r3, r0
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001222:	d102      	bne.n	800122a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fb5f 	bl	80018e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f004 ffd0 	bl	80061d4 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123e:	d112      	bne.n	8001266 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f006 fe46 	bl	8007eea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f923 	bl	80014ac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f004 ffb2 	bl	80061d4 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800127a:	d10b      	bne.n	8001294 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800128e:	b292      	uxth	r2, r2
 8001290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f004 ff9b 	bl	80061d4 <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012a8:	d10b      	bne.n	80012c2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012bc:	b292      	uxth	r2, r2
 80012be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 ff84 	bl	80061d4 <USB_ReadInterrupts>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d6:	d126      	bne.n	8001326 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	b292      	uxth	r2, r2
 80012ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0208 	bic.w	r2, r2, #8
 8001302:	b292      	uxth	r2, r2
 8001304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f006 fe27 	bl	8007f5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001316:	b29a      	uxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001320:	b292      	uxth	r2, r2
 8001322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f004 ff52 	bl	80061d4 <USB_ReadInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133a:	f040 8082 	bne.w	8001442 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e010      	b.n	8001366 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	441a      	add	r2, r3
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	8812      	ldrh	r2, [r2, #0]
 8001354:	b292      	uxth	r2, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	3320      	adds	r3, #32
 800135a:	443b      	add	r3, r7
 800135c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	3301      	adds	r3, #1
 8001364:	77fb      	strb	r3, [r7, #31]
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	2b07      	cmp	r3, #7
 800136a:	d9eb      	bls.n	8001344 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	b292      	uxth	r2, r2
 8001380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	b292      	uxth	r2, r2
 8001398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800139c:	bf00      	nop
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f6      	beq.n	800139e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c2:	b292      	uxth	r2, r2
 80013c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	77fb      	strb	r3, [r7, #31]
 80013cc:	e00f      	b.n	80013ee <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	4611      	mov	r1, r2
 80013d6:	7ffa      	ldrb	r2, [r7, #31]
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	440a      	add	r2, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	3320      	adds	r3, #32
 80013e0:	443b      	add	r3, r7
 80013e2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013e6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	3301      	adds	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d9ec      	bls.n	80013ce <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	b292      	uxth	r2, r2
 8001408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001414:	b29a      	uxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800141e:	b292      	uxth	r2, r2
 8001420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0204 	orr.w	r2, r2, #4
 8001436:	b292      	uxth	r2, r2
 8001438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f006 fd73 	bl	8007f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fec4 	bl	80061d4 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001456:	d10e      	bne.n	8001476 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f006 fd2c 	bl	8007ece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f004 feaa 	bl	80061d4 <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148a:	d10b      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800149e:	b292      	uxth	r2, r2
 80014a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_PCD_SetAddress+0x1a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e013      	b.n	80014ee <HAL_PCD_SetAddress+0x42>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	78fa      	ldrb	r2, [r7, #3]
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fe51 	bl	8006186 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	4608      	mov	r0, r1
 8001500:	4611      	mov	r1, r2
 8001502:	461a      	mov	r2, r3
 8001504:	4603      	mov	r3, r0
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	460b      	mov	r3, r1
 800150a:	803b      	strh	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da0e      	bge.n	800153a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	705a      	strb	r2, [r3, #1]
 8001538:	e00e      	b.n	8001558 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 0207 	and.w	r2, r3, #7
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001564:	883a      	ldrh	r2, [r7, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	78ba      	ldrb	r2, [r7, #2]
 800156e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d102      	bne.n	800158e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_PCD_EP_Open+0xa6>
 8001598:	2302      	movs	r3, #2
 800159a:	e00e      	b.n	80015ba <HAL_PCD_EP_Open+0xc4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f960 	bl	8003870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015b8:	7afb      	ldrb	r3, [r7, #11]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da0e      	bge.n	80015f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	705a      	strb	r2, [r3, #1]
 80015f2:	e00e      	b.n	8001612 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f003 0207 	and.w	r2, r3, #7
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_PCD_EP_Close+0x6a>
 8001628:	2302      	movs	r3, #2
 800162a:	e00e      	b.n	800164a <HAL_PCD_EP_Close+0x88>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68f9      	ldr	r1, [r7, #12]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fc82 	bl	8003f44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	460b      	mov	r3, r1
 8001660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	f003 0207 	and.w	r2, r3, #7
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2200      	movs	r2, #0
 8001690:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	b2da      	uxtb	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800169e:	7afb      	ldrb	r3, [r7, #11]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6979      	ldr	r1, [r7, #20]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fe34 	bl	800431c <USB_EPStartXfer>
 80016b4:	e005      	b.n	80016c2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6979      	ldr	r1, [r7, #20]
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fe2d 	bl	800431c <USB_EPStartXfer>
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0207 	and.w	r2, r3, #7
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	460b      	mov	r3, r1
 8001708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2201      	movs	r2, #1
 8001744:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	b2da      	uxtb	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	2b00      	cmp	r3, #0
 800175a:	d106      	bne.n	800176a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6979      	ldr	r1, [r7, #20]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fdda 	bl	800431c <USB_EPStartXfer>
 8001768:	e005      	b.n	8001776 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6979      	ldr	r1, [r7, #20]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fdd3 	bl	800431c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0207 	and.w	r2, r3, #7
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d901      	bls.n	800179e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e04c      	b.n	8001838 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800179e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da0e      	bge.n	80017c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	705a      	strb	r2, [r3, #1]
 80017c2:	e00c      	b.n	80017de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_PCD_EP_SetStall+0x7e>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e01c      	b.n	8001838 <HAL_PCD_EP_SetStall+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fbbd 	bl	8005f8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	2b00      	cmp	r3, #0
 800181a:	d108      	bne.n	800182e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f004 fce2 	bl	80061f2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d901      	bls.n	800185e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e040      	b.n	80018e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800185e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da0e      	bge.n	8001884 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	705a      	strb	r2, [r3, #1]
 8001882:	e00e      	b.n	80018a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f003 0207 	and.w	r2, r3, #7
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_PCD_EP_ClrStall+0x82>
 80018be:	2302      	movs	r3, #2
 80018c0:	e00e      	b.n	80018e0 <HAL_PCD_EP_ClrStall+0xa0>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fbab 	bl	800602c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018f0:	e2ec      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001908:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8161 	bne.w	8001bd4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d152      	bne.n	80019c2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192c:	81fb      	strh	r3, [r7, #14]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800193c:	b29b      	uxth	r3, r3
 800193e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3328      	adds	r3, #40	; 0x28
 8001944:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	441a      	add	r2, r3
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f006 fa89 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 829b 	beq.w	8001ecc <PCD_EP_ISR_Handler+0x5e4>
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8296 	bne.w	8001ecc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019c0:	e284      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d034      	beq.n	8001a46 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	3306      	adds	r3, #6
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f004 fc39 	bl	8006292 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	823b      	strh	r3, [r7, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	8a3a      	ldrh	r2, [r7, #16]
 8001a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f006 f9fe 	bl	8007e40 <HAL_PCD_SetupStageCallback>
 8001a44:	e242      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a46:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f280 823e 	bge.w	8001ecc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	83bb      	strh	r3, [r7, #28]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	8bba      	ldrh	r2, [r7, #28]
 8001a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	3306      	adds	r3, #6
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <PCD_EP_ISR_Handler+0x1ee>
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f004 fbe9 	bl	8006292 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	441a      	add	r2, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f006 f9c7 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 81f2 	bne.w	8001ecc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4413      	add	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d112      	bne.n	8001b36 <PCD_EP_ISR_Handler+0x24e>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	801a      	strh	r2, [r3, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	801a      	strh	r2, [r3, #0]
 8001b34:	e02f      	b.n	8001b96 <PCD_EP_ISR_Handler+0x2ae>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b3c:	d813      	bhi.n	8001b66 <PCD_EP_ISR_Handler+0x27e>
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x270>
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b54:	3301      	adds	r3, #1
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
 8001b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	e017      	b.n	8001b96 <PCD_EP_ISR_Handler+0x2ae>
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <PCD_EP_ISR_Handler+0x298>
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba6:	827b      	strh	r3, [r7, #18]
 8001ba8:	8a7b      	ldrh	r3, [r7, #18]
 8001baa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bae:	827b      	strh	r3, [r7, #18]
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bb6:	827b      	strh	r3, [r7, #18]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	8a7b      	ldrh	r3, [r7, #18]
 8001bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	8013      	strh	r3, [r2, #0]
 8001bd2:	e17b      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001be6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f280 80ea 	bge.w	8001dc4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c06:	4013      	ands	r3, r2
 8001c08:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d122      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	3306      	adds	r3, #6
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8087 	beq.w	8001d80 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	6959      	ldr	r1, [r3, #20]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	88da      	ldrh	r2, [r3, #6]
 8001c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c80:	f004 fb07 	bl	8006292 <USB_ReadPMA>
 8001c84:	e07c      	b.n	8001d80 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d108      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c90:	461a      	mov	r2, r3
 8001c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f927 	bl	8001ee8 <HAL_PCD_EP_DB_Receive>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c9e:	e06f      	b.n	8001d80 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cba:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	441a      	add	r2, r3
 8001cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d021      	beq.n	8001d3e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d22:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02a      	beq.n	8001d80 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	6959      	ldr	r1, [r3, #20]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	891a      	ldrh	r2, [r3, #8]
 8001d36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d38:	f004 faab 	bl	8006292 <USB_ReadPMA>
 8001d3c:	e020      	b.n	8001d80 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	3306      	adds	r3, #6
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d66:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	6959      	ldr	r1, [r3, #20]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	895a      	ldrh	r2, [r3, #10]
 8001d7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d7c:	f004 fa89 	bl	8006292 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d86:	441a      	add	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d92:	441a      	add	r2, r3
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <PCD_EP_ISR_Handler+0x4c2>
 8001da0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d206      	bcs.n	8001db8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f006 f857 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
 8001db6:	e005      	b.n	8001dc4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 faac 	bl	800431c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07e      	beq.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	843b      	strh	r3, [r7, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	8c3b      	ldrh	r3, [r7, #32]
 8001e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	78db      	ldrb	r3, [r3, #3]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d00c      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x554>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d146      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d141      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3302      	adds	r3, #2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d906      	bls.n	8001e7e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	8bfb      	ldrh	r3, [r7, #30]
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	e002      	b.n	8001e84 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f006 f801 	bl	8007e9a <HAL_PCD_DataInStageCallback>
 8001e98:	e018      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	441a      	add	r2, r3
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fa2f 	bl	800431c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ebe:	e005      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ec0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f91b 	bl	8002102 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f6ff ad0a 	blt.w	80018f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d07e      	beq.n	8001ffe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	3302      	adds	r3, #2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	8b7b      	ldrh	r3, [r7, #26]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d306      	bcc.n	8001f42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	8b7b      	ldrh	r3, [r7, #26]
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e002      	b.n	8001f48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d123      	bne.n	8001f98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	833b      	strh	r3, [r7, #24]
 8001f6c:	8b3b      	ldrh	r3, [r7, #24]
 8001f6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f72:	833b      	strh	r3, [r7, #24]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	8b3b      	ldrh	r3, [r7, #24]
 8001f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbc:	82fb      	strh	r3, [r7, #22]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fe2:	8b7b      	ldrh	r3, [r7, #26]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8087 	beq.w	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	891a      	ldrh	r2, [r3, #8]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	f004 f94b 	bl	8006292 <USB_ReadPMA>
 8001ffc:	e07c      	b.n	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	3306      	adds	r3, #6
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002026:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	429a      	cmp	r2, r3
 8002030:	d306      	bcc.n	8002040 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	8b7b      	ldrh	r3, [r7, #26]
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e002      	b.n	8002046 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d123      	bne.n	8002096 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	83fb      	strh	r3, [r7, #30]
 800206a:	8bfb      	ldrh	r3, [r7, #30]
 800206c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002070:	83fb      	strh	r3, [r7, #30]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	8bfb      	ldrh	r3, [r7, #30]
 8002082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800208a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002092:	b29b      	uxth	r3, r3
 8002094:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d11f      	bne.n	80020e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	83bb      	strh	r3, [r7, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	8bbb      	ldrh	r3, [r7, #28]
 80020cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020e0:	8b7b      	ldrh	r3, [r7, #26]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6959      	ldr	r1, [r3, #20]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	895a      	ldrh	r2, [r3, #10]
 80020f2:	8b7b      	ldrh	r3, [r7, #26]
 80020f4:	f004 f8cd 	bl	8006292 <USB_ReadPMA>
    }
  }

  return count;
 80020f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b0a2      	sub	sp, #136	; 0x88
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4613      	mov	r3, r2
 800210e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 81c7 	beq.w	80024aa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	3302      	adds	r3, #2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002144:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002150:	429a      	cmp	r2, r3
 8002152:	d907      	bls.n	8002164 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	619a      	str	r2, [r3, #24]
 8002162:	e002      	b.n	800216a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80b9 	bne.w	80022e6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d126      	bne.n	80021ca <HAL_PCD_EP_DB_Transmit+0xc8>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	4413      	add	r3, r2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	011a      	lsls	r2, r3, #4
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	4413      	add	r3, r2
 800219e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	e01a      	b.n	8002200 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d116      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	4413      	add	r3, r2
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	011a      	lsls	r2, r3, #4
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d126      	bne.n	800225c <HAL_PCD_EP_DB_Transmit+0x15a>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4413      	add	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	011a      	lsls	r2, r3, #4
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4413      	add	r3, r2
 8002230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002240:	b29a      	uxth	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002254:	b29a      	uxth	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	e017      	b.n	800228c <HAL_PCD_EP_DB_Transmit+0x18a>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d113      	bne.n	800228c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	4413      	add	r3, r2
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	011a      	lsls	r2, r3, #4
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	4413      	add	r3, r2
 8002280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2200      	movs	r2, #0
 800228a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f005 fe01 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 82d4 	beq.w	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	827b      	strh	r3, [r7, #18]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	8a7b      	ldrh	r3, [r7, #18]
 80022d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8013      	strh	r3, [r2, #0]
 80022e4:	e2b2      	b.n	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d021      	beq.n	8002334 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	b29b      	uxth	r3, r3
 8002332:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 8286 	bne.w	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002348:	441a      	add	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002356:	441a      	add	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d309      	bcc.n	800237c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002374:	1ad2      	subs	r2, r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	621a      	str	r2, [r3, #32]
 800237a:	e015      	b.n	80023a8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002392:	e009      	b.n	80023a8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d155      	bne.n	800245c <HAL_PCD_EP_DB_Transmit+0x35a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	4413      	add	r3, r2
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	011a      	lsls	r2, r3, #4
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	4413      	add	r3, r2
 80023d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
 80023d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d112      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0x302>
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e047      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x392>
 8002404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002406:	2b3e      	cmp	r3, #62	; 0x3e
 8002408:	d811      	bhi.n	800242e <HAL_PCD_EP_DB_Transmit+0x32c>
 800240a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_PCD_EP_DB_Transmit+0x31e>
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241c:	3301      	adds	r3, #1
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002422:	b29b      	uxth	r3, r3
 8002424:	029b      	lsls	r3, r3, #10
 8002426:	b29a      	uxth	r2, r3
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e032      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x392>
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	64bb      	str	r3, [r7, #72]	; 0x48
 8002434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_PCD_EP_DB_Transmit+0x342>
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	3b01      	subs	r3, #1
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	b29b      	uxth	r3, r3
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	b29b      	uxth	r3, r3
 800244c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002454:	b29a      	uxth	r2, r3
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e01b      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x392>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d117      	bne.n	8002494 <HAL_PCD_EP_DB_Transmit+0x392>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002478:	4413      	add	r3, r2
 800247a:	643b      	str	r3, [r7, #64]	; 0x40
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	011a      	lsls	r2, r3, #4
 8002482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002484:	4413      	add	r3, r2
 8002486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248e:	b29a      	uxth	r2, r3
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6959      	ldr	r1, [r3, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	891a      	ldrh	r2, [r3, #8]
 80024a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f003 feb0 	bl	8006208 <USB_WritePMA>
 80024a8:	e1d0      	b.n	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	3306      	adds	r3, #6
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024de:	429a      	cmp	r2, r3
 80024e0:	d307      	bcc.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	619a      	str	r2, [r3, #24]
 80024f0:	e002      	b.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 80c4 	bne.w	800268a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d126      	bne.n	8002558 <HAL_PCD_EP_DB_Transmit+0x456>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	4413      	add	r3, r2
 8002520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	011a      	lsls	r2, r3, #4
 8002528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252a:	4413      	add	r3, r2
 800252c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002530:	66bb      	str	r3, [r7, #104]	; 0x68
 8002532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800253c:	b29a      	uxth	r2, r3
 800253e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29a      	uxth	r2, r3
 8002552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	e01a      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d116      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	677b      	str	r3, [r7, #116]	; 0x74
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002574:	4413      	add	r3, r2
 8002576:	677b      	str	r3, [r7, #116]	; 0x74
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002580:	4413      	add	r3, r2
 8002582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002586:	673b      	str	r3, [r7, #112]	; 0x70
 8002588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	67bb      	str	r3, [r7, #120]	; 0x78
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12f      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x4fa>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b4:	4413      	add	r3, r2
 80025b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	011a      	lsls	r2, r3, #4
 80025c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	e017      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x52a>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d113      	bne.n	800262c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002612:	4413      	add	r3, r2
 8002614:	67bb      	str	r3, [r7, #120]	; 0x78
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	011a      	lsls	r2, r3, #4
 800261c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800261e:	4413      	add	r3, r2
 8002620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f005 fc31 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8104 	bne.w	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800267c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	b29b      	uxth	r3, r3
 8002686:	8013      	strh	r3, [r2, #0]
 8002688:	e0e0      	b.n	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 80b4 	bne.w	800284c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ec:	441a      	add	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fa:	441a      	add	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d309      	bcc.n	8002720 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	621a      	str	r2, [r3, #32]
 800271e:	e015      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002728:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800272c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002736:	e009      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d155      	bne.n	8002806 <HAL_PCD_EP_DB_Transmit+0x704>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276e:	4413      	add	r3, r2
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	011a      	lsls	r2, r3, #4
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	4413      	add	r3, r2
 800277c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002780:	65bb      	str	r3, [r7, #88]	; 0x58
 8002782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002792:	b29a      	uxth	r2, r3
 8002794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	e044      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x736>
 80027ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b0:	2b3e      	cmp	r3, #62	; 0x3e
 80027b2:	d811      	bhi.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	3301      	adds	r3, #1
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	e02f      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x736>
 80027d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
 80027de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x6ec>
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	3b01      	subs	r3, #1
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	e018      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x736>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d114      	bne.n	8002838 <HAL_PCD_EP_DB_Transmit+0x736>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800281c:	4413      	add	r3, r2
 800281e:	667b      	str	r3, [r7, #100]	; 0x64
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	011a      	lsls	r2, r3, #4
 8002826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002828:	4413      	add	r3, r2
 800282a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282e:	663b      	str	r3, [r7, #96]	; 0x60
 8002830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002832:	b29a      	uxth	r2, r3
 8002834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002836:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6959      	ldr	r1, [r3, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	895a      	ldrh	r2, [r3, #10]
 8002844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	f003 fcde 	bl	8006208 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002866:	823b      	strh	r3, [r7, #16]
 8002868:	8a3b      	ldrh	r3, [r7, #16]
 800286a:	f083 0310 	eor.w	r3, r3, #16
 800286e:	823b      	strh	r3, [r7, #16]
 8002870:	8a3b      	ldrh	r3, [r7, #16]
 8002872:	f083 0320 	eor.w	r3, r3, #32
 8002876:	823b      	strh	r3, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	8a3b      	ldrh	r3, [r7, #16]
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3788      	adds	r7, #136	; 0x88
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
 80028b4:	4613      	mov	r3, r2
 80028b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c4:	897b      	ldrh	r3, [r7, #10]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e009      	b.n	80028f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028dc:	897a      	ldrh	r2, [r7, #10]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	80da      	strh	r2, [r3, #6]
 8002904:	e00b      	b.n	800291e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2201      	movs	r2, #1
 800290a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	b29a      	uxth	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fd fec6 	bl	8000798 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fd fec2 	bl	8000798 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fd feb2 	bl	8000798 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fd feae 	bl	8000798 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fd fe67 	bl	8000798 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fd fe63 	bl	8000798 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd fe46 	bl	8000798 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fd fe42 	bl	8000798 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fd fe26 	bl	8000798 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fd fe22 	bl	8000798 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 faf4 	bl	800315c <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fd fe0c 	bl	8000798 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fd fe08 	bl	8000798 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7fd fdc9 	bl	8000798 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fd fdc5 	bl	8000798 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fd fd79 	bl	8000798 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fd fd75 	bl	8000798 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fd fd63 	bl	8000798 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fd fd5f 	bl	8000798 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fd fd33 	bl	8000798 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fd fd2f 	bl	8000798 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fd03 	bl	8000798 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fd fcff 	bl	8000798 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fd fcec 	bl	8000798 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd fce8 	bl	8000798 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fd fc3a 	bl	8000798 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fd fc36 	bl	8000798 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fa98 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08008d1c 	.word	0x08008d1c
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b490      	push	{r4, r7}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800300c:	1d3c      	adds	r4, r7, #4
 800300e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003014:	f240 2301 	movw	r3, #513	; 0x201
 8003018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x40>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x46>
 8003042:	e02b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	e02b      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3328      	adds	r3, #40	; 0x28
 8003054:	443b      	add	r3, r7
 8003056:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800305a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0c5b      	lsrs	r3, r3, #17
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	3328      	adds	r3, #40	; 0x28
 8003072:	443b      	add	r3, r7
 8003074:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003078:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800307e:	fb03 f202 	mul.w	r2, r3, r2
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e004      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	623b      	str	r3, [r7, #32]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800309e:	623b      	str	r3, [r7, #32]
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc90      	pop	{r4, r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08008cc4 	.word	0x08008cc4
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	003d0900 	.word	0x003d0900

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08008d2c 	.word	0x08008d2c

080030fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	220f      	movs	r2, #15
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCC_GetClockConfig+0x58>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_RCC_GetClockConfig+0x58>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetClockConfig+0x58>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_RCC_GetClockConfig+0x58>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40021000 	.word	0x40021000
 8003158:	40022000 	.word	0x40022000

0800315c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <RCC_Delay+0x34>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <RCC_Delay+0x38>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0a5b      	lsrs	r3, r3, #9
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003178:	bf00      	nop
  }
  while (Delay --);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	60fa      	str	r2, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <RCC_Delay+0x1c>
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	20000000 	.word	0x20000000
 8003194:	10624dd3 	.word	0x10624dd3

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d07d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b8:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
 80031d0:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f8:	f7fd face 	bl	8000798 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fd faca 	bl	8000798 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e06d      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02e      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d027      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800324c:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003252:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fd fa99 	bl	8000798 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fa95 	bl	8000798 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e036      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4917      	ldr	r1, [pc, #92]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	4313      	orrs	r3, r2
 800329c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	490b      	ldr	r1, [pc, #44]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
 8003300:	42420440 	.word	0x42420440

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f839 	bl	80033a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 f9b4 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e03a      	b.n	8003442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_Base_Start_IT+0x98>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_Base_Start_IT+0x9c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_TIM_Base_Start_IT+0xa0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800

08003458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0202 	mvn.w	r2, #2
 8003484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8ed 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8e0 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8ef 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0204 	mvn.w	r2, #4
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8c3 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8b6 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8c5 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b08      	cmp	r3, #8
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0208 	mvn.w	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f899 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f88c 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f89b 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b10      	cmp	r3, #16
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f86f 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f862 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f871 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0201 	mvn.w	r2, #1
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fc ff18 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8bf 	bl	8003786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f835 	bl	800369e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d10e      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b20      	cmp	r3, #32
 800364e:	d107      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0220 	mvn.w	r2, #32
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f88a 	bl	8003774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <TIM_Base_SetConfig+0xbc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <TIM_Base_SetConfig+0xc0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <TIM_Base_SetConfig+0xbc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <TIM_Base_SetConfig+0xc0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d103      	bne.n	8003758 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	615a      	str	r2, [r3, #20]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003798:	b084      	sub	sp, #16
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	f107 0014 	add.w	r0, r7, #20
 80037a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	b004      	add	sp, #16
 80037b6:	4770      	bx	lr

080037b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	4013      	ands	r3, r2
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003830:	b084      	sub	sp, #16
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	f107 0014 	add.w	r0, r7, #20
 800383e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	b004      	add	sp, #16
 800386e:	4770      	bx	lr

08003870 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003870:	b480      	push	{r7}
 8003872:	b09b      	sub	sp, #108	; 0x6c
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d81f      	bhi.n	80038e2 <USB_ActivateEndpoint+0x72>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <USB_ActivateEndpoint+0x38>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038d5 	.word	0x080038d5
 80038b0:	080038eb 	.word	0x080038eb
 80038b4:	080038c7 	.word	0x080038c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038c4:	e012      	b.n	80038ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80038c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80038ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038d2:	e00b      	b.n	80038ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038e0:	e004      	b.n	80038ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80038e8:	e000      	b.n	80038ec <USB_ActivateEndpoint+0x7c>
      break;
 80038ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	b29b      	uxth	r3, r3
 800390c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	b29a      	uxth	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	4313      	orrs	r3, r2
 800392e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003950:	b29b      	uxth	r3, r3
 8003952:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	7b1b      	ldrb	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 8149 	bne.w	8003bf0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8084 	beq.w	8003a70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4413      	add	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	011a      	lsls	r2, r3, #4
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	88db      	ldrh	r3, [r3, #6]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	81fb      	strh	r3, [r7, #14]
 80039aa:	89fb      	ldrh	r3, [r7, #14]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <USB_ActivateEndpoint+0x17c>
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	81bb      	strh	r3, [r7, #12]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	89bb      	ldrh	r3, [r7, #12]
 80039d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	78db      	ldrb	r3, [r3, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d020      	beq.n	8003a36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0a:	813b      	strh	r3, [r7, #8]
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	f083 0320 	eor.w	r3, r3, #32
 8003a12:	813b      	strh	r3, [r7, #8]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8013      	strh	r3, [r2, #0]
 8003a34:	e27f      	b.n	8003f36 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	817b      	strh	r3, [r7, #10]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]
 8003a6e:	e262      	b.n	8003f36 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	4413      	add	r3, r2
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	011a      	lsls	r2, r3, #4
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	88db      	ldrh	r3, [r3, #6]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	4413      	add	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	011a      	lsls	r2, r3, #4
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d112      	bne.n	8003af6 <USB_ActivateEndpoint+0x286>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	e02f      	b.n	8003b56 <USB_ActivateEndpoint+0x2e6>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b3e      	cmp	r3, #62	; 0x3e
 8003afc:	d813      	bhi.n	8003b26 <USB_ActivateEndpoint+0x2b6>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	663b      	str	r3, [r7, #96]	; 0x60
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <USB_ActivateEndpoint+0x2a8>
 8003b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b14:	3301      	adds	r3, #1
 8003b16:	663b      	str	r3, [r7, #96]	; 0x60
 8003b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	e017      	b.n	8003b56 <USB_ActivateEndpoint+0x2e6>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <USB_ActivateEndpoint+0x2d0>
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	83fb      	strh	r3, [r7, #30]
 8003b64:	8bfb      	ldrh	r3, [r7, #30]
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01b      	beq.n	8003ba6 <USB_ActivateEndpoint+0x336>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	83bb      	strh	r3, [r7, #28]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8bbb      	ldrh	r3, [r7, #28]
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	837b      	strh	r3, [r7, #26]
 8003bbe:	8b7b      	ldrh	r3, [r7, #26]
 8003bc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bc4:	837b      	strh	r3, [r7, #26]
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bcc:	837b      	strh	r3, [r7, #26]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8b7b      	ldrh	r3, [r7, #26]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
 8003bee:	e1a2      	b.n	8003f36 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c3c:	4413      	add	r3, r2
 8003c3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	011a      	lsls	r2, r3, #4
 8003c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	891b      	ldrh	r3, [r3, #8]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	653b      	str	r3, [r7, #80]	; 0x50
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c70:	4413      	add	r3, r2
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011a      	lsls	r2, r3, #4
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	895b      	ldrh	r3, [r3, #10]
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 8091 	bne.w	8003dc0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003cac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01b      	beq.n	8003cee <USB_ActivateEndpoint+0x47e>
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ccc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	441a      	add	r2, r3
 8003cd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	873b      	strh	r3, [r7, #56]	; 0x38
 8003cfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01b      	beq.n	8003d3e <USB_ActivateEndpoint+0x4ce>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
 8003dbe:	e0ba      	b.n	8003f36 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01d      	beq.n	8003e18 <USB_ActivateEndpoint+0x5a8>
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01d      	beq.n	8003e70 <USB_ActivateEndpoint+0x600>
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	78db      	ldrb	r3, [r3, #3]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d024      	beq.n	8003ec2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003e92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e96:	f083 0320 	eor.w	r3, r3, #32
 8003e9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]
 8003ec0:	e01d      	b.n	8003efe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	376c      	adds	r7, #108	; 0x6c
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b08d      	sub	sp, #52	; 0x34
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	7b1b      	ldrb	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 808e 	bne.w	8004074 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d044      	beq.n	8003fea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	81bb      	strh	r3, [r7, #12]
 8003f6e:	89bb      	ldrh	r3, [r7, #12]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <USB_DeactivateEndpoint+0x6c>
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	817b      	strh	r3, [r7, #10]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc6:	813b      	strh	r3, [r7, #8]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	893b      	ldrh	r3, [r7, #8]
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
 8003fe8:	e192      	b.n	8004310 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	827b      	strh	r3, [r7, #18]
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <USB_DeactivateEndpoint+0xf6>
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	823b      	strh	r3, [r7, #16]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	81fb      	strh	r3, [r7, #14]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	441a      	add	r2, r3
 800405c:	89fb      	ldrh	r3, [r7, #14]
 800405e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]
 8004072:	e14d      	b.n	8004310 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 80a5 	bne.w	80041c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	843b      	strh	r3, [r7, #32]
 800408c:	8c3b      	ldrh	r3, [r7, #32]
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01b      	beq.n	80040ce <USB_DeactivateEndpoint+0x18a>
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	83fb      	strh	r3, [r7, #30]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	83bb      	strh	r3, [r7, #28]
 80040dc:	8bbb      	ldrh	r3, [r7, #28]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01b      	beq.n	800411e <USB_DeactivateEndpoint+0x1da>
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fc:	837b      	strh	r3, [r7, #26]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	8b7b      	ldrh	r3, [r7, #26]
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	833b      	strh	r3, [r7, #24]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	8b3b      	ldrh	r3, [r7, #24]
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	82fb      	strh	r3, [r7, #22]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8afb      	ldrh	r3, [r7, #22]
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	82bb      	strh	r3, [r7, #20]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	8abb      	ldrh	r3, [r7, #20]
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
 80041c6:	e0a3      	b.n	8004310 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <USB_DeactivateEndpoint+0x2d4>
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <USB_DeactivateEndpoint+0x324>
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	853b      	strh	r3, [r7, #40]	; 0x28
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004264:	b29b      	uxth	r3, r3
 8004266:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800428c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429c:	b29b      	uxth	r3, r3
 800429e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3734      	adds	r7, #52	; 0x34
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0cc      	sub	sp, #304	; 0x130
 8004320:	af00      	add	r7, sp, #0
 8004322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800432a:	6018      	str	r0, [r3, #0]
 800432c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004334:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800433a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f041 817d 	bne.w	8005642 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	429a      	cmp	r2, r3
 8004362:	d908      	bls.n	8004376 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004374:	e007      	b.n	8004386 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800437a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800438a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d152      	bne.n	800443c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6959      	ldr	r1, [r3, #20]
 80043a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	88da      	ldrh	r2, [r3, #6]
 80043ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80043b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f001 ff23 	bl	8006208 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	4619      	mov	r1, r3
 80043e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043f4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	440a      	add	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	011a      	lsls	r2, r3, #4
 800440c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004410:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4413      	add	r3, r2
 8004418:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800441c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004420:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442a:	b29a      	uxth	r2, r3
 800442c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004430:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	f001 b8b5 	b.w	80055a6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800443c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78db      	ldrb	r3, [r3, #3]
 8004448:	2b02      	cmp	r3, #2
 800444a:	f040 84c6 	bne.w	8004dda <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800444e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	f240 8443 	bls.w	8004cf2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800446c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 823e 	beq.w	800498a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800450e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004512:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004516:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800451a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 809a 	bne.w	8004668 <USB_EPStartXfer+0x34c>
 8004534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004540:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	4619      	mov	r1, r3
 800455a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800455e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004566:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	440a      	add	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	011a      	lsls	r2, r3, #4
 800457e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4413      	add	r3, r2
 800458a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800458e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d122      	bne.n	80045e6 <USB_EPStartXfer+0x2ca>
 80045a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	e079      	b.n	80046da <USB_EPStartXfer+0x3be>
 80045e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ea:	2b3e      	cmp	r3, #62	; 0x3e
 80045ec:	d81b      	bhi.n	8004626 <USB_EPStartXfer+0x30a>
 80045ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80045f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <USB_EPStartXfer+0x2f2>
 8004604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004608:	3301      	adds	r3, #1
 800460a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800460e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004612:	b29b      	uxth	r3, r3
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	b29a      	uxth	r2, r3
 8004618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	e059      	b.n	80046da <USB_EPStartXfer+0x3be>
 8004626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <USB_EPStartXfer+0x32a>
 800463c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004640:	3b01      	subs	r3, #1
 8004642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800464a:	b29b      	uxth	r3, r3
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	b29b      	uxth	r3, r3
 8004650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004658:	b29a      	uxth	r2, r3
 800465a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	e038      	b.n	80046da <USB_EPStartXfer+0x3be>
 8004668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d130      	bne.n	80046da <USB_EPStartXfer+0x3be>
 8004678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004692:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004696:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	440a      	add	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80046be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	895b      	ldrh	r3, [r3, #10]
 80046e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6959      	ldr	r1, [r3, #20]
 80046f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004700:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004704:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f001 fd7d 	bl	8006208 <USB_WritePMA>
            ep->xfer_buff += len;
 800470e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800471e:	441a      	add	r2, r3
 8004720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800472c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d90f      	bls.n	8004768 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	621a      	str	r2, [r3, #32]
 8004766:	e00e      	b.n	8004786 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 809a 	bne.w	80048cc <USB_EPStartXfer+0x5b0>
 8004798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047ca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	440a      	add	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	011a      	lsls	r2, r3, #4
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80047f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d122      	bne.n	800484a <USB_EPStartXfer+0x52e>
 8004804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004808:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004816:	b29a      	uxth	r2, r3
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	e083      	b.n	8004952 <USB_EPStartXfer+0x636>
 800484a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484e:	2b3e      	cmp	r3, #62	; 0x3e
 8004850:	d81b      	bhi.n	800488a <USB_EPStartXfer+0x56e>
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800485c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <USB_EPStartXfer+0x556>
 8004868:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800486c:	3301      	adds	r3, #1
 800486e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004872:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004876:	b29b      	uxth	r3, r3
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	b29a      	uxth	r2, r3
 800487c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004880:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e063      	b.n	8004952 <USB_EPStartXfer+0x636>
 800488a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <USB_EPStartXfer+0x58e>
 80048a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	e042      	b.n	8004952 <USB_EPStartXfer+0x636>
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d13a      	bne.n	8004952 <USB_EPStartXfer+0x636>
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800490a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800490e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	440a      	add	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	011a      	lsls	r2, r3, #4
 8004926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4413      	add	r3, r2
 8004932:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800493a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004944:	b29a      	uxth	r2, r3
 8004946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	891b      	ldrh	r3, [r3, #8]
 800495e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6959      	ldr	r1, [r3, #20]
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	b29b      	uxth	r3, r3
 8004974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004978:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800497c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004980:	6800      	ldr	r0, [r0, #0]
 8004982:	f001 fc41 	bl	8006208 <USB_WritePMA>
 8004986:	f000 be0e 	b.w	80055a6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	785b      	ldrb	r3, [r3, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d16d      	bne.n	8004a76 <USB_EPStartXfer+0x75a>
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	4413      	add	r3, r2
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	011a      	lsls	r2, r3, #4
 80049cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
 80049d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d112      	bne.n	8004a04 <USB_EPStartXfer+0x6e8>
 80049de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e063      	b.n	8004acc <USB_EPStartXfer+0x7b0>
 8004a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a08:	2b3e      	cmp	r3, #62	; 0x3e
 8004a0a:	d817      	bhi.n	8004a3c <USB_EPStartXfer+0x720>
 8004a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <USB_EPStartXfer+0x710>
 8004a22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a26:	3301      	adds	r3, #1
 8004a28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	e047      	b.n	8004acc <USB_EPStartXfer+0x7b0>
 8004a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <USB_EPStartXfer+0x740>
 8004a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a56:	3b01      	subs	r3, #1
 8004a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	029b      	lsls	r3, r3, #10
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e02a      	b.n	8004acc <USB_EPStartXfer+0x7b0>
 8004a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d122      	bne.n	8004acc <USB_EPStartXfer+0x7b0>
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	653b      	str	r3, [r7, #80]	; 0x50
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa6:	4413      	add	r3, r2
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8004aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	011a      	lsls	r2, r3, #4
 8004ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	891b      	ldrh	r3, [r3, #8]
 8004ad8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6959      	ldr	r1, [r3, #20]
 8004ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004af2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004af6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	f001 fb84 	bl	8006208 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b10:	441a      	add	r2, r3
 8004b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d90f      	bls.n	8004b5a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	1ad2      	subs	r2, r2, r3
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	621a      	str	r2, [r3, #32]
 8004b58:	e00e      	b.n	8004b78 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d16d      	bne.n	8004c70 <USB_EPStartXfer+0x954>
 8004b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	4413      	add	r3, r2
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	4413      	add	r3, r2
 8004bca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d112      	bne.n	8004bfe <USB_EPStartXfer+0x8e2>
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	e05d      	b.n	8004cba <USB_EPStartXfer+0x99e>
 8004bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c02:	2b3e      	cmp	r3, #62	; 0x3e
 8004c04:	d817      	bhi.n	8004c36 <USB_EPStartXfer+0x91a>
 8004c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <USB_EPStartXfer+0x90a>
 8004c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	029b      	lsls	r3, r3, #10
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e041      	b.n	8004cba <USB_EPStartXfer+0x99e>
 8004c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <USB_EPStartXfer+0x93a>
 8004c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c50:	3b01      	subs	r3, #1
 8004c52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e024      	b.n	8004cba <USB_EPStartXfer+0x99e>
 8004c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11c      	bne.n	8004cba <USB_EPStartXfer+0x99e>
 8004c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	4413      	add	r3, r2
 8004c96:	643b      	str	r3, [r7, #64]	; 0x40
 8004c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	011a      	lsls	r2, r3, #4
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca8:	4413      	add	r3, r2
 8004caa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	895b      	ldrh	r3, [r3, #10]
 8004cc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6959      	ldr	r1, [r3, #20]
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ce0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ce4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ce8:	6800      	ldr	r0, [r0, #0]
 8004cea:	f001 fa8d 	bl	8006208 <USB_WritePMA>
 8004cee:	f000 bc5a 	b.w	80055a6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	4413      	add	r3, r2
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	011a      	lsls	r2, r3, #4
 8004d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d92:	4413      	add	r3, r2
 8004d94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	891b      	ldrh	r3, [r3, #8]
 8004db0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6959      	ldr	r1, [r3, #20]
 8004dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f001 fa18 	bl	8006208 <USB_WritePMA>
 8004dd8:	e3e5      	b.n	80055a6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 81bc 	beq.w	80051f4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d16d      	bne.n	8004f76 <USB_EPStartXfer+0xc5a>
 8004e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eba:	4413      	add	r3, r2
 8004ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	011a      	lsls	r2, r3, #4
 8004ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ece:	4413      	add	r3, r2
 8004ed0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d112      	bne.n	8004f04 <USB_EPStartXfer+0xbe8>
 8004ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e060      	b.n	8004fc6 <USB_EPStartXfer+0xcaa>
 8004f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f08:	2b3e      	cmp	r3, #62	; 0x3e
 8004f0a:	d817      	bhi.n	8004f3c <USB_EPStartXfer+0xc20>
 8004f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <USB_EPStartXfer+0xc10>
 8004f22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	e044      	b.n	8004fc6 <USB_EPStartXfer+0xcaa>
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d104      	bne.n	8004f5c <USB_EPStartXfer+0xc40>
 8004f52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f56:	3b01      	subs	r3, #1
 8004f58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	029b      	lsls	r3, r3, #10
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	e027      	b.n	8004fc6 <USB_EPStartXfer+0xcaa>
 8004f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d11f      	bne.n	8004fc6 <USB_EPStartXfer+0xcaa>
 8004f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	011a      	lsls	r2, r3, #4
 8004fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	895b      	ldrh	r3, [r3, #10]
 8004fd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ff0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ff4:	6800      	ldr	r0, [r0, #0]
 8004ff6:	f001 f907 	bl	8006208 <USB_WritePMA>
          ep->xfer_buff += len;
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500a:	441a      	add	r2, r3
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90f      	bls.n	8005054 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	621a      	str	r2, [r3, #32]
 8005052:	e00e      	b.n	8005072 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8295 	beq.w	80055a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d16d      	bne.n	8005168 <USB_EPStartXfer+0xe4c>
 800508c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	66bb      	str	r3, [r7, #104]	; 0x68
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050ac:	4413      	add	r3, r2
 80050ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	011a      	lsls	r2, r3, #4
 80050be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c0:	4413      	add	r3, r2
 80050c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c6:	667b      	str	r3, [r7, #100]	; 0x64
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d112      	bne.n	80050f6 <USB_EPStartXfer+0xdda>
 80050d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e063      	b.n	80051be <USB_EPStartXfer+0xea2>
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	2b3e      	cmp	r3, #62	; 0x3e
 80050fc:	d817      	bhi.n	800512e <USB_EPStartXfer+0xe12>
 80050fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <USB_EPStartXfer+0xe02>
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	3301      	adds	r3, #1
 800511a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	b29b      	uxth	r3, r3
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	b29a      	uxth	r2, r3
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e047      	b.n	80051be <USB_EPStartXfer+0xea2>
 800512e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <USB_EPStartXfer+0xe32>
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005148:	3b01      	subs	r3, #1
 800514a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e02a      	b.n	80051be <USB_EPStartXfer+0xea2>
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d122      	bne.n	80051be <USB_EPStartXfer+0xea2>
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	673b      	str	r3, [r7, #112]	; 0x70
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	b29b      	uxth	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005198:	4413      	add	r3, r2
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
 800519c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	011a      	lsls	r2, r3, #4
 80051aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	891b      	ldrh	r3, [r3, #8]
 80051ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f001 f80b 	bl	8006208 <USB_WritePMA>
 80051f2:	e1d8      	b.n	80055a6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d178      	bne.n	80052f6 <USB_EPStartXfer+0xfda>
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005228:	4413      	add	r3, r2
 800522a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	011a      	lsls	r2, r3, #4
 800523c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005240:	4413      	add	r3, r2
 8005242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800524a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <USB_EPStartXfer+0xf64>
 8005252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525e:	b29a      	uxth	r2, r3
 8005260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	e06b      	b.n	8005358 <USB_EPStartXfer+0x103c>
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	2b3e      	cmp	r3, #62	; 0x3e
 8005286:	d818      	bhi.n	80052ba <USB_EPStartXfer+0xf9e>
 8005288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <USB_EPStartXfer+0xf8c>
 800529e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052a2:	3301      	adds	r3, #1
 80052a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	e04e      	b.n	8005358 <USB_EPStartXfer+0x103c>
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <USB_EPStartXfer+0xfbe>
 80052d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052d4:	3b01      	subs	r3, #1
 80052d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052de:	b29b      	uxth	r3, r3
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e030      	b.n	8005358 <USB_EPStartXfer+0x103c>
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d128      	bne.n	8005358 <USB_EPStartXfer+0x103c>
 8005306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800532a:	4413      	add	r3, r2
 800532c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005342:	4413      	add	r3, r2
 8005344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800534c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005350:	b29a      	uxth	r2, r3
 8005352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005356:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	891b      	ldrh	r3, [r3, #8]
 8005364:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6959      	ldr	r1, [r3, #20]
 8005374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005378:	b29b      	uxth	r3, r3
 800537a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800537e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005382:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005386:	6800      	ldr	r0, [r0, #0]
 8005388:	f000 ff3e 	bl	8006208 <USB_WritePMA>
          ep->xfer_buff += len;
 800538c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	441a      	add	r2, r3
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d90f      	bls.n	80053e6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80053c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	621a      	str	r2, [r3, #32]
 80053e4:	e00e      	b.n	8005404 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2200      	movs	r2, #0
 8005402:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80cc 	beq.w	80055a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d178      	bne.n	800551e <USB_EPStartXfer+0x1202>
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005450:	4413      	add	r3, r2
 8005452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005468:	4413      	add	r3, r2
 800546a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d116      	bne.n	80054a8 <USB_EPStartXfer+0x118c>
 800547a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005486:	b29a      	uxth	r2, r3
 8005488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e064      	b.n	8005572 <USB_EPStartXfer+0x1256>
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d818      	bhi.n	80054e2 <USB_EPStartXfer+0x11c6>
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <USB_EPStartXfer+0x11b4>
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ca:	3301      	adds	r3, #1
 80054cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e047      	b.n	8005572 <USB_EPStartXfer+0x1256>
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <USB_EPStartXfer+0x11e6>
 80054f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005506:	b29b      	uxth	r3, r3
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	b29b      	uxth	r3, r3
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29a      	uxth	r2, r3
 8005516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e029      	b.n	8005572 <USB_EPStartXfer+0x1256>
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d121      	bne.n	8005572 <USB_EPStartXfer+0x1256>
 800552e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005544:	4413      	add	r3, r2
 8005546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800554a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	011a      	lsls	r2, r3, #4
 8005558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800555c:	4413      	add	r3, r2
 800555e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	895b      	ldrh	r3, [r3, #10]
 800557e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6959      	ldr	r1, [r3, #20]
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005598:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800559c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055a0:	6800      	ldr	r0, [r0, #0]
 80055a2:	f000 fe31 	bl	8006208 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055c8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	8013      	strh	r3, [r2, #0]
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80055de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055e6:	8812      	ldrh	r2, [r2, #0]
 80055e8:	f082 0210 	eor.w	r2, r2, #16
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80055f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	f082 0220 	eor.w	r2, r2, #32
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
 800563e:	f000 bc9f 	b.w	8005f80 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 80ae 	bne.w	80057b0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d917      	bls.n	80056a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	619a      	str	r2, [r3, #24]
 800569e:	e00e      	b.n	80056be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056e2:	4413      	add	r3, r2
 80056e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <USB_EPStartXfer+0x141e>
 800570c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005718:	b29a      	uxth	r2, r3
 800571a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e3e8      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
 800573a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573e:	2b3e      	cmp	r3, #62	; 0x3e
 8005740:	d818      	bhi.n	8005774 <USB_EPStartXfer+0x1458>
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800574c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <USB_EPStartXfer+0x1446>
 8005758:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800575c:	3301      	adds	r3, #1
 800575e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005766:	b29b      	uxth	r3, r3
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	b29a      	uxth	r2, r3
 800576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e3cb      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
 8005774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <USB_EPStartXfer+0x1478>
 800578a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800578e:	3b01      	subs	r3, #1
 8005790:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005798:	b29b      	uxth	r3, r3
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e3ad      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	78db      	ldrb	r3, [r3, #3]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	f040 8200 	bne.w	8005bc2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 8091 	bne.w	80058f6 <USB_EPStartXfer+0x15da>
 80057d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f8:	4413      	add	r3, r2
 80057fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	011a      	lsls	r2, r3, #4
 800580c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005810:	4413      	add	r3, r2
 8005812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d116      	bne.n	8005858 <USB_EPStartXfer+0x153c>
 800582a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e083      	b.n	8005960 <USB_EPStartXfer+0x1644>
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b3e      	cmp	r3, #62	; 0x3e
 8005866:	d820      	bhi.n	80058aa <USB_EPStartXfer+0x158e>
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <USB_EPStartXfer+0x157c>
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005892:	3301      	adds	r3, #1
 8005894:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	e05a      	b.n	8005960 <USB_EPStartXfer+0x1644>
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <USB_EPStartXfer+0x15be>
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d4:	3b01      	subs	r3, #1
 80058d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058de:	b29b      	uxth	r3, r3
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e034      	b.n	8005960 <USB_EPStartXfer+0x1644>
 80058f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d12c      	bne.n	8005960 <USB_EPStartXfer+0x1644>
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592a:	4413      	add	r3, r2
 800592c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005942:	4413      	add	r3, r2
 8005944:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 8091 	bne.w	8005aa2 <USB_EPStartXfer+0x1786>
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059a4:	4413      	add	r3, r2
 80059a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	011a      	lsls	r2, r3, #4
 80059b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059bc:	4413      	add	r3, r2
 80059be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d116      	bne.n	8005a04 <USB_EPStartXfer+0x16e8>
 80059d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	e07c      	b.n	8005afe <USB_EPStartXfer+0x17e2>
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b3e      	cmp	r3, #62	; 0x3e
 8005a12:	d820      	bhi.n	8005a56 <USB_EPStartXfer+0x173a>
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <USB_EPStartXfer+0x1728>
 8005a3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	029b      	lsls	r3, r3, #10
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e053      	b.n	8005afe <USB_EPStartXfer+0x17e2>
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <USB_EPStartXfer+0x176a>
 8005a7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	e02d      	b.n	8005afe <USB_EPStartXfer+0x17e2>
 8005aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d125      	bne.n	8005afe <USB_EPStartXfer+0x17e2>
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ac8:	4413      	add	r3, r2
 8005aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005afc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 81fe 	beq.w	8005f0c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USB_EPStartXfer+0x182c>
 8005b3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 81db 	bne.w	8005f0c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b56:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 81d4 	bne.w	8005f0c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	441a      	add	r2, r3
 8005ba8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	8013      	strh	r3, [r2, #0]
 8005bc0:	e1a4      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	f040 819a 	bne.w	8005f08 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d917      	bls.n	8005c20 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	1ad2      	subs	r2, r2, r3
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	619a      	str	r2, [r3, #24]
 8005c1e:	e00e      	b.n	8005c3e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d178      	bne.n	8005d40 <USB_EPStartXfer+0x1a24>
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c72:	4413      	add	r3, r2
 8005c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	011a      	lsls	r2, r3, #4
 8005c86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d116      	bne.n	8005cca <USB_EPStartXfer+0x19ae>
 8005c9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e06b      	b.n	8005da2 <USB_EPStartXfer+0x1a86>
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd0:	d818      	bhi.n	8005d04 <USB_EPStartXfer+0x19e8>
 8005cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <USB_EPStartXfer+0x19d6>
 8005ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cec:	3301      	adds	r3, #1
 8005cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	029b      	lsls	r3, r3, #10
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e04e      	b.n	8005da2 <USB_EPStartXfer+0x1a86>
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <USB_EPStartXfer+0x1a08>
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e030      	b.n	8005da2 <USB_EPStartXfer+0x1a86>
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d128      	bne.n	8005da2 <USB_EPStartXfer+0x1a86>
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	4413      	add	r3, r2
 8005d76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d178      	bne.n	8005eb2 <USB_EPStartXfer+0x1b96>
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <USB_EPStartXfer+0x1b20>
 8005e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e067      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	2b3e      	cmp	r3, #62	; 0x3e
 8005e42:	d818      	bhi.n	8005e76 <USB_EPStartXfer+0x1b5a>
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <USB_EPStartXfer+0x1b48>
 8005e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e04a      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <USB_EPStartXfer+0x1b7a>
 8005e8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e90:	3b01      	subs	r3, #1
 8005e92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	029b      	lsls	r3, r3, #10
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	e02c      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d124      	bne.n	8005f0c <USB_EPStartXfer+0x1bf0>
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed8:	4413      	add	r3, r2
 8005eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e001      	b.n	8005f0c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e03a      	b.n	8005f82 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f36:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	441a      	add	r2, r3
 8005f68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d020      	beq.n	8005fe0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	81bb      	strh	r3, [r7, #12]
 8005fb6:	89bb      	ldrh	r3, [r7, #12]
 8005fb8:	f083 0310 	eor.w	r3, r3, #16
 8005fbc:	81bb      	strh	r3, [r7, #12]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	89bb      	ldrh	r3, [r7, #12]
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]
 8005fde:	e01f      	b.n	8006020 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	81fb      	strh	r3, [r7, #14]
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ffe:	81fb      	strh	r3, [r7, #14]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	7b1b      	ldrb	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 809d 	bne.w	800617a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d04c      	beq.n	80060e2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	823b      	strh	r3, [r7, #16]
 8006056:	8a3b      	ldrh	r3, [r7, #16]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <USB_EPClearStall+0x6c>
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	81fb      	strh	r3, [r7, #14]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	89fb      	ldrh	r3, [r7, #14]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	78db      	ldrb	r3, [r3, #3]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d06c      	beq.n	800617a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b6:	81bb      	strh	r3, [r7, #12]
 80060b8:	89bb      	ldrh	r3, [r7, #12]
 80060ba:	f083 0320 	eor.w	r3, r3, #32
 80060be:	81bb      	strh	r3, [r7, #12]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	89bb      	ldrh	r3, [r7, #12]
 80060cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	b29b      	uxth	r3, r3
 80060de:	8013      	strh	r3, [r2, #0]
 80060e0:	e04b      	b.n	800617a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	82fb      	strh	r3, [r7, #22]
 80060f0:	8afb      	ldrh	r3, [r7, #22]
 80060f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <USB_EPClearStall+0x106>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	82bb      	strh	r3, [r7, #20]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8abb      	ldrh	r3, [r7, #20]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	827b      	strh	r3, [r7, #18]
 800614a:	8a7b      	ldrh	r3, [r7, #18]
 800614c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006150:	827b      	strh	r3, [r7, #18]
 8006152:	8a7b      	ldrh	r3, [r7, #18]
 8006154:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006158:	827b      	strh	r3, [r7, #18]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	8a7b      	ldrh	r3, [r7, #18]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2280      	movs	r2, #128	; 0x80
 800619c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061e6:	68fb      	ldr	r3, [r7, #12]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006208:	b480      	push	{r7}
 800620a:	b08d      	sub	sp, #52	; 0x34
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	80fb      	strh	r3, [r7, #6]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800621e:	88bb      	ldrh	r3, [r7, #4]
 8006220:	3301      	adds	r3, #1
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	005a      	lsls	r2, r3, #1
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006240:	e01e      	b.n	8006280 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	b29a      	uxth	r2, r3
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	3302      	adds	r3, #2
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	3302      	adds	r3, #2
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	3301      	adds	r3, #1
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	3b01      	subs	r3, #1
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1dd      	bne.n	8006242 <USB_WritePMA+0x3a>
  }
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	3734      	adds	r7, #52	; 0x34
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006292:	b480      	push	{r7}
 8006294:	b08b      	sub	sp, #44	; 0x2c
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	4611      	mov	r1, r2
 800629e:	461a      	mov	r2, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	80fb      	strh	r3, [r7, #6]
 80062a4:	4613      	mov	r3, r2
 80062a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062a8:	88bb      	ldrh	r3, [r7, #4]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	005a      	lsls	r2, r3, #1
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	e01b      	b.n	8006304 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	3302      	adds	r3, #2
 80062d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	3301      	adds	r3, #1
 80062e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	3302      	adds	r3, #2
 80062fc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	3b01      	subs	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e0      	bne.n	80062cc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	701a      	strb	r2, [r3, #0]
  }
}
 8006326:	bf00      	nop
 8006328:	372c      	adds	r7, #44	; 0x2c
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7c1b      	ldrb	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d115      	bne.n	8006374 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634c:	2202      	movs	r2, #2
 800634e:	2181      	movs	r1, #129	; 0x81
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 fe86 	bl	8008062 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800635c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006360:	2202      	movs	r2, #2
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 fe7c 	bl	8008062 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006372:	e012      	b.n	800639a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	2202      	movs	r2, #2
 8006378:	2181      	movs	r1, #129	; 0x81
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fe71 	bl	8008062 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006386:	2340      	movs	r3, #64	; 0x40
 8006388:	2202      	movs	r2, #2
 800638a:	2101      	movs	r1, #1
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fe68 	bl	8008062 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800639a:	2308      	movs	r3, #8
 800639c:	2203      	movs	r2, #3
 800639e:	2182      	movs	r1, #130	; 0x82
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fe5e 	bl	8008062 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063b0:	f001 ff7e 	bl	80082b0 <USBD_static_malloc>
 80063b4:	4602      	mov	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	e026      	b.n	800641a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006400:	2101      	movs	r1, #1
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 ff1e 	bl	8008244 <USBD_LL_PrepareReceive>
 8006408:	e007      	b.n	800641a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	2101      	movs	r1, #1
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 ff15 	bl	8008244 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800641a:	7bfb      	ldrb	r3, [r7, #15]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006434:	2181      	movs	r1, #129	; 0x81
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fe39 	bl	80080ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006442:	2101      	movs	r1, #1
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fe32 	bl	80080ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006452:	2182      	movs	r1, #130	; 0x82
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fe2a 	bl	80080ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00e      	beq.n	8006488 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	4618      	mov	r0, r3
 800647c:	f001 ff24 	bl	80082c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d039      	beq.n	8006530 <USBD_CDC_Setup+0x9e>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d17f      	bne.n	80065c0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	88db      	ldrh	r3, [r3, #6]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d029      	beq.n	800651c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da11      	bge.n	80064f6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80064de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	88d2      	ldrh	r2, [r2, #6]
 80064e4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	88db      	ldrh	r3, [r3, #6]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fa09 	bl	8007906 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80064f4:	e06b      	b.n	80065ce <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785a      	ldrb	r2, [r3, #1]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	88db      	ldrh	r3, [r3, #6]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800650c:	6939      	ldr	r1, [r7, #16]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88db      	ldrh	r3, [r3, #6]
 8006512:	461a      	mov	r2, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fa24 	bl	8007962 <USBD_CtlPrepareRx>
      break;
 800651a:	e058      	b.n	80065ce <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	7850      	ldrb	r0, [r2, #1]
 8006528:	2200      	movs	r2, #0
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	4798      	blx	r3
      break;
 800652e:	e04e      	b.n	80065ce <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b0b      	cmp	r3, #11
 8006536:	d02e      	beq.n	8006596 <USBD_CDC_Setup+0x104>
 8006538:	2b0b      	cmp	r3, #11
 800653a:	dc38      	bgt.n	80065ae <USBD_CDC_Setup+0x11c>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <USBD_CDC_Setup+0xb4>
 8006540:	2b0a      	cmp	r3, #10
 8006542:	d014      	beq.n	800656e <USBD_CDC_Setup+0xdc>
 8006544:	e033      	b.n	80065ae <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	2b03      	cmp	r3, #3
 800654e:	d107      	bne.n	8006560 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	2202      	movs	r2, #2
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f9d4 	bl	8007906 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800655e:	e02e      	b.n	80065be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 f965 	bl	8007832 <USBD_CtlError>
            ret = USBD_FAIL;
 8006568:	2302      	movs	r3, #2
 800656a:	75fb      	strb	r3, [r7, #23]
          break;
 800656c:	e027      	b.n	80065be <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	2b03      	cmp	r3, #3
 8006576:	d107      	bne.n	8006588 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006578:	f107 030f 	add.w	r3, r7, #15
 800657c:	2201      	movs	r2, #1
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 f9c0 	bl	8007906 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006586:	e01a      	b.n	80065be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 f951 	bl	8007832 <USBD_CtlError>
            ret = USBD_FAIL;
 8006590:	2302      	movs	r3, #2
 8006592:	75fb      	strb	r3, [r7, #23]
          break;
 8006594:	e013      	b.n	80065be <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659c:	2b03      	cmp	r3, #3
 800659e:	d00d      	beq.n	80065bc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f945 	bl	8007832 <USBD_CtlError>
            ret = USBD_FAIL;
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065ac:	e006      	b.n	80065bc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f93e 	bl	8007832 <USBD_CtlError>
          ret = USBD_FAIL;
 80065b6:	2302      	movs	r3, #2
 80065b8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ba:	e000      	b.n	80065be <USBD_CDC_Setup+0x12c>
          break;
 80065bc:	bf00      	nop
      }
      break;
 80065be:	e006      	b.n	80065ce <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f935 	bl	8007832 <USBD_CtlError>
      ret = USBD_FAIL;
 80065c8:	2302      	movs	r3, #2
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	bf00      	nop
  }

  return ret;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065f2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d03a      	beq.n	8006674 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	331c      	adds	r3, #28
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d029      	beq.n	8006668 <USBD_CDC_DataIn+0x90>
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	331c      	adds	r3, #28
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	78f9      	ldrb	r1, [r7, #3]
 8006628:	68b8      	ldr	r0, [r7, #8]
 800662a:	460b      	mov	r3, r1
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4403      	add	r3, r0
 8006634:	3338      	adds	r3, #56	; 0x38
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	fbb2 f1f3 	udiv	r1, r2, r3
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d110      	bne.n	8006668 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	331c      	adds	r3, #28
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800665a:	78f9      	ldrb	r1, [r7, #3]
 800665c:	2300      	movs	r3, #0
 800665e:	2200      	movs	r2, #0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fdcc 	bl	80081fe <USBD_LL_Transmit>
 8006666:	e003      	b.n	8006670 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e000      	b.n	8006676 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006674:	2302      	movs	r3, #2
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fdf7 	bl	800828a <USBD_LL_GetRxDataSize>
 800669c:	4602      	mov	r2, r0
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066c2:	4611      	mov	r1, r2
 80066c4:	4798      	blx	r3

    return USBD_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d015      	beq.n	800671a <USBD_CDC_EP0_RxReady+0x46>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066f4:	2bff      	cmp	r3, #255	; 0xff
 80066f6:	d010      	beq.n	800671a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006706:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800670e:	b292      	uxth	r2, r2
 8006710:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2243      	movs	r2, #67	; 0x43
 8006730:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006732:	4b03      	ldr	r3, [pc, #12]	; (8006740 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000094 	.word	0x20000094

08006744 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2243      	movs	r2, #67	; 0x43
 8006750:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006752:	4b03      	ldr	r3, [pc, #12]	; (8006760 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20000050 	.word	0x20000050

08006764 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2243      	movs	r2, #67	; 0x43
 8006770:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	200000d8 	.word	0x200000d8

08006784 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	220a      	movs	r2, #10
 8006790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006792:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	2000000c 	.word	0x2000000c

080067a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01c      	beq.n	800687c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800686a:	b29b      	uxth	r3, r3
 800686c:	2181      	movs	r1, #129	; 0x81
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fcc5 	bl	80081fe <USBD_LL_Transmit>

      return USBD_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e002      	b.n	800687e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	7c1b      	ldrb	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fcc5 	bl	8008244 <USBD_LL_PrepareReceive>
 80068ba:	e007      	b.n	80068cc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	2101      	movs	r1, #1
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fcbc 	bl	8008244 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068ee:	2302      	movs	r3, #2
 80068f0:	e01a      	b.n	8006928 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	79fa      	ldrb	r2, [r7, #7]
 800691e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 fb29 	bl	8007f78 <USBD_LL_Init>

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d006      	beq.n	8006952 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	e001      	b.n	8006956 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006952:	2302      	movs	r3, #2
 8006954:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fb5e 	bl	800802c <USBD_LL_Start>

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	4611      	mov	r1, r2
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	4611      	mov	r1, r2
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3

  return USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fed8 	bl	80077ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d016      	beq.n	8006a5c <USBD_LL_SetupStage+0x6a>
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d81c      	bhi.n	8006a6c <USBD_LL_SetupStage+0x7a>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <USBD_LL_SetupStage+0x4a>
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d008      	beq.n	8006a4c <USBD_LL_SetupStage+0x5a>
 8006a3a:	e017      	b.n	8006a6c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9cb 	bl	8006de0 <USBD_StdDevReq>
      break;
 8006a4a:	e01a      	b.n	8006a82 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa2d 	bl	8006eb4 <USBD_StdItfReq>
      break;
 8006a5a:	e012      	b.n	8006a82 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa6d 	bl	8006f44 <USBD_StdEPReq>
      break;
 8006a6a:	e00a      	b.n	8006a82 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fb36 	bl	80080ec <USBD_LL_StallEP>
      break;
 8006a80:	bf00      	nop
  }

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	460b      	mov	r3, r1
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d14b      	bne.n	8006b38 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006aa6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d134      	bne.n	8006b1c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d919      	bls.n	8006af2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d203      	bcs.n	8006ae0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	e002      	b.n	8006ae6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 ff57 	bl	800799e <USBD_CtlContinueRx>
 8006af0:	e038      	b.n	8006b64 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d105      	bne.n	8006b14 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 ff54 	bl	80079c2 <USBD_CtlSendStatus>
 8006b1a:	e023      	b.n	8006b64 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d11e      	bne.n	8006b64 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b2e:	2100      	movs	r1, #0
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f001 fadb 	bl	80080ec <USBD_LL_StallEP>
 8006b36:	e015      	b.n	8006b64 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d108      	bne.n	8006b60 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	7afa      	ldrb	r2, [r7, #11]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	4798      	blx	r3
 8006b5e:	e001      	b.n	8006b64 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e000      	b.n	8006b66 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	460b      	mov	r3, r1
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d17f      	bne.n	8006c82 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3314      	adds	r3, #20
 8006b86:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d15c      	bne.n	8006c4c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d915      	bls.n	8006bca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fec1 	bl	800793e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f001 fb3e 	bl	8008244 <USBD_LL_PrepareReceive>
 8006bc8:	e04e      	b.n	8006c68 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	6912      	ldr	r2, [r2, #16]
 8006bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bd6:	fb01 f202 	mul.w	r2, r1, r2
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11c      	bne.n	8006c1a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d316      	bcc.n	8006c1a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d20f      	bcs.n	8006c1a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fe9d 	bl	800793e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2100      	movs	r1, #0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 fb16 	bl	8008244 <USBD_LL_PrepareReceive>
 8006c18:	e026      	b.n	8006c68 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d105      	bne.n	8006c3c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 fa54 	bl	80080ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fecf 	bl	80079e8 <USBD_CtlReceiveStatus>
 8006c4a:	e00d      	b.n	8006c68 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d004      	beq.n	8006c60 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 fa42 	bl	80080ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d11d      	bne.n	8006cae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fe81 	bl	800697a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c80:	e015      	b.n	8006cae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d108      	bne.n	8006caa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	7afa      	ldrb	r2, [r7, #11]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	4798      	blx	r3
 8006ca8:	e001      	b.n	8006cae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
 8006cac:	e000      	b.n	8006cb0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 f9cb 	bl	8008062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2240      	movs	r2, #64	; 0x40
 8006cd8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2180      	movs	r1, #128	; 0x80
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f9bd 	bl	8008062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2240      	movs	r2, #64	; 0x40
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6852      	ldr	r2, [r2, #4]
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d105      	bne.n	8006d9e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d10b      	bne.n	8006dd4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d005      	beq.n	8006e06 <USBD_StdDevReq+0x26>
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d84f      	bhi.n	8006e9e <USBD_StdDevReq+0xbe>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <USBD_StdDevReq+0x36>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d14b      	bne.n	8006e9e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      break;
 8006e14:	e048      	b.n	8006ea8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d839      	bhi.n	8006e92 <USBD_StdDevReq+0xb2>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_StdDevReq+0x44>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e89 	.word	0x08006e89
 8006e2c:	08006e93 	.word	0x08006e93
 8006e30:	08006e7f 	.word	0x08006e7f
 8006e34:	08006e93 	.word	0x08006e93
 8006e38:	08006e57 	.word	0x08006e57
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e93 	.word	0x08006e93
 8006e44:	08006e6b 	.word	0x08006e6b
 8006e48:	08006e61 	.word	0x08006e61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9dc 	bl	800720c <USBD_GetDescriptor>
          break;
 8006e54:	e022      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb3f 	bl	80074dc <USBD_SetAddress>
          break;
 8006e5e:	e01d      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fb7e 	bl	8007564 <USBD_SetConfig>
          break;
 8006e68:	e018      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fc07 	bl	8007680 <USBD_GetConfig>
          break;
 8006e72:	e013      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc37 	bl	80076ea <USBD_GetStatus>
          break;
 8006e7c:	e00e      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc65 	bl	8007750 <USBD_SetFeature>
          break;
 8006e86:	e009      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc74 	bl	8007778 <USBD_ClrFeature>
          break;
 8006e90:	e004      	b.n	8006e9c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fccc 	bl	8007832 <USBD_CtlError>
          break;
 8006e9a:	bf00      	nop
      }
      break;
 8006e9c:	e004      	b.n	8006ea8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fcc6 	bl	8007832 <USBD_CtlError>
      break;
 8006ea6:	bf00      	nop
  }

  return ret;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop

08006eb4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d005      	beq.n	8006eda <USBD_StdItfReq+0x26>
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d82e      	bhi.n	8006f30 <USBD_StdItfReq+0x7c>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <USBD_StdItfReq+0x26>
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d12a      	bne.n	8006f30 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d81d      	bhi.n	8006f22 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	889b      	ldrh	r3, [r3, #4]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d813      	bhi.n	8006f18 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d110      	bne.n	8006f2c <USBD_StdItfReq+0x78>
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fd56 	bl	80079c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f16:	e009      	b.n	8006f2c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fc89 	bl	8007832 <USBD_CtlError>
          break;
 8006f20:	e004      	b.n	8006f2c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc84 	bl	8007832 <USBD_CtlError>
          break;
 8006f2a:	e000      	b.n	8006f2e <USBD_StdItfReq+0x7a>
          break;
 8006f2c:	bf00      	nop
      }
      break;
 8006f2e:	e004      	b.n	8006f3a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc7d 	bl	8007832 <USBD_CtlError>
      break;
 8006f38:	bf00      	nop
  }

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	889b      	ldrh	r3, [r3, #4]
 8006f56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d007      	beq.n	8006f74 <USBD_StdEPReq+0x30>
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	f200 8146 	bhi.w	80071f6 <USBD_StdEPReq+0x2b2>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <USBD_StdEPReq+0x40>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	f040 8141 	bne.w	80071f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
      break;
 8006f82:	e13d      	b.n	8007200 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d10a      	bne.n	8006fa6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	e12d      	b.n	8007202 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	785b      	ldrb	r3, [r3, #1]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d007      	beq.n	8006fbe <USBD_StdEPReq+0x7a>
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	f300 811b 	bgt.w	80071ea <USBD_StdEPReq+0x2a6>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d072      	beq.n	800709e <USBD_StdEPReq+0x15a>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d03a      	beq.n	8007032 <USBD_StdEPReq+0xee>
 8006fbc:	e115      	b.n	80071ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d002      	beq.n	8006fce <USBD_StdEPReq+0x8a>
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d015      	beq.n	8006ff8 <USBD_StdEPReq+0xb4>
 8006fcc:	e02b      	b.n	8007026 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <USBD_StdEPReq+0xaa>
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d009      	beq.n	8006fee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f884 	bl	80080ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fe4:	2180      	movs	r1, #128	; 0x80
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f880 	bl	80080ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fec:	e020      	b.n	8007030 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc1e 	bl	8007832 <USBD_CtlError>
              break;
 8006ff6:	e01b      	b.n	8007030 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	885b      	ldrh	r3, [r3, #2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10e      	bne.n	800701e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <USBD_StdEPReq+0xda>
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d008      	beq.n	800701e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f867 	bl	80080ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fccf 	bl	80079c2 <USBD_CtlSendStatus>

              break;
 8007024:	e004      	b.n	8007030 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fc02 	bl	8007832 <USBD_CtlError>
              break;
 800702e:	bf00      	nop
          }
          break;
 8007030:	e0e0      	b.n	80071f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007038:	2b02      	cmp	r3, #2
 800703a:	d002      	beq.n	8007042 <USBD_StdEPReq+0xfe>
 800703c:	2b03      	cmp	r3, #3
 800703e:	d015      	beq.n	800706c <USBD_StdEPReq+0x128>
 8007040:	e026      	b.n	8007090 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <USBD_StdEPReq+0x11e>
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d009      	beq.n	8007062 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f84a 	bl	80080ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 f846 	bl	80080ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007060:	e01c      	b.n	800709c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fbe4 	bl	8007832 <USBD_CtlError>
              break;
 800706a:	e017      	b.n	800709c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	885b      	ldrh	r3, [r3, #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d112      	bne.n	800709a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 f851 	bl	800812a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fc9a 	bl	80079c2 <USBD_CtlSendStatus>
              }
              break;
 800708e:	e004      	b.n	800709a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbcd 	bl	8007832 <USBD_CtlError>
              break;
 8007098:	e000      	b.n	800709c <USBD_StdEPReq+0x158>
              break;
 800709a:	bf00      	nop
          }
          break;
 800709c:	e0aa      	b.n	80071f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d002      	beq.n	80070ae <USBD_StdEPReq+0x16a>
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d032      	beq.n	8007112 <USBD_StdEPReq+0x1ce>
 80070ac:	e097      	b.n	80071de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <USBD_StdEPReq+0x180>
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d004      	beq.n	80070c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fbb8 	bl	8007832 <USBD_CtlError>
                break;
 80070c2:	e091      	b.n	80071e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0b      	bge.n	80070e4 <USBD_StdEPReq+0x1a0>
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3310      	adds	r3, #16
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	e00b      	b.n	80070fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	3304      	adds	r3, #4
 80070fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2202      	movs	r2, #2
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fbfb 	bl	8007906 <USBD_CtlSendData>
              break;
 8007110:	e06a      	b.n	80071e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da11      	bge.n	800713e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3318      	adds	r3, #24
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d117      	bne.n	8007164 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fb7b 	bl	8007832 <USBD_CtlError>
                  break;
 800713c:	e054      	b.n	80071e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb68 	bl	8007832 <USBD_CtlError>
                  break;
 8007162:	e041      	b.n	80071e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	da0b      	bge.n	8007184 <USBD_StdEPReq+0x240>
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	3310      	adds	r3, #16
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	3304      	adds	r3, #4
 8007182:	e00b      	b.n	800719c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	3304      	adds	r3, #4
 800719c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <USBD_StdEPReq+0x266>
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b80      	cmp	r3, #128	; 0x80
 80071a8:	d103      	bne.n	80071b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e00e      	b.n	80071d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 ffd6 	bl	8008168 <USBD_LL_IsStallEP>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2201      	movs	r2, #1
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e002      	b.n	80071d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2202      	movs	r2, #2
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fb95 	bl	8007906 <USBD_CtlSendData>
              break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb26 	bl	8007832 <USBD_CtlError>
              break;
 80071e6:	bf00      	nop
          }
          break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb20 	bl	8007832 <USBD_CtlError>
          break;
 80071f2:	bf00      	nop
      }
      break;
 80071f4:	e004      	b.n	8007200 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb1a 	bl	8007832 <USBD_CtlError>
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	2b06      	cmp	r3, #6
 800722e:	f200 8128 	bhi.w	8007482 <USBD_GetDescriptor+0x276>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_GetDescriptor+0x2c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007255 	.word	0x08007255
 800723c:	0800726d 	.word	0x0800726d
 8007240:	080072ad 	.word	0x080072ad
 8007244:	08007483 	.word	0x08007483
 8007248:	08007483 	.word	0x08007483
 800724c:	08007423 	.word	0x08007423
 8007250:	0800744f 	.word	0x0800744f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      break;
 800726a:	e112      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	2202      	movs	r2, #2
 800728c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800728e:	e100      	b.n	8007492 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e0f2      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	885b      	ldrh	r3, [r3, #2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	f200 80ac 	bhi.w	8007410 <USBD_GetDescriptor+0x204>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_GetDescriptor+0xb4>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	0800730d 	.word	0x0800730d
 80072c8:	08007341 	.word	0x08007341
 80072cc:	08007375 	.word	0x08007375
 80072d0:	080073a9 	.word	0x080073a9
 80072d4:	080073dd 	.word	0x080073dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fa:	e091      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa97 	bl	8007832 <USBD_CtlError>
            err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
          break;
 800730a:	e089      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e077      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa7d 	bl	8007832 <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e06f      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e05d      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa63 	bl	8007832 <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e055      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e043      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa49 	bl	8007832 <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e03b      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e029      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa2f 	bl	8007832 <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e021      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7c12      	ldrb	r2, [r2, #16]
 80073f4:	f107 0108 	add.w	r1, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fe:	e00f      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa15 	bl	8007832 <USBD_CtlError>
            err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
          break;
 800740e:	e007      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa0d 	bl	8007832 <USBD_CtlError>
          err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800741e:	e038      	b.n	8007492 <USBD_GetDescriptor+0x286>
 8007420:	e037      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c1b      	ldrb	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f107 0208 	add.w	r2, r7, #8
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
 800743a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800743c:	e029      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9f6 	bl	8007832 <USBD_CtlError>
        err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	e021      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7c1b      	ldrb	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f107 0208 	add.w	r2, r7, #8
 8007462:	4610      	mov	r0, r2
 8007464:	4798      	blx	r3
 8007466:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	2207      	movs	r2, #7
 800746e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007470:	e00f      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9dc 	bl	8007832 <USBD_CtlError>
        err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	e007      	b.n	8007492 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9d4 	bl	8007832 <USBD_CtlError>
      err++;
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	3301      	adds	r3, #1
 800748e:	72fb      	strb	r3, [r7, #11]
      break;
 8007490:	bf00      	nop
  }

  if (err != 0U)
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11c      	bne.n	80074d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007498:	893b      	ldrh	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d011      	beq.n	80074c2 <USBD_GetDescriptor+0x2b6>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	88db      	ldrh	r3, [r3, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88da      	ldrh	r2, [r3, #6]
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bf28      	it	cs
 80074b0:	4613      	movcs	r3, r2
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	461a      	mov	r2, r3
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa22 	bl	8007906 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88db      	ldrh	r3, [r3, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa79 	bl	80079c2 <USBD_CtlSendStatus>
 80074d0:	e000      	b.n	80074d4 <USBD_GetDescriptor+0x2c8>
    return;
 80074d2:	bf00      	nop
    }
  }
}
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	889b      	ldrh	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d130      	bne.n	8007550 <USBD_SetAddress+0x74>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d12c      	bne.n	8007550 <USBD_SetAddress+0x74>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	2b7f      	cmp	r3, #127	; 0x7f
 80074fc:	d828      	bhi.n	8007550 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	885b      	ldrh	r3, [r3, #2]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	2b03      	cmp	r3, #3
 8007512:	d104      	bne.n	800751e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f98b 	bl	8007832 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751c:	e01d      	b.n	800755a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7bfa      	ldrb	r2, [r7, #15]
 8007522:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fe48 	bl	80081c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa46 	bl	80079c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	e009      	b.n	800755a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754e:	e004      	b.n	800755a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f96d 	bl	8007832 <USBD_CtlError>
  }
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	885b      	ldrh	r3, [r3, #2]
 8007572:	b2da      	uxtb	r2, r3
 8007574:	4b41      	ldr	r3, [pc, #260]	; (800767c <USBD_SetConfig+0x118>)
 8007576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007578:	4b40      	ldr	r3, [pc, #256]	; (800767c <USBD_SetConfig+0x118>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d904      	bls.n	800758a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f955 	bl	8007832 <USBD_CtlError>
 8007588:	e075      	b.n	8007676 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	2b02      	cmp	r3, #2
 8007592:	d002      	beq.n	800759a <USBD_SetConfig+0x36>
 8007594:	2b03      	cmp	r3, #3
 8007596:	d023      	beq.n	80075e0 <USBD_SetConfig+0x7c>
 8007598:	e062      	b.n	8007660 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800759a:	4b38      	ldr	r3, [pc, #224]	; (800767c <USBD_SetConfig+0x118>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80075a2:	4b36      	ldr	r3, [pc, #216]	; (800767c <USBD_SetConfig+0x118>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2203      	movs	r2, #3
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075b4:	4b31      	ldr	r3, [pc, #196]	; (800767c <USBD_SetConfig+0x118>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff f9e7 	bl	800698e <USBD_SetClassConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d104      	bne.n	80075d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f932 	bl	8007832 <USBD_CtlError>
            return;
 80075ce:	e052      	b.n	8007676 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9f6 	bl	80079c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075d6:	e04e      	b.n	8007676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f9f2 	bl	80079c2 <USBD_CtlSendStatus>
        break;
 80075de:	e04a      	b.n	8007676 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075e0:	4b26      	ldr	r3, [pc, #152]	; (800767c <USBD_SetConfig+0x118>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d112      	bne.n	800760e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075f0:	4b22      	ldr	r3, [pc, #136]	; (800767c <USBD_SetConfig+0x118>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <USBD_SetConfig+0x118>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f9e3 	bl	80069cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9db 	bl	80079c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800760c:	e033      	b.n	8007676 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800760e:	4b1b      	ldr	r3, [pc, #108]	; (800767c <USBD_SetConfig+0x118>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d01d      	beq.n	8007658 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff f9d1 	bl	80069cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <USBD_SetConfig+0x118>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <USBD_SetConfig+0x118>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f9a7 	bl	800698e <USBD_SetClassConfig>
 8007640:	4603      	mov	r3, r0
 8007642:	2b02      	cmp	r3, #2
 8007644:	d104      	bne.n	8007650 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8f2 	bl	8007832 <USBD_CtlError>
            return;
 800764e:	e012      	b.n	8007676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9b6 	bl	80079c2 <USBD_CtlSendStatus>
        break;
 8007656:	e00e      	b.n	8007676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f9b2 	bl	80079c2 <USBD_CtlSendStatus>
        break;
 800765e:	e00a      	b.n	8007676 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8e5 	bl	8007832 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <USBD_SetConfig+0x118>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff f9ac 	bl	80069cc <USBD_ClrClassConfig>
        break;
 8007674:	bf00      	nop
    }
  }
}
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	200002b0 	.word	0x200002b0

08007680 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	88db      	ldrh	r3, [r3, #6]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d004      	beq.n	800769c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f8cc 	bl	8007832 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800769a:	e022      	b.n	80076e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	dc02      	bgt.n	80076ac <USBD_GetConfig+0x2c>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dc03      	bgt.n	80076b2 <USBD_GetConfig+0x32>
 80076aa:	e015      	b.n	80076d8 <USBD_GetConfig+0x58>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetConfig+0x48>
 80076b0:	e012      	b.n	80076d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3308      	adds	r3, #8
 80076bc:	2201      	movs	r2, #1
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f920 	bl	8007906 <USBD_CtlSendData>
        break;
 80076c6:	e00c      	b.n	80076e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3304      	adds	r3, #4
 80076cc:	2201      	movs	r2, #1
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f918 	bl	8007906 <USBD_CtlSendData>
        break;
 80076d6:	e004      	b.n	80076e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f8a9 	bl	8007832 <USBD_CtlError>
        break;
 80076e0:	bf00      	nop
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fa:	3b01      	subs	r3, #1
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d81e      	bhi.n	800773e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	88db      	ldrh	r3, [r3, #6]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d004      	beq.n	8007712 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f891 	bl	8007832 <USBD_CtlError>
        break;
 8007710:	e01a      	b.n	8007748 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f043 0202 	orr.w	r2, r3, #2
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	330c      	adds	r3, #12
 8007732:	2202      	movs	r2, #2
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f8e5 	bl	8007906 <USBD_CtlSendData>
      break;
 800773c:	e004      	b.n	8007748 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f876 	bl	8007832 <USBD_CtlError>
      break;
 8007746:	bf00      	nop
  }
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d106      	bne.n	8007770 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f929 	bl	80079c2 <USBD_CtlSendStatus>
  }
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	3b01      	subs	r3, #1
 800778a:	2b02      	cmp	r3, #2
 800778c:	d80b      	bhi.n	80077a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10c      	bne.n	80077b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f90f 	bl	80079c2 <USBD_CtlSendStatus>
      }
      break;
 80077a4:	e004      	b.n	80077b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f842 	bl	8007832 <USBD_CtlError>
      break;
 80077ae:	e000      	b.n	80077b2 <USBD_ClrFeature+0x3a>
      break;
 80077b0:	bf00      	nop
  }
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	785a      	ldrb	r2, [r3, #1]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	3302      	adds	r3, #2
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	3303      	adds	r3, #3
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4413      	add	r3, r2
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	3304      	adds	r3, #4
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	3305      	adds	r3, #5
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b29b      	uxth	r3, r3
 8007804:	4413      	add	r3, r2
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	3306      	adds	r3, #6
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	3307      	adds	r3, #7
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	b29b      	uxth	r3, r3
 8007820:	4413      	add	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	80da      	strh	r2, [r3, #6]

}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800783c:	2180      	movs	r1, #128	; 0x80
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc54 	bl	80080ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc50 	bl	80080ec <USBD_LL_StallEP>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d032      	beq.n	80078d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f834 	bl	80078d8 <USBD_GetLen>
 8007870:	4603      	mov	r3, r0
 8007872:	3301      	adds	r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	75fa      	strb	r2, [r7, #23]
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4413      	add	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	75fa      	strb	r2, [r7, #23]
 8007896:	461a      	mov	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4413      	add	r3, r2
 800789c:	2203      	movs	r2, #3
 800789e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80078a0:	e012      	b.n	80078c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	60fa      	str	r2, [r7, #12]
 80078a8:	7dfa      	ldrb	r2, [r7, #23]
 80078aa:	1c51      	adds	r1, r2, #1
 80078ac:	75f9      	strb	r1, [r7, #23]
 80078ae:	4611      	mov	r1, r2
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	440a      	add	r2, r1
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	75fa      	strb	r2, [r7, #23]
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4413      	add	r3, r2
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e8      	bne.n	80078a2 <USBD_GetString+0x4e>
    }
  }
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078e4:	e005      	b.n	80078f2 <USBD_GetLen+0x1a>
  {
    len++;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	3301      	adds	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3301      	adds	r3, #1
 80078f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f5      	bne.n	80078e6 <USBD_GetLen+0xe>
  }

  return len;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	4613      	mov	r3, r2
 8007912:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	2100      	movs	r1, #0
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 fc65 	bl	80081fe <USBD_LL_Transmit>

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	4613      	mov	r3, r2
 800794a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	2100      	movs	r1, #0
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fc53 	bl	80081fe <USBD_LL_Transmit>

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	4613      	mov	r3, r2
 800796e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2203      	movs	r2, #3
 8007974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	2100      	movs	r1, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 fc58 	bl	8008244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	2100      	movs	r1, #0
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fc46 	bl	8008244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2204      	movs	r2, #4
 80079ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079d2:	2300      	movs	r3, #0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fc10 	bl	80081fe <USBD_LL_Transmit>

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2205      	movs	r2, #5
 80079f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc20 	bl	8008244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a14:	2200      	movs	r2, #0
 8007a16:	4912      	ldr	r1, [pc, #72]	; (8007a60 <MX_USB_DEVICE_Init+0x50>)
 8007a18:	4812      	ldr	r0, [pc, #72]	; (8007a64 <MX_USB_DEVICE_Init+0x54>)
 8007a1a:	f7fe ff5e 	bl	80068da <USBD_Init>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a24:	f7f8 fd01 	bl	800042a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a28:	490f      	ldr	r1, [pc, #60]	; (8007a68 <MX_USB_DEVICE_Init+0x58>)
 8007a2a:	480e      	ldr	r0, [pc, #56]	; (8007a64 <MX_USB_DEVICE_Init+0x54>)
 8007a2c:	f7fe ff80 	bl	8006930 <USBD_RegisterClass>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a36:	f7f8 fcf8 	bl	800042a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a3a:	490c      	ldr	r1, [pc, #48]	; (8007a6c <MX_USB_DEVICE_Init+0x5c>)
 8007a3c:	4809      	ldr	r0, [pc, #36]	; (8007a64 <MX_USB_DEVICE_Init+0x54>)
 8007a3e:	f7fe feb1 	bl	80067a4 <USBD_CDC_RegisterInterface>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a48:	f7f8 fcef 	bl	800042a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a4c:	4805      	ldr	r0, [pc, #20]	; (8007a64 <MX_USB_DEVICE_Init+0x54>)
 8007a4e:	f7fe ff88 	bl	8006962 <USBD_Start>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a58:	f7f8 fce7 	bl	800042a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a5c:	bf00      	nop
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	2000012c 	.word	0x2000012c
 8007a64:	200002b4 	.word	0x200002b4
 8007a68:	20000018 	.word	0x20000018
 8007a6c:	2000011c 	.word	0x2000011c

08007a70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a74:	2200      	movs	r2, #0
 8007a76:	4905      	ldr	r1, [pc, #20]	; (8007a8c <CDC_Init_FS+0x1c>)
 8007a78:	4805      	ldr	r0, [pc, #20]	; (8007a90 <CDC_Init_FS+0x20>)
 8007a7a:	f7fe fea9 	bl	80067d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a7e:	4905      	ldr	r1, [pc, #20]	; (8007a94 <CDC_Init_FS+0x24>)
 8007a80:	4803      	ldr	r0, [pc, #12]	; (8007a90 <CDC_Init_FS+0x20>)
 8007a82:	f7fe febe 	bl	8006802 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20000978 	.word	0x20000978
 8007a90:	200002b4 	.word	0x200002b4
 8007a94:	20000578 	.word	0x20000578

08007a98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
	...

08007aa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b23      	cmp	r3, #35	; 0x23
 8007abc:	d84a      	bhi.n	8007b54 <CDC_Control_FS+0xac>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <CDC_Control_FS+0x1c>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b55 	.word	0x08007b55
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b55 	.word	0x08007b55
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b55 	.word	0x08007b55
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b55 	.word	0x08007b55
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	08007b55 	.word	0x08007b55
 8007b30:	08007b55 	.word	0x08007b55
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b55 	.word	0x08007b55
 8007b40:	08007b55 	.word	0x08007b55
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b55 	.word	0x08007b55
 8007b4c:	08007b55 	.word	0x08007b55
 8007b50:	08007b55 	.word	0x08007b55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b54:	bf00      	nop
  }

  return (USBD_OK);
 8007b56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <CDC_Receive_FS+0x24>)
 8007b72:	f7fe fe46 	bl	8006802 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b76:	4804      	ldr	r0, [pc, #16]	; (8007b88 <CDC_Receive_FS+0x24>)
 8007b78:	f7fe fe85 	bl	8006886 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200002b4 	.word	0x200002b4

08007b8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <CDC_Transmit_FS+0x48>)
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e00b      	b.n	8007bca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bb2:	887b      	ldrh	r3, [r7, #2]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4806      	ldr	r0, [pc, #24]	; (8007bd4 <CDC_Transmit_FS+0x48>)
 8007bba:	f7fe fe09 	bl	80067d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007bbe:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <CDC_Transmit_FS+0x48>)
 8007bc0:	f7fe fe32 	bl	8006828 <USBD_CDC_TransmitPacket>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200002b4 	.word	0x200002b4

08007bd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2212      	movs	r2, #18
 8007be8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bea:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000148 	.word	0x20000148

08007bfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	2000015c 	.word	0x2000015c

08007c20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4907      	ldr	r1, [pc, #28]	; (8007c54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c36:	4808      	ldr	r0, [pc, #32]	; (8007c58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c38:	f7ff fe0c 	bl	8007854 <USBD_GetString>
 8007c3c:	e004      	b.n	8007c48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4904      	ldr	r1, [pc, #16]	; (8007c54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c42:	4805      	ldr	r0, [pc, #20]	; (8007c58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c44:	f7ff fe06 	bl	8007854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000d78 	.word	0x20000d78
 8007c58:	08008cd4 	.word	0x08008cd4

08007c5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	4904      	ldr	r1, [pc, #16]	; (8007c7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c6c:	4804      	ldr	r0, [pc, #16]	; (8007c80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c6e:	f7ff fdf1 	bl	8007854 <USBD_GetString>
  return USBD_StrDesc;
 8007c72:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000d78 	.word	0x20000d78
 8007c80:	08008cec 	.word	0x08008cec

08007c84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	221a      	movs	r2, #26
 8007c94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c96:	f000 f843 	bl	8007d20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c9a:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000160 	.word	0x20000160

08007ca8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4907      	ldr	r1, [pc, #28]	; (8007cdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cbe:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cc0:	f7ff fdc8 	bl	8007854 <USBD_GetString>
 8007cc4:	e004      	b.n	8007cd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ccc:	f7ff fdc2 	bl	8007854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000d78 	.word	0x20000d78
 8007ce0:	08008d00 	.word	0x08008d00

08007ce4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	4907      	ldr	r1, [pc, #28]	; (8007d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cfa:	4808      	ldr	r0, [pc, #32]	; (8007d1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cfc:	f7ff fdaa 	bl	8007854 <USBD_GetString>
 8007d00:	e004      	b.n	8007d0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d08:	f7ff fda4 	bl	8007854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000d78 	.word	0x20000d78
 8007d1c:	08008d0c 	.word	0x08008d0c

08007d20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <Get_SerialNum+0x44>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <Get_SerialNum+0x48>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <Get_SerialNum+0x4c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d46:	2208      	movs	r2, #8
 8007d48:	4909      	ldr	r1, [pc, #36]	; (8007d70 <Get_SerialNum+0x50>)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f814 	bl	8007d78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d50:	2204      	movs	r2, #4
 8007d52:	4908      	ldr	r1, [pc, #32]	; (8007d74 <Get_SerialNum+0x54>)
 8007d54:	68b8      	ldr	r0, [r7, #8]
 8007d56:	f000 f80f 	bl	8007d78 <IntToUnicode>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	1ffff7e8 	.word	0x1ffff7e8
 8007d68:	1ffff7ec 	.word	0x1ffff7ec
 8007d6c:	1ffff7f0 	.word	0x1ffff7f0
 8007d70:	20000162 	.word	0x20000162
 8007d74:	20000172 	.word	0x20000172

08007d78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]
 8007d8e:	e027      	b.n	8007de0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	0f1b      	lsrs	r3, r3, #28
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	d80b      	bhi.n	8007db0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	0f1b      	lsrs	r3, r3, #28
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4619      	mov	r1, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	440b      	add	r3, r1
 8007da8:	3230      	adds	r2, #48	; 0x30
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e00a      	b.n	8007dc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	0f1b      	lsrs	r3, r3, #28
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3237      	adds	r2, #55	; 0x37
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
 8007de0:	7dfa      	ldrb	r2, [r7, #23]
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3d3      	bcc.n	8007d90 <IntToUnicode+0x18>
  }
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr

08007df4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0d      	ldr	r2, [pc, #52]	; (8007e38 <HAL_PCD_MspInit+0x44>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d113      	bne.n	8007e2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e10:	61d3      	str	r3, [r2, #28]
 8007e12:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	2014      	movs	r0, #20
 8007e24:	f7f8 fd9b 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e28:	2014      	movs	r0, #20
 8007e2a:	f7f8 fdb4 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40005c00 	.word	0x40005c00
 8007e3c:	40021000 	.word	0x40021000

08007e40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fe fdcb 	bl	80069f2 <USBD_LL_SetupStage>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	440b      	add	r3, r1
 8007e84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7fe fdfd 	bl	8006a8c <USBD_LL_DataOutStage>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	440b      	add	r3, r1
 8007eba:	333c      	adds	r3, #60	; 0x3c
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f7fe fe54 	bl	8006b6e <USBD_LL_DataInStage>
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe ff64 	bl	8006daa <USBD_LL_SOF>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d001      	beq.n	8007f02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007efe:	f7f8 fa94 	bl	800042a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f08:	7bfa      	ldrb	r2, [r7, #15]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe ff14 	bl	8006d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fecd 	bl	8006cb8 <USBD_LL_Reset>
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe ff0e 	bl	8006d58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f44:	4b04      	ldr	r3, [pc, #16]	; (8007f58 <HAL_PCD_SuspendCallback+0x30>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	4a03      	ldr	r2, [pc, #12]	; (8007f58 <HAL_PCD_SuspendCallback+0x30>)
 8007f4a:	f043 0306 	orr.w	r3, r3, #6
 8007f4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe ff08 	bl	8006d80 <USBD_LL_Resume>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f80:	4a28      	ldr	r2, [pc, #160]	; (8008024 <USBD_LL_Init+0xac>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a26      	ldr	r2, [pc, #152]	; (8008024 <USBD_LL_Init+0xac>)
 8007f8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <USBD_LL_Init+0xac>)
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <USBD_LL_Init+0xb0>)
 8007f94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f96:	4b23      	ldr	r3, [pc, #140]	; (8008024 <USBD_LL_Init+0xac>)
 8007f98:	2208      	movs	r2, #8
 8007f9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f9c:	4b21      	ldr	r3, [pc, #132]	; (8008024 <USBD_LL_Init+0xac>)
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <USBD_LL_Init+0xac>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <USBD_LL_Init+0xac>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fae:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <USBD_LL_Init+0xac>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fb4:	481b      	ldr	r0, [pc, #108]	; (8008024 <USBD_LL_Init+0xac>)
 8007fb6:	f7f8 fff5 	bl	8000fa4 <HAL_PCD_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fc0:	f7f8 fa33 	bl	800042a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fca:	2318      	movs	r3, #24
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f7fa fc69 	bl	80028a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fda:	2358      	movs	r3, #88	; 0x58
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	f7fa fc61 	bl	80028a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fea:	23c0      	movs	r3, #192	; 0xc0
 8007fec:	2200      	movs	r2, #0
 8007fee:	2181      	movs	r1, #129	; 0x81
 8007ff0:	f7fa fc59 	bl	80028a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ffa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007ffe:	2200      	movs	r2, #0
 8008000:	2101      	movs	r1, #1
 8008002:	f7fa fc50 	bl	80028a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800800c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008010:	2200      	movs	r2, #0
 8008012:	2182      	movs	r1, #130	; 0x82
 8008014:	f7fa fc47 	bl	80028a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000f78 	.word	0x20000f78
 8008028:	40005c00 	.word	0x40005c00

0800802c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 f8b9 	bl	80011ba <HAL_PCD_Start>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f94e 	bl	80082f0 <USBD_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	461a      	mov	r2, r3
 8008070:	4603      	mov	r3, r0
 8008072:	70fb      	strb	r3, [r7, #3]
 8008074:	460b      	mov	r3, r1
 8008076:	70bb      	strb	r3, [r7, #2]
 8008078:	4613      	mov	r3, r2
 800807a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800808a:	78bb      	ldrb	r3, [r7, #2]
 800808c:	883a      	ldrh	r2, [r7, #0]
 800808e:	78f9      	ldrb	r1, [r7, #3]
 8008090:	f7f9 fa31 	bl	80014f6 <HAL_PCD_EP_Open>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f928 	bl	80082f0 <USBD_Get_USB_Status>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f9 fa78 	bl	80015c2 <HAL_PCD_EP_Close>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f909 	bl	80082f0 <USBD_Get_USB_Status>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008106:	78fa      	ldrb	r2, [r7, #3]
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f7f9 fb38 	bl	8001780 <HAL_PCD_EP_SetStall>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f8ea 	bl	80082f0 <USBD_Get_USB_Status>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008120:	7bbb      	ldrb	r3, [r7, #14]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7f9 fb79 	bl	8001840 <HAL_PCD_EP_ClrStall>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f8cb 	bl	80082f0 <USBD_Get_USB_Status>
 800815a:	4603      	mov	r3, r0
 800815c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800817a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800817c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008180:	2b00      	cmp	r3, #0
 8008182:	da0c      	bge.n	800819e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	3302      	adds	r3, #2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	e00b      	b.n	80081b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081a4:	68f9      	ldr	r1, [r7, #12]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	440b      	add	r3, r1
 80081b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr

080081c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	4611      	mov	r1, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f9 f964 	bl	80014ac <HAL_PCD_SetAddress>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 f880 	bl	80082f0 <USBD_Get_USB_Status>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	461a      	mov	r2, r3
 800820a:	460b      	mov	r3, r1
 800820c:	72fb      	strb	r3, [r7, #11]
 800820e:	4613      	mov	r3, r2
 8008210:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008220:	893b      	ldrh	r3, [r7, #8]
 8008222:	7af9      	ldrb	r1, [r7, #11]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	f7f9 fa68 	bl	80016fa <HAL_PCD_EP_Transmit>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f85d 	bl	80082f0 <USBD_Get_USB_Status>
 8008236:	4603      	mov	r3, r0
 8008238:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800823a:	7dbb      	ldrb	r3, [r7, #22]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	461a      	mov	r2, r3
 8008250:	460b      	mov	r3, r1
 8008252:	72fb      	strb	r3, [r7, #11]
 8008254:	4613      	mov	r3, r2
 8008256:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008266:	893b      	ldrh	r3, [r7, #8]
 8008268:	7af9      	ldrb	r1, [r7, #11]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	f7f9 f9f1 	bl	8001652 <HAL_PCD_EP_Receive>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f83a 	bl	80082f0 <USBD_Get_USB_Status>
 800827c:	4603      	mov	r3, r0
 800827e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008280:	7dbb      	ldrb	r3, [r7, #22]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7f9 fa13 	bl	80016cc <HAL_PCD_EP_GetRxCount>
 80082a6:	4603      	mov	r3, r0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <USBD_static_malloc+0x14>)
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr
 80082c4:	20001264 	.word	0x20001264

080082c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr

080082da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr

080082f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d817      	bhi.n	8008334 <USBD_Get_USB_Status+0x44>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <USBD_Get_USB_Status+0x1c>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008323 	.word	0x08008323
 8008314:	08008329 	.word	0x08008329
 8008318:	0800832f 	.word	0x0800832f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
    break;
 8008320:	e00b      	b.n	800833a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
    break;
 8008326:	e008      	b.n	800833a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	e005      	b.n	800833a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
    break;
 8008332:	e002      	b.n	800833a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	bf00      	nop
  }
  return usb_status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <__errno>:
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <__errno+0x8>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000017c 	.word	0x2000017c

08008354 <__libc_init_array>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	2600      	movs	r6, #0
 8008358:	4d0c      	ldr	r5, [pc, #48]	; (800838c <__libc_init_array+0x38>)
 800835a:	4c0d      	ldr	r4, [pc, #52]	; (8008390 <__libc_init_array+0x3c>)
 800835c:	1b64      	subs	r4, r4, r5
 800835e:	10a4      	asrs	r4, r4, #2
 8008360:	42a6      	cmp	r6, r4
 8008362:	d109      	bne.n	8008378 <__libc_init_array+0x24>
 8008364:	f000 fc9c 	bl	8008ca0 <_init>
 8008368:	2600      	movs	r6, #0
 800836a:	4d0a      	ldr	r5, [pc, #40]	; (8008394 <__libc_init_array+0x40>)
 800836c:	4c0a      	ldr	r4, [pc, #40]	; (8008398 <__libc_init_array+0x44>)
 800836e:	1b64      	subs	r4, r4, r5
 8008370:	10a4      	asrs	r4, r4, #2
 8008372:	42a6      	cmp	r6, r4
 8008374:	d105      	bne.n	8008382 <__libc_init_array+0x2e>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	f855 3b04 	ldr.w	r3, [r5], #4
 800837c:	4798      	blx	r3
 800837e:	3601      	adds	r6, #1
 8008380:	e7ee      	b.n	8008360 <__libc_init_array+0xc>
 8008382:	f855 3b04 	ldr.w	r3, [r5], #4
 8008386:	4798      	blx	r3
 8008388:	3601      	adds	r6, #1
 800838a:	e7f2      	b.n	8008372 <__libc_init_array+0x1e>
 800838c:	08008d68 	.word	0x08008d68
 8008390:	08008d68 	.word	0x08008d68
 8008394:	08008d68 	.word	0x08008d68
 8008398:	08008d6c 	.word	0x08008d6c

0800839c <memset>:
 800839c:	4603      	mov	r3, r0
 800839e:	4402      	add	r2, r0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d100      	bne.n	80083a6 <memset+0xa>
 80083a4:	4770      	bx	lr
 80083a6:	f803 1b01 	strb.w	r1, [r3], #1
 80083aa:	e7f9      	b.n	80083a0 <memset+0x4>

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b2:	b500      	push	{lr}
 80083b4:	b09c      	sub	sp, #112	; 0x70
 80083b6:	ab1d      	add	r3, sp, #116	; 0x74
 80083b8:	9002      	str	r0, [sp, #8]
 80083ba:	9006      	str	r0, [sp, #24]
 80083bc:	9107      	str	r1, [sp, #28]
 80083be:	9104      	str	r1, [sp, #16]
 80083c0:	4808      	ldr	r0, [pc, #32]	; (80083e4 <siprintf+0x38>)
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	a902      	add	r1, sp, #8
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	f000 f868 	bl	80084a4 <_svfiprintf_r>
 80083d4:	2200      	movs	r2, #0
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	2000017c 	.word	0x2000017c
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <__ssputs_r>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	688e      	ldr	r6, [r1, #8]
 80083f2:	4682      	mov	sl, r0
 80083f4:	429e      	cmp	r6, r3
 80083f6:	460c      	mov	r4, r1
 80083f8:	4690      	mov	r8, r2
 80083fa:	461f      	mov	r7, r3
 80083fc:	d838      	bhi.n	8008470 <__ssputs_r+0x84>
 80083fe:	898a      	ldrh	r2, [r1, #12]
 8008400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008404:	d032      	beq.n	800846c <__ssputs_r+0x80>
 8008406:	6825      	ldr	r5, [r4, #0]
 8008408:	6909      	ldr	r1, [r1, #16]
 800840a:	3301      	adds	r3, #1
 800840c:	eba5 0901 	sub.w	r9, r5, r1
 8008410:	6965      	ldr	r5, [r4, #20]
 8008412:	444b      	add	r3, r9
 8008414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800841c:	106d      	asrs	r5, r5, #1
 800841e:	429d      	cmp	r5, r3
 8008420:	bf38      	it	cc
 8008422:	461d      	movcc	r5, r3
 8008424:	0553      	lsls	r3, r2, #21
 8008426:	d531      	bpl.n	800848c <__ssputs_r+0xa0>
 8008428:	4629      	mov	r1, r5
 800842a:	f000 fb6f 	bl	8008b0c <_malloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	b950      	cbnz	r0, 8008448 <__ssputs_r+0x5c>
 8008432:	230c      	movs	r3, #12
 8008434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008438:	f8ca 3000 	str.w	r3, [sl]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	464a      	mov	r2, r9
 800844a:	6921      	ldr	r1, [r4, #16]
 800844c:	f000 face 	bl	80089ec <memcpy>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	6126      	str	r6, [r4, #16]
 800845e:	444e      	add	r6, r9
 8008460:	6026      	str	r6, [r4, #0]
 8008462:	463e      	mov	r6, r7
 8008464:	6165      	str	r5, [r4, #20]
 8008466:	eba5 0509 	sub.w	r5, r5, r9
 800846a:	60a5      	str	r5, [r4, #8]
 800846c:	42be      	cmp	r6, r7
 800846e:	d900      	bls.n	8008472 <__ssputs_r+0x86>
 8008470:	463e      	mov	r6, r7
 8008472:	4632      	mov	r2, r6
 8008474:	4641      	mov	r1, r8
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	f000 fac6 	bl	8008a08 <memmove>
 800847c:	68a3      	ldr	r3, [r4, #8]
 800847e:	2000      	movs	r0, #0
 8008480:	1b9b      	subs	r3, r3, r6
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	4433      	add	r3, r6
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	e7db      	b.n	8008444 <__ssputs_r+0x58>
 800848c:	462a      	mov	r2, r5
 800848e:	f000 fbb1 	bl	8008bf4 <_realloc_r>
 8008492:	4606      	mov	r6, r0
 8008494:	2800      	cmp	r0, #0
 8008496:	d1e1      	bne.n	800845c <__ssputs_r+0x70>
 8008498:	4650      	mov	r0, sl
 800849a:	6921      	ldr	r1, [r4, #16]
 800849c:	f000 face 	bl	8008a3c <_free_r>
 80084a0:	e7c7      	b.n	8008432 <__ssputs_r+0x46>
	...

080084a4 <_svfiprintf_r>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	4698      	mov	r8, r3
 80084aa:	898b      	ldrh	r3, [r1, #12]
 80084ac:	4607      	mov	r7, r0
 80084ae:	061b      	lsls	r3, r3, #24
 80084b0:	460d      	mov	r5, r1
 80084b2:	4614      	mov	r4, r2
 80084b4:	b09d      	sub	sp, #116	; 0x74
 80084b6:	d50e      	bpl.n	80084d6 <_svfiprintf_r+0x32>
 80084b8:	690b      	ldr	r3, [r1, #16]
 80084ba:	b963      	cbnz	r3, 80084d6 <_svfiprintf_r+0x32>
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	f000 fb25 	bl	8008b0c <_malloc_r>
 80084c2:	6028      	str	r0, [r5, #0]
 80084c4:	6128      	str	r0, [r5, #16]
 80084c6:	b920      	cbnz	r0, 80084d2 <_svfiprintf_r+0x2e>
 80084c8:	230c      	movs	r3, #12
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d0:	e0d1      	b.n	8008676 <_svfiprintf_r+0x1d2>
 80084d2:	2340      	movs	r3, #64	; 0x40
 80084d4:	616b      	str	r3, [r5, #20]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9309      	str	r3, [sp, #36]	; 0x24
 80084da:	2320      	movs	r3, #32
 80084dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084e0:	2330      	movs	r3, #48	; 0x30
 80084e2:	f04f 0901 	mov.w	r9, #1
 80084e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008690 <_svfiprintf_r+0x1ec>
 80084ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084f2:	4623      	mov	r3, r4
 80084f4:	469a      	mov	sl, r3
 80084f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fa:	b10a      	cbz	r2, 8008500 <_svfiprintf_r+0x5c>
 80084fc:	2a25      	cmp	r2, #37	; 0x25
 80084fe:	d1f9      	bne.n	80084f4 <_svfiprintf_r+0x50>
 8008500:	ebba 0b04 	subs.w	fp, sl, r4
 8008504:	d00b      	beq.n	800851e <_svfiprintf_r+0x7a>
 8008506:	465b      	mov	r3, fp
 8008508:	4622      	mov	r2, r4
 800850a:	4629      	mov	r1, r5
 800850c:	4638      	mov	r0, r7
 800850e:	f7ff ff6d 	bl	80083ec <__ssputs_r>
 8008512:	3001      	adds	r0, #1
 8008514:	f000 80aa 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800851a:	445a      	add	r2, fp
 800851c:	9209      	str	r2, [sp, #36]	; 0x24
 800851e:	f89a 3000 	ldrb.w	r3, [sl]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80a2 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008528:	2300      	movs	r3, #0
 800852a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800852e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008532:	f10a 0a01 	add.w	sl, sl, #1
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	9307      	str	r3, [sp, #28]
 800853a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800853e:	931a      	str	r3, [sp, #104]	; 0x68
 8008540:	4654      	mov	r4, sl
 8008542:	2205      	movs	r2, #5
 8008544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008548:	4851      	ldr	r0, [pc, #324]	; (8008690 <_svfiprintf_r+0x1ec>)
 800854a:	f000 fa41 	bl	80089d0 <memchr>
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	b9d8      	cbnz	r0, 800858a <_svfiprintf_r+0xe6>
 8008552:	06d0      	lsls	r0, r2, #27
 8008554:	bf44      	itt	mi
 8008556:	2320      	movmi	r3, #32
 8008558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855c:	0711      	lsls	r1, r2, #28
 800855e:	bf44      	itt	mi
 8008560:	232b      	movmi	r3, #43	; 0x2b
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008566:	f89a 3000 	ldrb.w	r3, [sl]
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	d015      	beq.n	800859a <_svfiprintf_r+0xf6>
 800856e:	4654      	mov	r4, sl
 8008570:	2000      	movs	r0, #0
 8008572:	f04f 0c0a 	mov.w	ip, #10
 8008576:	9a07      	ldr	r2, [sp, #28]
 8008578:	4621      	mov	r1, r4
 800857a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857e:	3b30      	subs	r3, #48	; 0x30
 8008580:	2b09      	cmp	r3, #9
 8008582:	d94e      	bls.n	8008622 <_svfiprintf_r+0x17e>
 8008584:	b1b0      	cbz	r0, 80085b4 <_svfiprintf_r+0x110>
 8008586:	9207      	str	r2, [sp, #28]
 8008588:	e014      	b.n	80085b4 <_svfiprintf_r+0x110>
 800858a:	eba0 0308 	sub.w	r3, r0, r8
 800858e:	fa09 f303 	lsl.w	r3, r9, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	46a2      	mov	sl, r4
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	e7d2      	b.n	8008540 <_svfiprintf_r+0x9c>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9103      	str	r1, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfbb      	ittet	lt
 80085a6:	425b      	neglt	r3, r3
 80085a8:	f042 0202 	orrlt.w	r2, r2, #2
 80085ac:	9307      	strge	r3, [sp, #28]
 80085ae:	9307      	strlt	r3, [sp, #28]
 80085b0:	bfb8      	it	lt
 80085b2:	9204      	strlt	r2, [sp, #16]
 80085b4:	7823      	ldrb	r3, [r4, #0]
 80085b6:	2b2e      	cmp	r3, #46	; 0x2e
 80085b8:	d10c      	bne.n	80085d4 <_svfiprintf_r+0x130>
 80085ba:	7863      	ldrb	r3, [r4, #1]
 80085bc:	2b2a      	cmp	r3, #42	; 0x2a
 80085be:	d135      	bne.n	800862c <_svfiprintf_r+0x188>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	3402      	adds	r4, #2
 80085c4:	1d1a      	adds	r2, r3, #4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	9203      	str	r2, [sp, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfb8      	it	lt
 80085ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008694 <_svfiprintf_r+0x1f0>
 80085d8:	2203      	movs	r2, #3
 80085da:	4650      	mov	r0, sl
 80085dc:	7821      	ldrb	r1, [r4, #0]
 80085de:	f000 f9f7 	bl	80089d0 <memchr>
 80085e2:	b140      	cbz	r0, 80085f6 <_svfiprintf_r+0x152>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	eba0 000a 	sub.w	r0, r0, sl
 80085ea:	fa03 f000 	lsl.w	r0, r3, r0
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	3401      	adds	r4, #1
 80085f2:	4303      	orrs	r3, r0
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	2206      	movs	r2, #6
 80085fc:	4826      	ldr	r0, [pc, #152]	; (8008698 <_svfiprintf_r+0x1f4>)
 80085fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008602:	f000 f9e5 	bl	80089d0 <memchr>
 8008606:	2800      	cmp	r0, #0
 8008608:	d038      	beq.n	800867c <_svfiprintf_r+0x1d8>
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <_svfiprintf_r+0x1f8>)
 800860c:	bb1b      	cbnz	r3, 8008656 <_svfiprintf_r+0x1b2>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	3307      	adds	r3, #7
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	3308      	adds	r3, #8
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	4433      	add	r3, r6
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	e767      	b.n	80084f2 <_svfiprintf_r+0x4e>
 8008622:	460c      	mov	r4, r1
 8008624:	2001      	movs	r0, #1
 8008626:	fb0c 3202 	mla	r2, ip, r2, r3
 800862a:	e7a5      	b.n	8008578 <_svfiprintf_r+0xd4>
 800862c:	2300      	movs	r3, #0
 800862e:	f04f 0c0a 	mov.w	ip, #10
 8008632:	4619      	mov	r1, r3
 8008634:	3401      	adds	r4, #1
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	4620      	mov	r0, r4
 800863a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800863e:	3a30      	subs	r2, #48	; 0x30
 8008640:	2a09      	cmp	r2, #9
 8008642:	d903      	bls.n	800864c <_svfiprintf_r+0x1a8>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c5      	beq.n	80085d4 <_svfiprintf_r+0x130>
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	e7c3      	b.n	80085d4 <_svfiprintf_r+0x130>
 800864c:	4604      	mov	r4, r0
 800864e:	2301      	movs	r3, #1
 8008650:	fb0c 2101 	mla	r1, ip, r1, r2
 8008654:	e7f0      	b.n	8008638 <_svfiprintf_r+0x194>
 8008656:	ab03      	add	r3, sp, #12
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	4638      	mov	r0, r7
 800865e:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <_svfiprintf_r+0x1fc>)
 8008660:	a904      	add	r1, sp, #16
 8008662:	f3af 8000 	nop.w
 8008666:	1c42      	adds	r2, r0, #1
 8008668:	4606      	mov	r6, r0
 800866a:	d1d6      	bne.n	800861a <_svfiprintf_r+0x176>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	065b      	lsls	r3, r3, #25
 8008670:	f53f af2c 	bmi.w	80084cc <_svfiprintf_r+0x28>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	b01d      	add	sp, #116	; 0x74
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4638      	mov	r0, r7
 8008684:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <_svfiprintf_r+0x1fc>)
 8008686:	a904      	add	r1, sp, #16
 8008688:	f000 f87c 	bl	8008784 <_printf_i>
 800868c:	e7eb      	b.n	8008666 <_svfiprintf_r+0x1c2>
 800868e:	bf00      	nop
 8008690:	08008d34 	.word	0x08008d34
 8008694:	08008d3a 	.word	0x08008d3a
 8008698:	08008d3e 	.word	0x08008d3e
 800869c:	00000000 	.word	0x00000000
 80086a0:	080083ed 	.word	0x080083ed

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4699      	mov	r9, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	4607      	mov	r7, r0
 80086b2:	4293      	cmp	r3, r2
 80086b4:	bfb8      	it	lt
 80086b6:	4613      	movlt	r3, r2
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086be:	460c      	mov	r4, r1
 80086c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc28      	bgt.n	800873e <_printf_common+0x9a>
 80086ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086f0:	1e13      	subs	r3, r2, #0
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d42d      	bmi.n	8008758 <_printf_common+0xb4>
 80086fc:	4649      	mov	r1, r9
 80086fe:	4638      	mov	r0, r7
 8008700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008704:	47c0      	blx	r8
 8008706:	3001      	adds	r0, #1
 8008708:	d020      	beq.n	800874c <_printf_common+0xa8>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	68e5      	ldr	r5, [r4, #12]
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b04      	cmp	r3, #4
 8008714:	bf18      	it	ne
 8008716:	2500      	movne	r5, #0
 8008718:	6832      	ldr	r2, [r6, #0]
 800871a:	f04f 0600 	mov.w	r6, #0
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	bf08      	it	eq
 8008722:	1aad      	subeq	r5, r5, r2
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	bf08      	it	eq
 8008728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800872c:	4293      	cmp	r3, r2
 800872e:	bfc4      	itt	gt
 8008730:	1a9b      	subgt	r3, r3, r2
 8008732:	18ed      	addgt	r5, r5, r3
 8008734:	341a      	adds	r4, #26
 8008736:	42b5      	cmp	r5, r6
 8008738:	d11a      	bne.n	8008770 <_printf_common+0xcc>
 800873a:	2000      	movs	r0, #0
 800873c:	e008      	b.n	8008750 <_printf_common+0xac>
 800873e:	2301      	movs	r3, #1
 8008740:	4652      	mov	r2, sl
 8008742:	4649      	mov	r1, r9
 8008744:	4638      	mov	r0, r7
 8008746:	47c0      	blx	r8
 8008748:	3001      	adds	r0, #1
 800874a:	d103      	bne.n	8008754 <_printf_common+0xb0>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008754:	3501      	adds	r5, #1
 8008756:	e7c4      	b.n	80086e2 <_printf_common+0x3e>
 8008758:	2030      	movs	r0, #48	; 0x30
 800875a:	18e1      	adds	r1, r4, r3
 800875c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008766:	4422      	add	r2, r4
 8008768:	3302      	adds	r3, #2
 800876a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800876e:	e7c5      	b.n	80086fc <_printf_common+0x58>
 8008770:	2301      	movs	r3, #1
 8008772:	4622      	mov	r2, r4
 8008774:	4649      	mov	r1, r9
 8008776:	4638      	mov	r0, r7
 8008778:	47c0      	blx	r8
 800877a:	3001      	adds	r0, #1
 800877c:	d0e6      	beq.n	800874c <_printf_common+0xa8>
 800877e:	3601      	adds	r6, #1
 8008780:	e7d9      	b.n	8008736 <_printf_common+0x92>
	...

08008784 <_printf_i>:
 8008784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	7e0f      	ldrb	r7, [r1, #24]
 800878a:	4691      	mov	r9, r2
 800878c:	2f78      	cmp	r7, #120	; 0x78
 800878e:	4680      	mov	r8, r0
 8008790:	460c      	mov	r4, r1
 8008792:	469a      	mov	sl, r3
 8008794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800879a:	d807      	bhi.n	80087ac <_printf_i+0x28>
 800879c:	2f62      	cmp	r7, #98	; 0x62
 800879e:	d80a      	bhi.n	80087b6 <_printf_i+0x32>
 80087a0:	2f00      	cmp	r7, #0
 80087a2:	f000 80d9 	beq.w	8008958 <_printf_i+0x1d4>
 80087a6:	2f58      	cmp	r7, #88	; 0x58
 80087a8:	f000 80a4 	beq.w	80088f4 <_printf_i+0x170>
 80087ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087b4:	e03a      	b.n	800882c <_printf_i+0xa8>
 80087b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ba:	2b15      	cmp	r3, #21
 80087bc:	d8f6      	bhi.n	80087ac <_printf_i+0x28>
 80087be:	a101      	add	r1, pc, #4	; (adr r1, 80087c4 <_printf_i+0x40>)
 80087c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c4:	0800881d 	.word	0x0800881d
 80087c8:	08008831 	.word	0x08008831
 80087cc:	080087ad 	.word	0x080087ad
 80087d0:	080087ad 	.word	0x080087ad
 80087d4:	080087ad 	.word	0x080087ad
 80087d8:	080087ad 	.word	0x080087ad
 80087dc:	08008831 	.word	0x08008831
 80087e0:	080087ad 	.word	0x080087ad
 80087e4:	080087ad 	.word	0x080087ad
 80087e8:	080087ad 	.word	0x080087ad
 80087ec:	080087ad 	.word	0x080087ad
 80087f0:	0800893f 	.word	0x0800893f
 80087f4:	08008861 	.word	0x08008861
 80087f8:	08008921 	.word	0x08008921
 80087fc:	080087ad 	.word	0x080087ad
 8008800:	080087ad 	.word	0x080087ad
 8008804:	08008961 	.word	0x08008961
 8008808:	080087ad 	.word	0x080087ad
 800880c:	08008861 	.word	0x08008861
 8008810:	080087ad 	.word	0x080087ad
 8008814:	080087ad 	.word	0x080087ad
 8008818:	08008929 	.word	0x08008929
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	602a      	str	r2, [r5, #0]
 8008824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800882c:	2301      	movs	r3, #1
 800882e:	e0a4      	b.n	800897a <_printf_i+0x1f6>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	6829      	ldr	r1, [r5, #0]
 8008834:	0606      	lsls	r6, r0, #24
 8008836:	f101 0304 	add.w	r3, r1, #4
 800883a:	d50a      	bpl.n	8008852 <_printf_i+0xce>
 800883c:	680e      	ldr	r6, [r1, #0]
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	2e00      	cmp	r6, #0
 8008842:	da03      	bge.n	800884c <_printf_i+0xc8>
 8008844:	232d      	movs	r3, #45	; 0x2d
 8008846:	4276      	negs	r6, r6
 8008848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884c:	230a      	movs	r3, #10
 800884e:	485e      	ldr	r0, [pc, #376]	; (80089c8 <_printf_i+0x244>)
 8008850:	e019      	b.n	8008886 <_printf_i+0x102>
 8008852:	680e      	ldr	r6, [r1, #0]
 8008854:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	bf18      	it	ne
 800885c:	b236      	sxthne	r6, r6
 800885e:	e7ef      	b.n	8008840 <_printf_i+0xbc>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	1d19      	adds	r1, r3, #4
 8008866:	6029      	str	r1, [r5, #0]
 8008868:	0601      	lsls	r1, r0, #24
 800886a:	d501      	bpl.n	8008870 <_printf_i+0xec>
 800886c:	681e      	ldr	r6, [r3, #0]
 800886e:	e002      	b.n	8008876 <_printf_i+0xf2>
 8008870:	0646      	lsls	r6, r0, #25
 8008872:	d5fb      	bpl.n	800886c <_printf_i+0xe8>
 8008874:	881e      	ldrh	r6, [r3, #0]
 8008876:	2f6f      	cmp	r7, #111	; 0x6f
 8008878:	bf0c      	ite	eq
 800887a:	2308      	moveq	r3, #8
 800887c:	230a      	movne	r3, #10
 800887e:	4852      	ldr	r0, [pc, #328]	; (80089c8 <_printf_i+0x244>)
 8008880:	2100      	movs	r1, #0
 8008882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008886:	6865      	ldr	r5, [r4, #4]
 8008888:	2d00      	cmp	r5, #0
 800888a:	bfa8      	it	ge
 800888c:	6821      	ldrge	r1, [r4, #0]
 800888e:	60a5      	str	r5, [r4, #8]
 8008890:	bfa4      	itt	ge
 8008892:	f021 0104 	bicge.w	r1, r1, #4
 8008896:	6021      	strge	r1, [r4, #0]
 8008898:	b90e      	cbnz	r6, 800889e <_printf_i+0x11a>
 800889a:	2d00      	cmp	r5, #0
 800889c:	d04d      	beq.n	800893a <_printf_i+0x1b6>
 800889e:	4615      	mov	r5, r2
 80088a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80088a4:	fb03 6711 	mls	r7, r3, r1, r6
 80088a8:	5dc7      	ldrb	r7, [r0, r7]
 80088aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088ae:	4637      	mov	r7, r6
 80088b0:	42bb      	cmp	r3, r7
 80088b2:	460e      	mov	r6, r1
 80088b4:	d9f4      	bls.n	80088a0 <_printf_i+0x11c>
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d10b      	bne.n	80088d2 <_printf_i+0x14e>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	07de      	lsls	r6, r3, #31
 80088be:	d508      	bpl.n	80088d2 <_printf_i+0x14e>
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	6861      	ldr	r1, [r4, #4]
 80088c4:	4299      	cmp	r1, r3
 80088c6:	bfde      	ittt	le
 80088c8:	2330      	movle	r3, #48	; 0x30
 80088ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80088d2:	1b52      	subs	r2, r2, r5
 80088d4:	6122      	str	r2, [r4, #16]
 80088d6:	464b      	mov	r3, r9
 80088d8:	4621      	mov	r1, r4
 80088da:	4640      	mov	r0, r8
 80088dc:	f8cd a000 	str.w	sl, [sp]
 80088e0:	aa03      	add	r2, sp, #12
 80088e2:	f7ff fedf 	bl	80086a4 <_printf_common>
 80088e6:	3001      	adds	r0, #1
 80088e8:	d14c      	bne.n	8008984 <_printf_i+0x200>
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ee:	b004      	add	sp, #16
 80088f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f4:	4834      	ldr	r0, [pc, #208]	; (80089c8 <_printf_i+0x244>)
 80088f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088fa:	6829      	ldr	r1, [r5, #0]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8008902:	6029      	str	r1, [r5, #0]
 8008904:	061d      	lsls	r5, r3, #24
 8008906:	d514      	bpl.n	8008932 <_printf_i+0x1ae>
 8008908:	07df      	lsls	r7, r3, #31
 800890a:	bf44      	itt	mi
 800890c:	f043 0320 	orrmi.w	r3, r3, #32
 8008910:	6023      	strmi	r3, [r4, #0]
 8008912:	b91e      	cbnz	r6, 800891c <_printf_i+0x198>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	f023 0320 	bic.w	r3, r3, #32
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	2310      	movs	r3, #16
 800891e:	e7af      	b.n	8008880 <_printf_i+0xfc>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	f043 0320 	orr.w	r3, r3, #32
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	2378      	movs	r3, #120	; 0x78
 800892a:	4828      	ldr	r0, [pc, #160]	; (80089cc <_printf_i+0x248>)
 800892c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008930:	e7e3      	b.n	80088fa <_printf_i+0x176>
 8008932:	0659      	lsls	r1, r3, #25
 8008934:	bf48      	it	mi
 8008936:	b2b6      	uxthmi	r6, r6
 8008938:	e7e6      	b.n	8008908 <_printf_i+0x184>
 800893a:	4615      	mov	r5, r2
 800893c:	e7bb      	b.n	80088b6 <_printf_i+0x132>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	6826      	ldr	r6, [r4, #0]
 8008942:	1d18      	adds	r0, r3, #4
 8008944:	6961      	ldr	r1, [r4, #20]
 8008946:	6028      	str	r0, [r5, #0]
 8008948:	0635      	lsls	r5, r6, #24
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	d501      	bpl.n	8008952 <_printf_i+0x1ce>
 800894e:	6019      	str	r1, [r3, #0]
 8008950:	e002      	b.n	8008958 <_printf_i+0x1d4>
 8008952:	0670      	lsls	r0, r6, #25
 8008954:	d5fb      	bpl.n	800894e <_printf_i+0x1ca>
 8008956:	8019      	strh	r1, [r3, #0]
 8008958:	2300      	movs	r3, #0
 800895a:	4615      	mov	r5, r2
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	e7ba      	b.n	80088d6 <_printf_i+0x152>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	2100      	movs	r1, #0
 8008964:	1d1a      	adds	r2, r3, #4
 8008966:	602a      	str	r2, [r5, #0]
 8008968:	681d      	ldr	r5, [r3, #0]
 800896a:	6862      	ldr	r2, [r4, #4]
 800896c:	4628      	mov	r0, r5
 800896e:	f000 f82f 	bl	80089d0 <memchr>
 8008972:	b108      	cbz	r0, 8008978 <_printf_i+0x1f4>
 8008974:	1b40      	subs	r0, r0, r5
 8008976:	6060      	str	r0, [r4, #4]
 8008978:	6863      	ldr	r3, [r4, #4]
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	2300      	movs	r3, #0
 800897e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008982:	e7a8      	b.n	80088d6 <_printf_i+0x152>
 8008984:	462a      	mov	r2, r5
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	47d0      	blx	sl
 800898e:	3001      	adds	r0, #1
 8008990:	d0ab      	beq.n	80088ea <_printf_i+0x166>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	079b      	lsls	r3, r3, #30
 8008996:	d413      	bmi.n	80089c0 <_printf_i+0x23c>
 8008998:	68e0      	ldr	r0, [r4, #12]
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	4298      	cmp	r0, r3
 800899e:	bfb8      	it	lt
 80089a0:	4618      	movlt	r0, r3
 80089a2:	e7a4      	b.n	80088ee <_printf_i+0x16a>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4632      	mov	r2, r6
 80089a8:	4649      	mov	r1, r9
 80089aa:	4640      	mov	r0, r8
 80089ac:	47d0      	blx	sl
 80089ae:	3001      	adds	r0, #1
 80089b0:	d09b      	beq.n	80088ea <_printf_i+0x166>
 80089b2:	3501      	adds	r5, #1
 80089b4:	68e3      	ldr	r3, [r4, #12]
 80089b6:	9903      	ldr	r1, [sp, #12]
 80089b8:	1a5b      	subs	r3, r3, r1
 80089ba:	42ab      	cmp	r3, r5
 80089bc:	dcf2      	bgt.n	80089a4 <_printf_i+0x220>
 80089be:	e7eb      	b.n	8008998 <_printf_i+0x214>
 80089c0:	2500      	movs	r5, #0
 80089c2:	f104 0619 	add.w	r6, r4, #25
 80089c6:	e7f5      	b.n	80089b4 <_printf_i+0x230>
 80089c8:	08008d45 	.word	0x08008d45
 80089cc:	08008d56 	.word	0x08008d56

080089d0 <memchr>:
 80089d0:	4603      	mov	r3, r0
 80089d2:	b510      	push	{r4, lr}
 80089d4:	b2c9      	uxtb	r1, r1
 80089d6:	4402      	add	r2, r0
 80089d8:	4293      	cmp	r3, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	d101      	bne.n	80089e2 <memchr+0x12>
 80089de:	2000      	movs	r0, #0
 80089e0:	e003      	b.n	80089ea <memchr+0x1a>
 80089e2:	7804      	ldrb	r4, [r0, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	428c      	cmp	r4, r1
 80089e8:	d1f6      	bne.n	80089d8 <memchr+0x8>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <memcpy>:
 80089ec:	440a      	add	r2, r1
 80089ee:	4291      	cmp	r1, r2
 80089f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089f4:	d100      	bne.n	80089f8 <memcpy+0xc>
 80089f6:	4770      	bx	lr
 80089f8:	b510      	push	{r4, lr}
 80089fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089fe:	4291      	cmp	r1, r2
 8008a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a04:	d1f9      	bne.n	80089fa <memcpy+0xe>
 8008a06:	bd10      	pop	{r4, pc}

08008a08 <memmove>:
 8008a08:	4288      	cmp	r0, r1
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	eb01 0402 	add.w	r4, r1, r2
 8008a10:	d902      	bls.n	8008a18 <memmove+0x10>
 8008a12:	4284      	cmp	r4, r0
 8008a14:	4623      	mov	r3, r4
 8008a16:	d807      	bhi.n	8008a28 <memmove+0x20>
 8008a18:	1e43      	subs	r3, r0, #1
 8008a1a:	42a1      	cmp	r1, r4
 8008a1c:	d008      	beq.n	8008a30 <memmove+0x28>
 8008a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a26:	e7f8      	b.n	8008a1a <memmove+0x12>
 8008a28:	4601      	mov	r1, r0
 8008a2a:	4402      	add	r2, r0
 8008a2c:	428a      	cmp	r2, r1
 8008a2e:	d100      	bne.n	8008a32 <memmove+0x2a>
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a3a:	e7f7      	b.n	8008a2c <memmove+0x24>

08008a3c <_free_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4605      	mov	r5, r0
 8008a40:	2900      	cmp	r1, #0
 8008a42:	d040      	beq.n	8008ac6 <_free_r+0x8a>
 8008a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a48:	1f0c      	subs	r4, r1, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfb8      	it	lt
 8008a4e:	18e4      	addlt	r4, r4, r3
 8008a50:	f000 f910 	bl	8008c74 <__malloc_lock>
 8008a54:	4a1c      	ldr	r2, [pc, #112]	; (8008ac8 <_free_r+0x8c>)
 8008a56:	6813      	ldr	r3, [r2, #0]
 8008a58:	b933      	cbnz	r3, 8008a68 <_free_r+0x2c>
 8008a5a:	6063      	str	r3, [r4, #4]
 8008a5c:	6014      	str	r4, [r2, #0]
 8008a5e:	4628      	mov	r0, r5
 8008a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a64:	f000 b90c 	b.w	8008c80 <__malloc_unlock>
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	d908      	bls.n	8008a7e <_free_r+0x42>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	1821      	adds	r1, r4, r0
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf01      	itttt	eq
 8008a74:	6819      	ldreq	r1, [r3, #0]
 8008a76:	685b      	ldreq	r3, [r3, #4]
 8008a78:	1809      	addeq	r1, r1, r0
 8008a7a:	6021      	streq	r1, [r4, #0]
 8008a7c:	e7ed      	b.n	8008a5a <_free_r+0x1e>
 8008a7e:	461a      	mov	r2, r3
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b10b      	cbz	r3, 8008a88 <_free_r+0x4c>
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	d9fa      	bls.n	8008a7e <_free_r+0x42>
 8008a88:	6811      	ldr	r1, [r2, #0]
 8008a8a:	1850      	adds	r0, r2, r1
 8008a8c:	42a0      	cmp	r0, r4
 8008a8e:	d10b      	bne.n	8008aa8 <_free_r+0x6c>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	4401      	add	r1, r0
 8008a94:	1850      	adds	r0, r2, r1
 8008a96:	4283      	cmp	r3, r0
 8008a98:	6011      	str	r1, [r2, #0]
 8008a9a:	d1e0      	bne.n	8008a5e <_free_r+0x22>
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4401      	add	r1, r0
 8008aa2:	6011      	str	r1, [r2, #0]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	e7da      	b.n	8008a5e <_free_r+0x22>
 8008aa8:	d902      	bls.n	8008ab0 <_free_r+0x74>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	e7d6      	b.n	8008a5e <_free_r+0x22>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	1821      	adds	r1, r4, r0
 8008ab4:	428b      	cmp	r3, r1
 8008ab6:	bf01      	itttt	eq
 8008ab8:	6819      	ldreq	r1, [r3, #0]
 8008aba:	685b      	ldreq	r3, [r3, #4]
 8008abc:	1809      	addeq	r1, r1, r0
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	6054      	str	r4, [r2, #4]
 8008ac4:	e7cb      	b.n	8008a5e <_free_r+0x22>
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20001484 	.word	0x20001484

08008acc <sbrk_aligned>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	4e0e      	ldr	r6, [pc, #56]	; (8008b08 <sbrk_aligned+0x3c>)
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	6831      	ldr	r1, [r6, #0]
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	b911      	cbnz	r1, 8008ade <sbrk_aligned+0x12>
 8008ad8:	f000 f8bc 	bl	8008c54 <_sbrk_r>
 8008adc:	6030      	str	r0, [r6, #0]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f8b7 	bl	8008c54 <_sbrk_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d00a      	beq.n	8008b00 <sbrk_aligned+0x34>
 8008aea:	1cc4      	adds	r4, r0, #3
 8008aec:	f024 0403 	bic.w	r4, r4, #3
 8008af0:	42a0      	cmp	r0, r4
 8008af2:	d007      	beq.n	8008b04 <sbrk_aligned+0x38>
 8008af4:	1a21      	subs	r1, r4, r0
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 f8ac 	bl	8008c54 <_sbrk_r>
 8008afc:	3001      	adds	r0, #1
 8008afe:	d101      	bne.n	8008b04 <sbrk_aligned+0x38>
 8008b00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b04:	4620      	mov	r0, r4
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	20001488 	.word	0x20001488

08008b0c <_malloc_r>:
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	1ccd      	adds	r5, r1, #3
 8008b12:	f025 0503 	bic.w	r5, r5, #3
 8008b16:	3508      	adds	r5, #8
 8008b18:	2d0c      	cmp	r5, #12
 8008b1a:	bf38      	it	cc
 8008b1c:	250c      	movcc	r5, #12
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	4607      	mov	r7, r0
 8008b22:	db01      	blt.n	8008b28 <_malloc_r+0x1c>
 8008b24:	42a9      	cmp	r1, r5
 8008b26:	d905      	bls.n	8008b34 <_malloc_r+0x28>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b34:	4e2e      	ldr	r6, [pc, #184]	; (8008bf0 <_malloc_r+0xe4>)
 8008b36:	f000 f89d 	bl	8008c74 <__malloc_lock>
 8008b3a:	6833      	ldr	r3, [r6, #0]
 8008b3c:	461c      	mov	r4, r3
 8008b3e:	bb34      	cbnz	r4, 8008b8e <_malloc_r+0x82>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ffc2 	bl	8008acc <sbrk_aligned>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	d14d      	bne.n	8008bea <_malloc_r+0xde>
 8008b4e:	6834      	ldr	r4, [r6, #0]
 8008b50:	4626      	mov	r6, r4
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d140      	bne.n	8008bd8 <_malloc_r+0xcc>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	eb04 0803 	add.w	r8, r4, r3
 8008b60:	f000 f878 	bl	8008c54 <_sbrk_r>
 8008b64:	4580      	cmp	r8, r0
 8008b66:	d13a      	bne.n	8008bde <_malloc_r+0xd2>
 8008b68:	6821      	ldr	r1, [r4, #0]
 8008b6a:	3503      	adds	r5, #3
 8008b6c:	1a6d      	subs	r5, r5, r1
 8008b6e:	f025 0503 	bic.w	r5, r5, #3
 8008b72:	3508      	adds	r5, #8
 8008b74:	2d0c      	cmp	r5, #12
 8008b76:	bf38      	it	cc
 8008b78:	250c      	movcc	r5, #12
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7ff ffa5 	bl	8008acc <sbrk_aligned>
 8008b82:	3001      	adds	r0, #1
 8008b84:	d02b      	beq.n	8008bde <_malloc_r+0xd2>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	442b      	add	r3, r5
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e00e      	b.n	8008bac <_malloc_r+0xa0>
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	1b52      	subs	r2, r2, r5
 8008b92:	d41e      	bmi.n	8008bd2 <_malloc_r+0xc6>
 8008b94:	2a0b      	cmp	r2, #11
 8008b96:	d916      	bls.n	8008bc6 <_malloc_r+0xba>
 8008b98:	1961      	adds	r1, r4, r5
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	6025      	str	r5, [r4, #0]
 8008b9e:	bf18      	it	ne
 8008ba0:	6059      	strne	r1, [r3, #4]
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	bf08      	it	eq
 8008ba6:	6031      	streq	r1, [r6, #0]
 8008ba8:	5162      	str	r2, [r4, r5]
 8008baa:	604b      	str	r3, [r1, #4]
 8008bac:	4638      	mov	r0, r7
 8008bae:	f104 060b 	add.w	r6, r4, #11
 8008bb2:	f000 f865 	bl	8008c80 <__malloc_unlock>
 8008bb6:	f026 0607 	bic.w	r6, r6, #7
 8008bba:	1d23      	adds	r3, r4, #4
 8008bbc:	1af2      	subs	r2, r6, r3
 8008bbe:	d0b6      	beq.n	8008b2e <_malloc_r+0x22>
 8008bc0:	1b9b      	subs	r3, r3, r6
 8008bc2:	50a3      	str	r3, [r4, r2]
 8008bc4:	e7b3      	b.n	8008b2e <_malloc_r+0x22>
 8008bc6:	6862      	ldr	r2, [r4, #4]
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	bf0c      	ite	eq
 8008bcc:	6032      	streq	r2, [r6, #0]
 8008bce:	605a      	strne	r2, [r3, #4]
 8008bd0:	e7ec      	b.n	8008bac <_malloc_r+0xa0>
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	6864      	ldr	r4, [r4, #4]
 8008bd6:	e7b2      	b.n	8008b3e <_malloc_r+0x32>
 8008bd8:	4634      	mov	r4, r6
 8008bda:	6876      	ldr	r6, [r6, #4]
 8008bdc:	e7b9      	b.n	8008b52 <_malloc_r+0x46>
 8008bde:	230c      	movs	r3, #12
 8008be0:	4638      	mov	r0, r7
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	f000 f84c 	bl	8008c80 <__malloc_unlock>
 8008be8:	e7a1      	b.n	8008b2e <_malloc_r+0x22>
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	e7de      	b.n	8008bac <_malloc_r+0xa0>
 8008bee:	bf00      	nop
 8008bf0:	20001484 	.word	0x20001484

08008bf4 <_realloc_r>:
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	460e      	mov	r6, r1
 8008bfe:	b921      	cbnz	r1, 8008c0a <_realloc_r+0x16>
 8008c00:	4611      	mov	r1, r2
 8008c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	f7ff bf81 	b.w	8008b0c <_malloc_r>
 8008c0a:	b92a      	cbnz	r2, 8008c18 <_realloc_r+0x24>
 8008c0c:	f7ff ff16 	bl	8008a3c <_free_r>
 8008c10:	4625      	mov	r5, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	f000 f838 	bl	8008c8c <_malloc_usable_size_r>
 8008c1c:	4284      	cmp	r4, r0
 8008c1e:	4607      	mov	r7, r0
 8008c20:	d802      	bhi.n	8008c28 <_realloc_r+0x34>
 8008c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c26:	d812      	bhi.n	8008c4e <_realloc_r+0x5a>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff ff6e 	bl	8008b0c <_malloc_r>
 8008c30:	4605      	mov	r5, r0
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d0ed      	beq.n	8008c12 <_realloc_r+0x1e>
 8008c36:	42bc      	cmp	r4, r7
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	bf28      	it	cs
 8008c3e:	463a      	movcs	r2, r7
 8008c40:	f7ff fed4 	bl	80089ec <memcpy>
 8008c44:	4631      	mov	r1, r6
 8008c46:	4640      	mov	r0, r8
 8008c48:	f7ff fef8 	bl	8008a3c <_free_r>
 8008c4c:	e7e1      	b.n	8008c12 <_realloc_r+0x1e>
 8008c4e:	4635      	mov	r5, r6
 8008c50:	e7df      	b.n	8008c12 <_realloc_r+0x1e>
	...

08008c54 <_sbrk_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	2300      	movs	r3, #0
 8008c58:	4d05      	ldr	r5, [pc, #20]	; (8008c70 <_sbrk_r+0x1c>)
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f7 fd10 	bl	8000684 <_sbrk>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_sbrk_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_sbrk_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	2000148c 	.word	0x2000148c

08008c74 <__malloc_lock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__malloc_lock+0x8>)
 8008c76:	f000 b811 	b.w	8008c9c <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	20001490 	.word	0x20001490

08008c80 <__malloc_unlock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__malloc_unlock+0x8>)
 8008c82:	f000 b80c 	b.w	8008c9e <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	20001490 	.word	0x20001490

08008c8c <_malloc_usable_size_r>:
 8008c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c90:	1f18      	subs	r0, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfbc      	itt	lt
 8008c96:	580b      	ldrlt	r3, [r1, r0]
 8008c98:	18c0      	addlt	r0, r0, r3
 8008c9a:	4770      	bx	lr

08008c9c <__retarget_lock_acquire_recursive>:
 8008c9c:	4770      	bx	lr

08008c9e <__retarget_lock_release_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
