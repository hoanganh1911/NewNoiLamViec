
NODE_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006054  08006054  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800605c  0800605c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b8  20000074  080060d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000422c  080060d8  0002422c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019912  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e7  00000000  00000000  000399b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0003e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d9  00000000  00000000  0003f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d94  00000000  00000000  00057d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae12  00000000  00000000  0006fb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb0  00000000  00000000  0010a990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f68 	.word	0x08005f68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f68 	.word	0x08005f68

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090
 8000514:	20000144 	.word	0x20000144

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc7f 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f83b 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f97d 	bl	8000824 <MX_GPIO_Init>
  MX_I2C1_Init();
 800052a:	f000 f89f 	bl	800066c <MX_I2C1_Init>
  MX_SPI1_Init();
 800052e:	f000 f8cb 	bl	80006c8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f94d 	bl	80007d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000536:	f000 f8fd 	bl	8000734 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TFT_init();
 800053a:	f004 fa03 	bl	8004944 <TFT_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of KeyMatrix_Task */
  osThreadDef(KeyMatrix_Task, StartKeyMatrix_Task, osPriorityNormal, 0, 128);
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0x74>)
 8000540:	f107 041c 	add.w	r4, r7, #28
 8000544:	461d      	mov	r5, r3
 8000546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyMatrix_TaskHandle = osThreadCreate(osThread(KeyMatrix_Task), NULL);
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fd1e 	bl	8002f9a <osThreadCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <main+0x78>)
 8000562:	6013      	str	r3, [r2, #0]

  /* definition and creation of TFT_Task */
  osThreadDef(TFT_Task, StartTFT_Task, osPriorityAboveNormal, 0, 128);
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <main+0x7c>)
 8000566:	463c      	mov	r4, r7
 8000568:	461d      	mov	r5, r3
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TFT_TaskHandle = osThreadCreate(osThread(TFT_Task), NULL);
 8000576:	463b      	mov	r3, r7
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fd0d 	bl	8002f9a <osThreadCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <main+0x80>)
 8000584:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000586:	f002 fd01 	bl	8002f8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x72>
 800058c:	08005f9c 	.word	0x08005f9c
 8000590:	2000047c 	.word	0x2000047c
 8000594:	08005fb8 	.word	0x08005fb8
 8000598:	20000480 	.word	0x20000480

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fc12 	bl	8005dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <SystemClock_Config+0xc8>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xcc>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000618:	2305      	movs	r3, #5
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f827 	bl	8001674 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f9df 	bl	80009ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2103      	movs	r1, #3
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fa89 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000658:	f000 f9c9 	bl	80009ee <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f000 fe9f 	bl	80013ec <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f99b 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000344 	.word	0x20000344
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_SPI1_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_SPI1_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI1_Init+0x64>)
 8000714:	220a      	movs	r2, #10
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_SPI1_Init+0x64>)
 800071a:	f001 fc35 	bl	8001f88 <HAL_SPI_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 f963 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000398 	.word	0x20000398
 8000730:	40013000 	.word	0x40013000

08000734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_TIM3_Init+0x98>)
 8000754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000758:	2247      	movs	r2, #71	; 0x47
 800075a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM3_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_TIM3_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000778:	f001 fc8f 	bl	800209a <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f934 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_TIM3_Init+0x94>)
 8000794:	f001 fe94 	bl	80024c0 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f926 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_TIM3_Init+0x94>)
 80007b0:	f002 f890 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007ba:	f000 f918 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200003f0 	.word	0x200003f0
 80007cc:	40000400 	.word	0x40000400

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f002 f8e6 	bl	80029d8 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f8ec 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000438 	.word	0x20000438
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b58      	ldr	r3, [pc, #352]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a57      	ldr	r2, [pc, #348]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b55      	ldr	r3, [pc, #340]	; (80009a0 <MX_GPIO_Init+0x17c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <MX_GPIO_Init+0x17c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a50      	ldr	r2, [pc, #320]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b4a      	ldr	r3, [pc, #296]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a49      	ldr	r2, [pc, #292]	; (80009a0 <MX_GPIO_Init+0x17c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b43      	ldr	r3, [pc, #268]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a42      	ldr	r2, [pc, #264]	; (80009a0 <MX_GPIO_Init+0x17c>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x180>)
 80008b2:	f000 fd5d 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_1_Pin|Relay_2_Pin|TFT_DB3_Pin|TFT_DB2_Pin
 80008b6:	2200      	movs	r2, #0
 80008b8:	f649 7103 	movw	r1, #40707	; 0x9f03
 80008bc:	483a      	ldr	r0, [pc, #232]	; (80009a8 <MX_GPIO_Init+0x184>)
 80008be:	f000 fd57 	bl	8001370 <HAL_GPIO_WritePin>
                          |TFT_DB1_Pin|TFT_DB0_Pin|TFT_LED_Pin|TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|W25Q_CS_Pin|LORA_RST_Pin|TFT_DB7_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 017f 	movw	r1, #61567	; 0xf07f
 80008c8:	4838      	ldr	r0, [pc, #224]	; (80009ac <MX_GPIO_Init+0x188>)
 80008ca:	f000 fd51 	bl	8001370 <HAL_GPIO_WritePin>
                          |TFT_DB6_Pin|TFT_DB5_Pin|TFT_DB4_Pin|TFT_RD_Pin
                          |TFT_WR_Pin|TFT_RS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	482f      	ldr	r0, [pc, #188]	; (80009a4 <MX_GPIO_Init+0x180>)
 80008e8:	f000 fbbe 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_1_Pin Relay_2_Pin TFT_DB3_Pin TFT_DB2_Pin
                           TFT_DB1_Pin TFT_DB0_Pin TFT_LED_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = Relay_1_Pin|Relay_2_Pin|TFT_DB3_Pin|TFT_DB2_Pin
 80008ec:	f649 7303 	movw	r3, #40707	; 0x9f03
 80008f0:	617b      	str	r3, [r7, #20]
                          |TFT_DB1_Pin|TFT_DB0_Pin|TFT_LED_Pin|TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4828      	ldr	r0, [pc, #160]	; (80009a8 <MX_GPIO_Init+0x184>)
 8000906:	f000 fbaf 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090a:	2310      	movs	r3, #16
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4822      	ldr	r0, [pc, #136]	; (80009a8 <MX_GPIO_Init+0x184>)
 8000920:	f000 fba2 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin W25Q_CS_Pin LORA_RST_Pin TFT_DB7_Pin
                           TFT_DB6_Pin TFT_DB5_Pin TFT_DB4_Pin TFT_RD_Pin
                           TFT_WR_Pin TFT_RS_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|W25Q_CS_Pin|LORA_RST_Pin|TFT_DB7_Pin
 8000924:	f24f 037f 	movw	r3, #61567	; 0xf07f
 8000928:	617b      	str	r3, [r7, #20]
                          |TFT_DB6_Pin|TFT_DB5_Pin|TFT_DB4_Pin|TFT_RD_Pin
                          |TFT_WR_Pin|TFT_RS_Pin|TFT_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <MX_GPIO_Init+0x188>)
 800093e:	f000 fb93 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_INT_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <MX_GPIO_Init+0x188>)
 800095a:	f000 fb85 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF_INT_Pin */
  GPIO_InitStruct.Pin = PCF_INT_Pin;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCF_INT_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <MX_GPIO_Init+0x188>)
 8000974:	f000 fb78 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2105      	movs	r1, #5
 800097c:	2017      	movs	r0, #23
 800097e:	f000 fb49 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000982:	2017      	movs	r0, #23
 8000984:	f000 fb62 	bl	800104c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2105      	movs	r1, #5
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f000 fb41 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000992:	2028      	movs	r0, #40	; 0x28
 8000994:	f000 fb5a 	bl	800104c <HAL_NVIC_EnableIRQ>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <StartKeyMatrix_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartKeyMatrix_Task */
void StartKeyMatrix_Task(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f002 fb3a 	bl	8003032 <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartKeyMatrix_Task+0x8>

080009c0 <StartTFT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFT_Task */
void StartTFT_Task(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFT_Task */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 fb32 	bl	8003032 <osDelay>
 80009ce:	e7fb      	b.n	80009c8 <StartTFT_Task+0x8>

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fa3f 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_MspInit+0x60>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_MspInit+0x60>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_MspInit+0x60>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x60>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_MspInit+0x60>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x60>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	f06f 0003 	mvn.w	r0, #3
 8000a3e:	f000 fae9 	bl	8001014 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fae3 	bl	8001014 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f000 fad6 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_SPI_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12b      	bne.n	8000b66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b46:	23e0      	movs	r3, #224	; 0xe0
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b56:	2305      	movs	r3, #5
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_SPI_MspInit+0x8c>)
 8000b62:	f000 fa81 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40013000 	.word	0x40013000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10d      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0x8c>)
 8000c36:	f000 fa17 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_InitTick+0xe8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <HAL_InitTick+0xe8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <HAL_InitTick+0xe8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f94c 	bl	8001f24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 f91d 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9e:	f001 f919 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	4a24      	ldr	r2, [pc, #144]	; (8000d3c <HAL_InitTick+0xec>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	0c9b      	lsrs	r3, r3, #18
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <HAL_InitTick+0xf0>)
 8000ce0:	f001 f9db 	bl	800209a <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d11b      	bne.n	8000d2a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cf2:	4813      	ldr	r0, [pc, #76]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cf4:	f001 fa7a 	bl	80021ec <HAL_TIM_Base_Start_IT>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d111      	bne.n	8000d2a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d06:	201c      	movs	r0, #28
 8000d08:	f000 f9a0 	bl	800104c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d808      	bhi.n	8000d24 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	201c      	movs	r0, #28
 8000d18:	f000 f97c 	bl	8001014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_InitTick+0xf4>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e002      	b.n	8000d2a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3738      	adds	r7, #56	; 0x38
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	20000484 	.word	0x20000484
 8000d44:	20000004 	.word	0x20000004

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PCF_INT_Pin);
 8000d78:	2080      	movs	r0, #128	; 0x80
 8000d7a:	f000 fb13 	bl	80013a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM2_IRQHandler+0x10>)
 8000d8a:	f001 fa91 	bl	80022b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000484 	.word	0x20000484

08000d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8000d9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000da0:	f000 fb00 	bl	80013a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f004 ffc5 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb8b 	bl	8000518 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e10:	08006064 	.word	0x08006064
  ldr r2, =_sbss
 8000e14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e18:	2000422c 	.word	0x2000422c

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f8d8 	bl	8000ffe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fefe 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fdd0 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200004cc 	.word	0x200004cc

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200004cc 	.word	0x200004cc

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff4c 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001026:	f7ff ff61 	bl	8000eec <__NVIC_GetPriorityGrouping>
 800102a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ffb1 	bl	8000f98 <NVIC_EncodePriority>
 8001036:	4602      	mov	r2, r0
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <__NVIC_SetPriority>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff54 	bl	8000f08 <__NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e159      	b.n	8001338 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8148 	bne.w	8001332 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80a2 	beq.w	8001332 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b57      	ldr	r3, [pc, #348]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a56      	ldr	r2, [pc, #344]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b54      	ldr	r3, [pc, #336]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a49      	ldr	r2, [pc, #292]	; (8001358 <HAL_GPIO_Init+0x2f0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x202>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2f4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x1fe>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_GPIO_Init+0x2f8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_GPIO_Init+0x2fc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1f6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_GPIO_Init+0x300>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1f2>
 8001256:	2304      	movs	r3, #4
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x204>
 800125a:	2307      	movs	r3, #7
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x204>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x204>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x204>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x204>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_GPIO_Init+0x304>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_GPIO_Init+0x304>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x304>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <HAL_GPIO_Init+0x304>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_GPIO_Init+0x304>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001302:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_GPIO_Init+0x304>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f aea2 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f806 	bl	80013d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40013c00 	.word	0x40013c00

080013d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e12b      	b.n	8001656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fb22 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800144e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001450:	f000 fd40 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a81      	ldr	r2, [pc, #516]	; (8001660 <HAL_I2C_Init+0x274>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d807      	bhi.n	8001470 <HAL_I2C_Init+0x84>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a80      	ldr	r2, [pc, #512]	; (8001664 <HAL_I2C_Init+0x278>)
 8001464:	4293      	cmp	r3, r2
 8001466:	bf94      	ite	ls
 8001468:	2301      	movls	r3, #1
 800146a:	2300      	movhi	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	e006      	b.n	800147e <HAL_I2C_Init+0x92>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a7d      	ldr	r2, [pc, #500]	; (8001668 <HAL_I2C_Init+0x27c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0e7      	b.n	8001656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4a78      	ldr	r2, [pc, #480]	; (800166c <HAL_I2C_Init+0x280>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	; (8001660 <HAL_I2C_Init+0x274>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d802      	bhi.n	80014c0 <HAL_I2C_Init+0xd4>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	e009      	b.n	80014d4 <HAL_I2C_Init+0xe8>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_I2C_Init+0x284>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	3301      	adds	r3, #1
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	495c      	ldr	r1, [pc, #368]	; (8001660 <HAL_I2C_Init+0x274>)
 80014f0:	428b      	cmp	r3, r1
 80014f2:	d819      	bhi.n	8001528 <HAL_I2C_Init+0x13c>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e59      	subs	r1, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001502:	1c59      	adds	r1, r3, #1
 8001504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001508:	400b      	ands	r3, r1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <HAL_I2C_Init+0x138>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e59      	subs	r1, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fbb1 f3f3 	udiv	r3, r1, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	e051      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001524:	2304      	movs	r3, #4
 8001526:	e04f      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_I2C_Init+0x168>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	440b      	add	r3, r1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e012      	b.n	800157a <HAL_I2C_Init+0x18e>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e58      	subs	r0, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	0099      	lsls	r1, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Init+0x196>
 800157e:	2301      	movs	r3, #1
 8001580:	e022      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10e      	bne.n	80015a8 <HAL_I2C_Init+0x1bc>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1e58      	subs	r0, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	440b      	add	r3, r1
 8001598:	fbb0 f3f3 	udiv	r3, r0, r3
 800159c:	3301      	adds	r3, #1
 800159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	6809      	ldr	r1, [r1, #0]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6911      	ldr	r1, [r2, #16]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68d2      	ldr	r2, [r2, #12]
 8001602:	4311      	orrs	r1, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	430b      	orrs	r3, r1
 800160a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	000186a0 	.word	0x000186a0
 8001664:	001e847f 	.word	0x001e847f
 8001668:	003d08ff 	.word	0x003d08ff
 800166c:	431bde83 	.word	0x431bde83
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e267      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d075      	beq.n	800177e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001692:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <HAL_RCC_OscConfig+0x108>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d157      	bne.n	800177c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e242      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x74>
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a75      	ldr	r2, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6c      	ldr	r2, [pc, #432]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 800170c:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b66      	ldr	r3, [pc, #408]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fbae 	bl	8000e8c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fbaa 	bl	8000e8c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e207      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xc0>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb9a 	bl	8000e8c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb96 	bl	8000e8c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1f3      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0xe8>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e1c7      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	e03a      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb4f 	bl	8000e8c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb4b 	bl	8000e8c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1a8      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4925      	ldr	r1, [pc, #148]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e015      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fb2e 	bl	8000e8c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fb2a 	bl	8000e8c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e187      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d036      	beq.n	80018cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x248>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fb0e 	bl	8000e8c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fb0a 	bl	8000e8c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e167      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x200>
 8001892:	e01b      	b.n	80018cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x248>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff faf7 	bl	8000e8c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	e00e      	b.n	80018c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff faf3 	bl	8000e8c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d907      	bls.n	80018c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e150      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	42470000 	.word	0x42470000
 80018bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ea      	bne.n	80018a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8097 	beq.w	8001a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a7c      	ldr	r2, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b77      	ldr	r3, [pc, #476]	; (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b74      	ldr	r3, [pc, #464]	; (8001ae8 <HAL_RCC_OscConfig+0x474>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a73      	ldr	r2, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fab3 	bl	8000e8c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7ff faaf 	bl	8000e8c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e10c      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x2ea>
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a63      	ldr	r2, [pc, #396]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x324>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b05      	cmp	r3, #5
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x30c>
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a5e      	ldr	r2, [pc, #376]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a5b      	ldr	r2, [pc, #364]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0x324>
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a57      	ldr	r2, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a54      	ldr	r2, [pc, #336]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d015      	beq.n	80019cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa74 	bl	8000e8c <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7ff fa70 	bl	8000e8c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0cb      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ee      	beq.n	80019a8 <HAL_RCC_OscConfig+0x334>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa5e 	bl	8000e8c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff fa5a 	bl	8000e8c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0b5      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a1 	beq.w	8001b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d05c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d141      	bne.n	8001aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fa2e 	bl	8000e8c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fa2a 	bl	8000e8c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e087      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x478>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fa03 	bl	8000e8c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f9ff 	bl	8000e8c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e05c      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x416>
 8001aa8:	e054      	b.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x478>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f9ec 	bl	8000e8c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f9e8 	bl	8000e8c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e045      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
 8001ad6:	e03d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e038      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x4ec>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d028      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d121      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d111      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cc      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d90c      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b65      	ldr	r3, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d044      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e067      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff f91a 	bl	8000e8c <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f916 	bl	8000e8c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ffa0 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08005fdc 	.word	0x08005fdc
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d34:	b090      	sub	sp, #64	; 0x40
 8001d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d00d      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x40>
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	f200 80a1 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d62:	e09b      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d68:	e09b      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d6e:	e098      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d028      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	627a      	str	r2, [r7, #36]	; 0x24
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9c:	fb03 f201 	mul.w	r2, r3, r1
 8001da0:	2300      	movs	r3, #0
 8001da2:	fb00 f303 	mul.w	r3, r0, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	4a43      	ldr	r2, [pc, #268]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001daa:	fba0 1202 	umull	r1, r2, r0, r2
 8001dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db0:	460a      	mov	r2, r1
 8001db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	4413      	add	r3, r2
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	61fa      	str	r2, [r7, #28]
 8001dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dca:	f7fe fa09 	bl	80001e0 <__aeabi_uldivmod>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd6:	e053      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	2200      	movs	r2, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	617a      	str	r2, [r7, #20]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dea:	f04f 0b00 	mov.w	fp, #0
 8001dee:	4652      	mov	r2, sl
 8001df0:	465b      	mov	r3, fp
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e00:	0150      	lsls	r0, r2, #5
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	ebb2 080a 	subs.w	r8, r2, sl
 8001e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e22:	ebb2 0408 	subs.w	r4, r2, r8
 8001e26:	eb63 0509 	sbc.w	r5, r3, r9
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	00eb      	lsls	r3, r5, #3
 8001e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e38:	00e2      	lsls	r2, r4, #3
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	eb14 030a 	adds.w	r3, r4, sl
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	eb45 030b 	adc.w	r3, r5, fp
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	60fa      	str	r2, [r7, #12]
 8001e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e74:	f7fe f9b4 	bl	80001e0 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3740      	adds	r7, #64	; 0x40
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	017d7840 	.word	0x017d7840

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08005fec 	.word	0x08005fec

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08005fec 	.word	0x08005fec

08001f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	220f      	movs	r2, #15
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_RCC_GetClockConfig+0x60>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0207 	and.w	r2, r3, #7
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	601a      	str	r2, [r3, #0]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07b      	b.n	8002092 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001faa:	d009      	beq.n	8001fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fd86 	bl	8000aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	ea42 0103 	orr.w	r1, r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0104 	and.w	r1, r3, #4
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 0210 	and.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e041      	b.n	8002130 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fd5b 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f000 fae1 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d001      	beq.n	8002150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e03c      	b.n	80021ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_TIM_Base_Start+0xa0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start+0x5c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start+0x5c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_TIM_Base_Start+0xa4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start+0x5c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_TIM_Base_Start+0xa8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start+0x5c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_TIM_Base_Start+0xac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start+0x5c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_TIM_Base_Start+0xb0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d001      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e044      	b.n	800228e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_TIM_Base_Start_IT+0xb0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d018      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x6c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222e:	d013      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x6c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00e      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x6c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x6c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d004      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x6c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d111      	bne.n	800227c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d010      	beq.n	800228c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	e007      	b.n	800228c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00
 80022ac:	40014000 	.word	0x40014000

080022b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0202 	mvn.w	r2, #2
 80022dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f9b5 	bl	8002662 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f9a7 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f9b8 	bl	8002676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0204 	mvn.w	r2, #4
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f98b 	bl	8002662 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f97d 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f98e 	bl	8002676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b08      	cmp	r3, #8
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b08      	cmp	r3, #8
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0208 	mvn.w	r2, #8
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f961 	bl	8002662 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f953 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f964 	bl	8002676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0210 	mvn.w	r2, #16
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2208      	movs	r2, #8
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f937 	bl	8002662 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f929 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f93a 	bl	8002676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0201 	mvn.w	r2, #1
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe face 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fab2 	bl	80029c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8ff 	bl	800268a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0220 	mvn.w	r2, #32
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa7c 	bl	80029b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_ConfigClockSource+0x1c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0b4      	b.n	8002646 <HAL_TIM_ConfigClockSource+0x186>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002514:	d03e      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0xd4>
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	f200 8087 	bhi.w	800262c <HAL_TIM_ConfigClockSource+0x16c>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	f000 8086 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x172>
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d87f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d01a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xa6>
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d87b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b60      	cmp	r3, #96	; 0x60
 8002536:	d050      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x11a>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d877      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d03c      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xfa>
 8002540:	2b50      	cmp	r3, #80	; 0x50
 8002542:	d873      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d058      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x13a>
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d86f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b30      	cmp	r3, #48	; 0x30
 800254e:	d064      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b30      	cmp	r3, #48	; 0x30
 8002552:	d86b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b20      	cmp	r3, #32
 8002556:	d060      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b20      	cmp	r3, #32
 800255a:	d867      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x15a>
 8002560:	2b10      	cmp	r3, #16
 8002562:	d05a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x15a>
 8002564:	e062      	b.n	800262c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f000 f98d 	bl	8002894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
      break;
 8002592:	e04f      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 f976 	bl	8002894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b6:	609a      	str	r2, [r3, #8]
      break;
 80025b8:	e03c      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 f8ea 	bl	80027a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2150      	movs	r1, #80	; 0x50
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f943 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025d8:	e02c      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f909 	bl	80027fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2160      	movs	r1, #96	; 0x60
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f933 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 80025f8:	e01c      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f8ca 	bl	80027a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f923 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 8002618:	e00c      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f000 f91a 	bl	800285e <TIM_ITRx_SetConfig>
      break;
 800262a:	e003      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e000      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a34      	ldr	r2, [pc, #208]	; (8002784 <TIM_Base_SetConfig+0xe4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00f      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <TIM_Base_SetConfig+0xe8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a30      	ldr	r2, [pc, #192]	; (800278c <TIM_Base_SetConfig+0xec>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <TIM_Base_SetConfig+0xf0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a25      	ldr	r2, [pc, #148]	; (8002784 <TIM_Base_SetConfig+0xe4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01b      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d017      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <TIM_Base_SetConfig+0xe8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <TIM_Base_SetConfig+0xec>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00f      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <TIM_Base_SetConfig+0xf0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <TIM_Base_SetConfig+0xf4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <TIM_Base_SetConfig+0xf8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <TIM_Base_SetConfig+0xfc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a08      	ldr	r2, [pc, #32]	; (8002784 <TIM_Base_SetConfig+0xe4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40000c00 	.word	0x40000c00
 8002794:	40014000 	.word	0x40014000
 8002798:	40014400 	.word	0x40014400
 800279c:	40014800 	.word	0x40014800

080027a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f023 0201 	bic.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 030a 	bic.w	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0210 	bic.w	r2, r3, #16
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	031b      	lsls	r3, r3, #12
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800283a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	f043 0307 	orr.w	r3, r3, #7
 8002880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e050      	b.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d013      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10c      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4313      	orrs	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40000c00 	.word	0x40000c00
 80029ac:	40014000 	.word	0x40014000

080029b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e03f      	b.n	8002a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe f8de 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f829 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b0c0      	sub	sp, #256	; 0x100
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	ea40 0301 	orr.w	r3, r0, r1
 8002a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002acc:	f021 010c 	bic.w	r1, r1, #12
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	6999      	ldr	r1, [r3, #24]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	ea40 0301 	orr.w	r3, r0, r1
 8002afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <UART_SetConfig+0x2cc>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0xa0>
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <UART_SetConfig+0x2d0>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f9f2 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b1c:	e003      	b.n	8002b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1e:	f7ff f9d9 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	f040 810c 	bne.w	8002d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b56:	4621      	mov	r1, r4
 8002b58:	eb12 0801 	adds.w	r8, r2, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb43 0901 	adc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bb8:	f7fd fb12 	bl	80001e0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011c      	lsls	r4, r3, #4
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002be4:	415b      	adcs	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bec:	4641      	mov	r1, r8
 8002bee:	eb12 0a01 	adds.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	469b      	mov	fp, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	eb1a 0303 	adds.w	r3, sl, r3
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
 8002c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c4e:	f7fd fac7 	bl	80001e0 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	1acb      	subs	r3, r1, r3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 2302 	umull	r2, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c7c:	441c      	add	r4, r3
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d0a:	f7fd fa69 	bl	80001e0 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d3c:	e105      	b.n	8002f4a <UART_SetConfig+0x4d6>
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	6239      	str	r1, [r7, #32]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1854      	adds	r4, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb43 0501 	adc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d94:	464b      	mov	r3, r9
 8002d96:	eb45 0303 	adc.w	r3, r5, r3
 8002d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dba:	4629      	mov	r1, r5
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	008a      	lsls	r2, r1, #2
 8002dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dcc:	f7fd fa08 	bl	80001e0 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011c      	lsls	r4, r3, #4
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	61b9      	str	r1, [r7, #24]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6139      	str	r1, [r7, #16]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e34:	464b      	mov	r3, r9
 8002e36:	460a      	mov	r2, r1
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e58:	4649      	mov	r1, r9
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e62:	4641      	mov	r1, r8
 8002e64:	008a      	lsls	r2, r1, #2
 8002e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e6a:	f7fd f9b9 	bl	80001e0 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e74:	fba3 1302 	umull	r1, r3, r3, r2
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	2164      	movs	r1, #100	; 0x64
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	3332      	adds	r3, #50	; 0x32
 8002e86:	4a34      	ldr	r2, [pc, #208]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e92:	441c      	add	r4, r3
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	1851      	adds	r1, r2, r1
 8002eb6:	6039      	str	r1, [r7, #0]
 8002eb8:	4649      	mov	r1, r9
 8002eba:	414b      	adcs	r3, r1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eca:	4659      	mov	r1, fp
 8002ecc:	00cb      	lsls	r3, r1, #3
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	00ca      	lsls	r2, r1, #3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	4603      	mov	r3, r0
 8002ede:	4642      	mov	r2, r8
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	667a      	str	r2, [r7, #100]	; 0x64
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f06:	4649      	mov	r1, r9
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f10:	4641      	mov	r1, r8
 8002f12:	008a      	lsls	r2, r1, #2
 8002f14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f18:	f7fd f962 	bl	80001e0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f22:	fba3 1302 	umull	r1, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2164      	movs	r1, #100	; 0x64
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	3332      	adds	r3, #50	; 0x32
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4422      	add	r2, r4
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	2b84      	cmp	r3, #132	; 0x84
 8002f70:	d005      	beq.n	8002f7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3303      	adds	r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f90:	f000 faf6 	bl	8003580 <vTaskStartScheduler>
  
  return osOK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9c:	b089      	sub	sp, #36	; 0x24
 8002f9e:	af04      	add	r7, sp, #16
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <osThreadCreate+0x54>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685c      	ldr	r4, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681d      	ldr	r5, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691e      	ldr	r6, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffc8 	bl	8002f5c <makeFreeRtosPriority>
 8002fcc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fd6:	9202      	str	r2, [sp, #8]
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	9100      	str	r1, [sp, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4632      	mov	r2, r6
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f000 f8ed 	bl	80031c2 <xTaskCreateStatic>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e01c      	b.n	8003028 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685c      	ldr	r4, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ffa:	b29e      	uxth	r6, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ffaa 	bl	8002f5c <makeFreeRtosPriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4632      	mov	r2, r6
 8003016:	4629      	mov	r1, r5
 8003018:	4620      	mov	r0, r4
 800301a:	f000 f92f 	bl	800327c <xTaskCreate>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003032 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <osDelay+0x16>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e000      	b.n	800304a <osDelay+0x18>
 8003048:	2301      	movs	r3, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fa64 	bl	8003518 <vTaskDelay>
  
  return osOK;
 8003050:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f103 0208 	add.w	r2, r3, #8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003072:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0208 	add.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 0208 	add.w	r2, r3, #8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003112:	d103      	bne.n	800311c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e00c      	b.n	8003136 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3308      	adds	r3, #8
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e002      	b.n	800312a <vListInsert+0x2e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d2f6      	bcs.n	8003124 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6852      	ldr	r2, [r2, #4]
 800318e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d103      	bne.n	80031a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08e      	sub	sp, #56	; 0x38
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <xTaskCreateStatic+0x46>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61fb      	str	r3, [r7, #28]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003208:	23b4      	movs	r3, #180	; 0xb4
 800320a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2bb4      	cmp	r3, #180	; 0xb4
 8003210:	d00a      	beq.n	8003228 <xTaskCreateStatic+0x66>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	61bb      	str	r3, [r7, #24]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003228:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01e      	beq.n	800326e <xTaskCreateStatic+0xac>
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	2202      	movs	r2, #2
 8003244:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003248:	2300      	movs	r3, #0
 800324a:	9303      	str	r3, [sp, #12]
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f851 	bl	8003308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003268:	f000 f8ec 	bl	8003444 <prvAddNewTaskToReadyList>
 800326c:	e001      	b.n	8003272 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003272:	697b      	ldr	r3, [r7, #20]
	}
 8003274:	4618      	mov	r0, r3
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fef1 	bl	8004078 <pvPortMalloc>
 8003296:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800329e:	20b4      	movs	r0, #180	; 0xb4
 80032a0:	f000 feea 	bl	8004078 <pvPortMalloc>
 80032a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
 80032b2:	e005      	b.n	80032c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f000 ffab 	bl	8004210 <vPortFree>
 80032ba:	e001      	b.n	80032c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d017      	beq.n	80032f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	2300      	movs	r3, #0
 80032d2:	9303      	str	r3, [sp, #12]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f80f 	bl	8003308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ea:	69f8      	ldr	r0, [r7, #28]
 80032ec:	f000 f8aa 	bl	8003444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e002      	b.n	80032fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032fc:	69bb      	ldr	r3, [r7, #24]
	}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003320:	3b01      	subs	r3, #1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <prvInitialiseNewTask+0x48>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	617b      	str	r3, [r7, #20]
}
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01f      	beq.n	8003396 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e012      	b.n	8003382 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	7819      	ldrb	r1, [r3, #0]
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	3334      	adds	r3, #52	; 0x34
 800336c:	460a      	mov	r2, r1
 800336e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	3301      	adds	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d9e9      	bls.n	800335c <prvInitialiseNewTask+0x54>
 8003388:	e000      	b.n	800338c <prvInitialiseNewTask+0x84>
			{
				break;
 800338a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	e003      	b.n	800339e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d901      	bls.n	80033a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033a4:	2306      	movs	r3, #6
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	3304      	adds	r3, #4
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fe6b 	bl	800309a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	3318      	adds	r3, #24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fe66 	bl	800309a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	f1c3 0207 	rsb	r2, r3, #7
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	334c      	adds	r3, #76	; 0x4c
 80033f8:	2260      	movs	r2, #96	; 0x60
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 fce9 	bl	8005dd4 <memset>
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <prvInitialiseNewTask+0x130>)
 8003406:	651a      	str	r2, [r3, #80]	; 0x50
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	4a0c      	ldr	r2, [pc, #48]	; (800343c <prvInitialiseNewTask+0x134>)
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <prvInitialiseNewTask+0x138>)
 8003412:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	69b8      	ldr	r0, [r7, #24]
 800341a:	f000 fc1f 	bl	8003c5c <pxPortInitialiseStack>
 800341e:	4602      	mov	r2, r0
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08006014 	.word	0x08006014
 800343c:	08006034 	.word	0x08006034
 8003440:	08005ff4 	.word	0x08005ff4

08003444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800344c:	f000 fd32 	bl	8003eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 8003458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003462:	4a27      	ldr	r2, [pc, #156]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d110      	bne.n	8003492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003470:	f000 facc 	bl	8003a0c <prvInitialiseTaskLists>
 8003474:	e00d      	b.n	8003492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <prvAddNewTaskToReadyList+0xc0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d802      	bhi.n	8003492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <prvAddNewTaskToReadyList+0xc4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <prvAddNewTaskToReadyList+0xc4>)
 800349a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2201      	movs	r2, #1
 80034a2:	409a      	lsls	r2, r3
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <prvAddNewTaskToReadyList+0xc8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <prvAddNewTaskToReadyList+0xc8>)
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <prvAddNewTaskToReadyList+0xcc>)
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7ff fdf5 	bl	80030b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034ca:	f000 fd23 	bl	8003f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <prvAddNewTaskToReadyList+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d207      	bcs.n	80034f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <prvAddNewTaskToReadyList+0xd0>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200005d0 	.word	0x200005d0
 8003500:	200004d0 	.word	0x200004d0
 8003504:	200005dc 	.word	0x200005dc
 8003508:	200005ec 	.word	0x200005ec
 800350c:	200005d8 	.word	0x200005d8
 8003510:	200004d4 	.word	0x200004d4
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <vTaskDelay+0x60>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <vTaskDelay+0x30>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	60bb      	str	r3, [r7, #8]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003548:	f000 f884 	bl	8003654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800354c:	2100      	movs	r1, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb1e 	bl	8003b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003554:	f000 f88c 	bl	8003670 <xTaskResumeAll>
 8003558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d107      	bne.n	8003570 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <vTaskDelay+0x64>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200005f8 	.word	0x200005f8
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800358e:	463a      	mov	r2, r7
 8003590:	1d39      	adds	r1, r7, #4
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffa4 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	9202      	str	r2, [sp, #8]
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	460a      	mov	r2, r1
 80035ae:	4921      	ldr	r1, [pc, #132]	; (8003634 <vTaskStartScheduler+0xb4>)
 80035b0:	4821      	ldr	r0, [pc, #132]	; (8003638 <vTaskStartScheduler+0xb8>)
 80035b2:	f7ff fe06 	bl	80031c2 <xTaskCreateStatic>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <vTaskStartScheduler+0xbc>)
 80035ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <vTaskStartScheduler+0xbc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e001      	b.n	80035ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11b      	bne.n	800360c <vTaskStartScheduler+0x8c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
}
 80035e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <vTaskStartScheduler+0xc0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	334c      	adds	r3, #76	; 0x4c
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <vTaskStartScheduler+0xc4>)
 80035f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <vTaskStartScheduler+0xc8>)
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <vTaskStartScheduler+0xcc>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <vTaskStartScheduler+0xd0>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003606:	f000 fbb3 	bl	8003d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800360a:	e00e      	b.n	800362a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003612:	d10a      	bne.n	800362a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	60fb      	str	r3, [r7, #12]
}
 8003626:	bf00      	nop
 8003628:	e7fe      	b.n	8003628 <vTaskStartScheduler+0xa8>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08005fd4 	.word	0x08005fd4
 8003638:	080039dd 	.word	0x080039dd
 800363c:	200005f4 	.word	0x200005f4
 8003640:	200004d0 	.word	0x200004d0
 8003644:	20000010 	.word	0x20000010
 8003648:	200005f0 	.word	0x200005f0
 800364c:	200005dc 	.word	0x200005dc
 8003650:	200005d4 	.word	0x200005d4

08003654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <vTaskSuspendAll+0x18>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a03      	ldr	r2, [pc, #12]	; (800366c <vTaskSuspendAll+0x18>)
 8003660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	200005f8 	.word	0x200005f8

08003670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <xTaskResumeAll+0x114>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xTaskResumeAll+0x2c>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	603b      	str	r3, [r7, #0]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800369c:	f000 fc0a 	bl	8003eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036a0:	4b38      	ldr	r3, [pc, #224]	; (8003784 <xTaskResumeAll+0x114>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4a37      	ldr	r2, [pc, #220]	; (8003784 <xTaskResumeAll+0x114>)
 80036a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <xTaskResumeAll+0x114>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d161      	bne.n	8003776 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <xTaskResumeAll+0x118>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d05d      	beq.n	8003776 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ba:	e02e      	b.n	800371a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036bc:	4b33      	ldr	r3, [pc, #204]	; (800378c <xTaskResumeAll+0x11c>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3318      	adds	r3, #24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fd50 	bl	800316e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fd4b 	bl	800316e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <xTaskResumeAll+0x120>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <xTaskResumeAll+0x120>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a27      	ldr	r2, [pc, #156]	; (8003794 <xTaskResumeAll+0x124>)
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7ff fcd7 	bl	80030b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <xTaskResumeAll+0x128>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <xTaskResumeAll+0x12c>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800371a:	4b1c      	ldr	r3, [pc, #112]	; (800378c <xTaskResumeAll+0x11c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cc      	bne.n	80036bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003728:	f000 fa12 	bl	8003b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <xTaskResumeAll+0x130>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003738:	f000 f836 	bl	80037a8 <xTaskIncrementTick>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <xTaskResumeAll+0x12c>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f1      	bne.n	8003738 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003754:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <xTaskResumeAll+0x130>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <xTaskResumeAll+0x12c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003762:	2301      	movs	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <xTaskResumeAll+0x134>)
 8003768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003776:	f000 fbcd 	bl	8003f14 <vPortExitCritical>

	return xAlreadyYielded;
 800377a:	68bb      	ldr	r3, [r7, #8]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200005f8 	.word	0x200005f8
 8003788:	200005d0 	.word	0x200005d0
 800378c:	20000590 	.word	0x20000590
 8003790:	200005d8 	.word	0x200005d8
 8003794:	200004d4 	.word	0x200004d4
 8003798:	200004d0 	.word	0x200004d0
 800379c:	200005e4 	.word	0x200005e4
 80037a0:	200005e0 	.word	0x200005e0
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <xTaskIncrementTick+0x144>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 808e 	bne.w	80038d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <xTaskIncrementTick+0x148>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037c4:	4a4a      	ldr	r2, [pc, #296]	; (80038f0 <xTaskIncrementTick+0x148>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d120      	bne.n	8003812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037d0:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <xTaskIncrementTick+0x14c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	603b      	str	r3, [r7, #0]
}
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <xTaskIncrementTick+0x46>
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <xTaskIncrementTick+0x14c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <xTaskIncrementTick+0x150>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3e      	ldr	r2, [pc, #248]	; (80038f4 <xTaskIncrementTick+0x14c>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4a3e      	ldr	r2, [pc, #248]	; (80038f8 <xTaskIncrementTick+0x150>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <xTaskIncrementTick+0x154>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a3c      	ldr	r2, [pc, #240]	; (80038fc <xTaskIncrementTick+0x154>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	f000 f99f 	bl	8003b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <xTaskIncrementTick+0x158>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	429a      	cmp	r2, r3
 800381a:	d348      	bcc.n	80038ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <xTaskIncrementTick+0x14c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <xTaskIncrementTick+0x158>)
 8003828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382c:	601a      	str	r2, [r3, #0]
					break;
 800382e:	e03e      	b.n	80038ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <xTaskIncrementTick+0x14c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	d203      	bcs.n	8003850 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003848:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <xTaskIncrementTick+0x158>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800384e:	e02e      	b.n	80038ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fc8a 	bl	800316e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3318      	adds	r3, #24
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fc81 	bl	800316e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	2201      	movs	r2, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <xTaskIncrementTick+0x15c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x15c>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x160>)
 800388c:	441a      	add	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7ff fc0d 	bl	80030b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3b9      	bcc.n	800381c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ac:	e7b6      	b.n	800381c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x164>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4914      	ldr	r1, [pc, #80]	; (8003908 <xTaskIncrementTick+0x160>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d901      	bls.n	80038ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x168>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e004      	b.n	80038e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <xTaskIncrementTick+0x16c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <xTaskIncrementTick+0x16c>)
 80038e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038e2:	697b      	ldr	r3, [r7, #20]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200005f8 	.word	0x200005f8
 80038f0:	200005d4 	.word	0x200005d4
 80038f4:	20000588 	.word	0x20000588
 80038f8:	2000058c 	.word	0x2000058c
 80038fc:	200005e8 	.word	0x200005e8
 8003900:	200005f0 	.word	0x200005f0
 8003904:	200005d8 	.word	0x200005d8
 8003908:	200004d4 	.word	0x200004d4
 800390c:	200004d0 	.word	0x200004d0
 8003910:	200005e4 	.word	0x200005e4
 8003914:	200005e0 	.word	0x200005e0

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <vTaskSwitchContext+0xac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <vTaskSwitchContext+0xb0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800392c:	e044      	b.n	80039b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <vTaskSwitchContext+0xb0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <vTaskSwitchContext+0xb4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f1c3 031f 	rsb	r3, r3, #31
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4921      	ldr	r1, [pc, #132]	; (80039d0 <vTaskSwitchContext+0xb8>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x5c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x5a>
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <vTaskSwitchContext+0xb8>)
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3308      	adds	r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d104      	bne.n	80039a4 <vTaskSwitchContext+0x8c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <vTaskSwitchContext+0xbc>)
 80039ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <vTaskSwitchContext+0xbc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	334c      	adds	r3, #76	; 0x4c
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <vTaskSwitchContext+0xc0>)
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	200005f8 	.word	0x200005f8
 80039c8:	200005e4 	.word	0x200005e4
 80039cc:	200005d8 	.word	0x200005d8
 80039d0:	200004d4 	.word	0x200004d4
 80039d4:	200004d0 	.word	0x200004d0
 80039d8:	20000010 	.word	0x20000010

080039dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	200004d4 	.word	0x200004d4
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fb17 	bl	800305a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7ff fb0e 	bl	800305a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7ff fb0b 	bl	800305a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7ff fb08 	bl	800305a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7ff fb05 	bl	800305a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7ff fb02 	bl	800305a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200004d4 	.word	0x200004d4
 8003a70:	20000560 	.word	0x20000560
 8003a74:	20000574 	.word	0x20000574
 8003a78:	20000590 	.word	0x20000590
 8003a7c:	200005a4 	.word	0x200005a4
 8003a80:	200005bc 	.word	0x200005bc
 8003a84:	20000588 	.word	0x20000588
 8003a88:	2000058c 	.word	0x2000058c

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a94:	f000 fa0e 	bl	8003eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fb62 	bl	800316e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003abe:	f000 fa29 	bl	8003f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f810 	bl	8003ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200005a4 	.word	0x200005a4
 8003ae0:	200005d0 	.word	0x200005d0
 8003ae4:	200005b8 	.word	0x200005b8

08003ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	334c      	adds	r3, #76	; 0x4c
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 f983 	bl	8005e00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fb81 	bl	8004210 <vPortFree>
				vPortFree( pxTCB );
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fb7e 	bl	8004210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b14:	e018      	b.n	8003b48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d103      	bne.n	8003b28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb75 	bl	8004210 <vPortFree>
	}
 8003b26:	e00f      	b.n	8003b48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00a      	beq.n	8003b48 <prvDeleteTCB+0x60>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60fb      	str	r3, [r7, #12]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <prvDeleteTCB+0x5e>
	}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <prvResetNextTaskUnblockTime+0x38>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <prvResetNextTaskUnblockTime+0x3c>)
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b68:	e008      	b.n	8003b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <prvResetNextTaskUnblockTime+0x38>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <prvResetNextTaskUnblockTime+0x3c>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000588 	.word	0x20000588
 8003b8c:	200005f0 	.word	0x200005f0

08003b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fae1 	bl	800316e <uxListRemove>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd0:	d10a      	bne.n	8003be8 <prvAddCurrentTaskToDelayedList+0x58>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	481a      	ldr	r0, [pc, #104]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003be2:	f7ff fa67 	bl	80030b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003be6:	e026      	b.n	8003c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d209      	bcs.n	8003c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7ff fa75 	bl	80030fc <vListInsert>
}
 8003c12:	e010      	b.n	8003c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7ff fa6b 	bl	80030fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d202      	bcs.n	8003c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c30:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6013      	str	r3, [r2, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200005d4 	.word	0x200005d4
 8003c44:	200004d0 	.word	0x200004d0
 8003c48:	200005d8 	.word	0x200005d8
 8003c4c:	200005bc 	.word	0x200005bc
 8003c50:	2000058c 	.word	0x2000058c
 8003c54:	20000588 	.word	0x20000588
 8003c58:	200005f0 	.word	0x200005f0

08003c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b04      	subs	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b04      	subs	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c8c:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <pxPortInitialiseStack+0x64>)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3b14      	subs	r3, #20
 8003c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3b04      	subs	r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f06f 0202 	mvn.w	r2, #2
 8003caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b20      	subs	r3, #32
 8003cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	08003cc5 	.word	0x08003cc5

08003cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <prvTaskExitError+0x54>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd6:	d00a      	beq.n	8003cee <prvTaskExitError+0x2a>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	60fb      	str	r3, [r7, #12]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <prvTaskExitError+0x28>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60bb      	str	r3, [r7, #8]
}
 8003d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d02:	bf00      	nop
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0fc      	beq.n	8003d04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	2000000c 	.word	0x2000000c
 8003d1c:	00000000 	.word	0x00000000

08003d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	4770      	bx	lr
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst2>:
 8003d40:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <prvPortStartFirstTask+0x24>)
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f380 8808 	msr	MSP, r0
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f380 8814 	msr	CONTROL, r0
 8003d5a:	b662      	cpsie	i
 8003d5c:	b661      	cpsie	f
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	df00      	svc	0
 8003d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed08 	.word	0xe000ed08

08003d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <xPortStartScheduler+0x120>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a46      	ldr	r2, [pc, #280]	; (8003e94 <xPortStartScheduler+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10a      	bne.n	8003d96 <xPortStartScheduler+0x26>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d96:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <xPortStartScheduler+0x120>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a3f      	ldr	r2, [pc, #252]	; (8003e98 <xPortStartScheduler+0x128>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d10a      	bne.n	8003db6 <xPortStartScheduler+0x46>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003de4:	e009      	b.n	8003dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d0ef      	beq.n	8003de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1c3 0307 	rsb	r3, r3, #7
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00a      	beq.n	8003e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60bb      	str	r3, [r7, #8]
}
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e46:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e5e:	f000 f8dd 	bl	800401c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <xPortStartScheduler+0x13c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e68:	f000 f8fc 	bl	8004064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <xPortStartScheduler+0x140>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <xPortStartScheduler+0x140>)
 8003e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e78:	f7ff ff66 	bl	8003d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e7c:	f7ff fd4c 	bl	8003918 <vTaskSwitchContext>
	prvTaskExitError();
 8003e80:	f7ff ff20 	bl	8003cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00
 8003e94:	410fc271 	.word	0x410fc271
 8003e98:	410fc270 	.word	0x410fc270
 8003e9c:	e000e400 	.word	0xe000e400
 8003ea0:	200005fc 	.word	0x200005fc
 8003ea4:	20000600 	.word	0x20000600
 8003ea8:	e000ed20 	.word	0xe000ed20
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	e000ef34 	.word	0xe000ef34

08003eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	607b      	str	r3, [r7, #4]
}
 8003ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <vPortEnterCritical+0x58>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <vPortEnterCritical+0x58>)
 8003ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <vPortEnterCritical+0x58>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10f      	bne.n	8003f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <vPortEnterCritical+0x5c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	603b      	str	r3, [r7, #0]
}
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <vPortEnterCritical+0x4a>
	}
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <vPortExitCritical+0x50>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <vPortExitCritical+0x24>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	607b      	str	r3, [r7, #4]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <vPortExitCritical+0x50>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <vPortExitCritical+0x50>)
 8003f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <vPortExitCritical+0x50>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <vPortExitCritical+0x42>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	2000000c 	.word	0x2000000c
	...

08003f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f70:	f3ef 8009 	mrs	r0, PSP
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <pxCurrentTCBConst>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f01e 0f10 	tst.w	lr, #16
 8003f80:	bf08      	it	eq
 8003f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f94:	f380 8811 	msr	BASEPRI, r0
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f7ff fcba 	bl	8003918 <vTaskSwitchContext>
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f380 8811 	msr	BASEPRI, r0
 8003fac:	bc09      	pop	{r0, r3}
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	6808      	ldr	r0, [r1, #0]
 8003fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb6:	f01e 0f10 	tst.w	lr, #16
 8003fba:	bf08      	it	eq
 8003fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fc0:	f380 8809 	msr	PSP, r0
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	f3af 8000 	nop.w

08003fd0 <pxCurrentTCBConst>:
 8003fd0:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop

08003fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ff2:	f7ff fbd9 	bl	80037a8 <xTaskIncrementTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <SysTick_Handler+0x40>)
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f383 8811 	msr	BASEPRI, r3
}
 800400e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <vPortSetupTimerInterrupt+0x34>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <vPortSetupTimerInterrupt+0x38>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <vPortSetupTimerInterrupt+0x3c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <vPortSetupTimerInterrupt+0x40>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <vPortSetupTimerInterrupt+0x44>)
 800403a:	3b01      	subs	r3, #1
 800403c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <vPortSetupTimerInterrupt+0x34>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010
 8004054:	e000e018 	.word	0xe000e018
 8004058:	20000000 	.word	0x20000000
 800405c:	10624dd3 	.word	0x10624dd3
 8004060:	e000e014 	.word	0xe000e014

08004064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004074 <vPortEnableVFP+0x10>
 8004068:	6801      	ldr	r1, [r0, #0]
 800406a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800406e:	6001      	str	r1, [r0, #0]
 8004070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004072:	bf00      	nop
 8004074:	e000ed88 	.word	0xe000ed88

08004078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004084:	f7ff fae6 	bl	8003654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004088:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <pvPortMalloc+0x180>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004090:	f000 f920 	bl	80042d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <pvPortMalloc+0x184>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 8093 	bne.w	80041c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01d      	beq.n	80040e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040a8:	2208      	movs	r2, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f023 0307 	bic.w	r3, r3, #7
 80040c0:	3308      	adds	r3, #8
 80040c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <pvPortMalloc+0x6c>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	617b      	str	r3, [r7, #20]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d06e      	beq.n	80041c8 <pvPortMalloc+0x150>
 80040ea:	4b45      	ldr	r3, [pc, #276]	; (8004200 <pvPortMalloc+0x188>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d869      	bhi.n	80041c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <pvPortMalloc+0x18c>)
 80040f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040f8:	4b42      	ldr	r3, [pc, #264]	; (8004204 <pvPortMalloc+0x18c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040fe:	e004      	b.n	800410a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d903      	bls.n	800411c <pvPortMalloc+0xa4>
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f1      	bne.n	8004100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <pvPortMalloc+0x180>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	429a      	cmp	r2, r3
 8004124:	d050      	beq.n	80041c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2208      	movs	r2, #8
 800412c:	4413      	add	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	2308      	movs	r3, #8
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	429a      	cmp	r2, r3
 8004146:	d91f      	bls.n	8004188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <pvPortMalloc+0xf8>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	613b      	str	r3, [r7, #16]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004182:	69b8      	ldr	r0, [r7, #24]
 8004184:	f000 f908 	bl	8004398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <pvPortMalloc+0x188>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <pvPortMalloc+0x188>)
 8004194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <pvPortMalloc+0x188>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <pvPortMalloc+0x190>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d203      	bcs.n	80041aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <pvPortMalloc+0x188>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <pvPortMalloc+0x190>)
 80041a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <pvPortMalloc+0x184>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <pvPortMalloc+0x194>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	4a11      	ldr	r2, [pc, #68]	; (800420c <pvPortMalloc+0x194>)
 80041c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041c8:	f7ff fa52 	bl	8003670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <pvPortMalloc+0x174>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	60fb      	str	r3, [r7, #12]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <pvPortMalloc+0x172>
	return pvReturn;
 80041ec:	69fb      	ldr	r3, [r7, #28]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3728      	adds	r7, #40	; 0x28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2000420c 	.word	0x2000420c
 80041fc:	20004220 	.word	0x20004220
 8004200:	20004210 	.word	0x20004210
 8004204:	20004204 	.word	0x20004204
 8004208:	20004214 	.word	0x20004214
 800420c:	20004218 	.word	0x20004218

08004210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04d      	beq.n	80042be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004222:	2308      	movs	r3, #8
 8004224:	425b      	negs	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <vPortFree+0xb8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <vPortFree+0x44>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <vPortFree+0x62>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60bb      	str	r3, [r7, #8]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <vPortFree+0xb8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01e      	beq.n	80042be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11a      	bne.n	80042be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <vPortFree+0xb8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004298:	f7ff f9dc 	bl	8003654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <vPortFree+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <vPortFree+0xbc>)
 80042a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042aa:	6938      	ldr	r0, [r7, #16]
 80042ac:	f000 f874 	bl	8004398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <vPortFree+0xc0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <vPortFree+0xc0>)
 80042b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80042ba:	f7ff f9d9 	bl	8003670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20004220 	.word	0x20004220
 80042cc:	20004210 	.word	0x20004210
 80042d0:	2000421c 	.word	0x2000421c

080042d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80042de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <prvHeapInit+0xac>)
 80042e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3307      	adds	r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <prvHeapInit+0xac>)
 8004304:	4413      	add	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <prvHeapInit+0xb0>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <prvHeapInit+0xb0>)
 8004314:	2200      	movs	r2, #0
 8004316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4413      	add	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004320:	2208      	movs	r2, #8
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a15      	ldr	r2, [pc, #84]	; (8004388 <prvHeapInit+0xb4>)
 8004334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <prvHeapInit+0xb4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <prvHeapInit+0xb4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	1ad2      	subs	r2, r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <prvHeapInit+0xb4>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a0a      	ldr	r2, [pc, #40]	; (800438c <prvHeapInit+0xb8>)
 8004362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <prvHeapInit+0xbc>)
 800436a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <prvHeapInit+0xc0>)
 800436e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	20000604 	.word	0x20000604
 8004384:	20004204 	.word	0x20004204
 8004388:	2000420c 	.word	0x2000420c
 800438c:	20004214 	.word	0x20004214
 8004390:	20004210 	.word	0x20004210
 8004394:	20004220 	.word	0x20004220

08004398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <prvInsertBlockIntoFreeList+0xac>)
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e002      	b.n	80043ac <prvInsertBlockIntoFreeList+0x14>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d8f7      	bhi.n	80043a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d108      	bne.n	80043da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	441a      	add	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d118      	bne.n	8004420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <prvInsertBlockIntoFreeList+0xb0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d00d      	beq.n	8004416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e008      	b.n	8004428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <prvInsertBlockIntoFreeList+0xb0>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	e003      	b.n	8004428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d002      	beq.n	8004436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20004204 	.word	0x20004204
 8004448:	2000420c 	.word	0x2000420c

0800444c <PIN_LOW>:
 */

#include "TFT.h"
/*--------------------------------------------------------------------------------------*/
void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	2200      	movs	r2, #0
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc ff86 	bl	8001370 <HAL_GPIO_WritePin>
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <PIN_HIGH>:
void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	2201      	movs	r2, #1
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc ff76 	bl	8001370 <HAL_GPIO_WritePin>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <PIN_INPUT>:
void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc fddc 	bl	8001068 <HAL_GPIO_Init>
}
 80044b0:	bf00      	nop
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <PIN_OUTPUT>:
void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c8:	2301      	movs	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044d0:	2302      	movs	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fdc4 	bl	8001068 <HAL_GPIO_Init>
}
 80044e0:	bf00      	nop
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <TFT_Delay_us>:
#define WriteCmd(x)  	{ CD_COMMAND; write16(x); CD_DATA; }
#define WriteData(x) 	{ write16(x); }
/*--------------------------------------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
void TFT_Delay_us (uint32_t time)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <TFT_Delay_us+0x2c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<time);
 80044f8:	bf00      	nop
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <TFT_Delay_us+0x2c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d8f9      	bhi.n	80044fa <TFT_Delay_us+0x12>
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	200003f0 	.word	0x200003f0

08004518 <LED_ON>:
	for(int i=0;i<1000;i++)
		TFT_Delay_us(1);
}
/*--------------------------------------------------------------------------------------*/
void LED_ON(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, 1);
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004522:	4802      	ldr	r0, [pc, #8]	; (800452c <LED_ON+0x14>)
 8004524:	f7fc ff24 	bl	8001370 <HAL_GPIO_WritePin>
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40020000 	.word	0x40020000

08004530 <setReadDir>:
void LED_OFF(void)
{
	HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, 0);
}
void setReadDir (void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8004534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004538:	4813      	ldr	r0, [pc, #76]	; (8004588 <setReadDir+0x58>)
 800453a:	f7ff ffa7 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	4811      	ldr	r0, [pc, #68]	; (8004588 <setReadDir+0x58>)
 8004544:	f7ff ffa2 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8004548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454c:	480e      	ldr	r0, [pc, #56]	; (8004588 <setReadDir+0x58>)
 800454e:	f7ff ff9d 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8004552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004556:	480c      	ldr	r0, [pc, #48]	; (8004588 <setReadDir+0x58>)
 8004558:	f7ff ff98 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800455c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004560:	480a      	ldr	r0, [pc, #40]	; (800458c <setReadDir+0x5c>)
 8004562:	f7ff ff93 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8004566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800456a:	4808      	ldr	r0, [pc, #32]	; (800458c <setReadDir+0x5c>)
 800456c:	f7ff ff8e 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8004570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004574:	4805      	ldr	r0, [pc, #20]	; (800458c <setReadDir+0x5c>)
 8004576:	f7ff ff89 	bl	800448c <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800457a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800457e:	4803      	ldr	r0, [pc, #12]	; (800458c <setReadDir+0x5c>)
 8004580:	f7ff ff84 	bl	800448c <PIN_INPUT>
}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020000 	.word	0x40020000
 800458c:	40020400 	.word	0x40020400

08004590 <setWriteDir>:

void setWriteDir (void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8004594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004598:	4813      	ldr	r0, [pc, #76]	; (80045e8 <setWriteDir+0x58>)
 800459a:	f7ff ff8d 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800459e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045a2:	4811      	ldr	r0, [pc, #68]	; (80045e8 <setWriteDir+0x58>)
 80045a4:	f7ff ff88 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80045a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ac:	480e      	ldr	r0, [pc, #56]	; (80045e8 <setWriteDir+0x58>)
 80045ae:	f7ff ff83 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80045b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b6:	480c      	ldr	r0, [pc, #48]	; (80045e8 <setWriteDir+0x58>)
 80045b8:	f7ff ff7e 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80045bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c0:	480a      	ldr	r0, [pc, #40]	; (80045ec <setWriteDir+0x5c>)
 80045c2:	f7ff ff79 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80045c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045ca:	4808      	ldr	r0, [pc, #32]	; (80045ec <setWriteDir+0x5c>)
 80045cc:	f7ff ff74 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80045d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045d4:	4805      	ldr	r0, [pc, #20]	; (80045ec <setWriteDir+0x5c>)
 80045d6:	f7ff ff6f 	bl	80044b8 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80045da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045de:	4803      	ldr	r0, [pc, #12]	; (80045ec <setWriteDir+0x5c>)
 80045e0:	f7ff ff6a 	bl	80044b8 <PIN_OUTPUT>
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400

080045f0 <read16bits>:

static uint16_t read16bits(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 80045f6:	2108      	movs	r1, #8
 80045f8:	4873      	ldr	r0, [pc, #460]	; (80047c8 <read16bits+0x1d8>)
 80045fa:	f7ff ff37 	bl	800446c <PIN_HIGH>
 80045fe:	2108      	movs	r1, #8
 8004600:	4871      	ldr	r0, [pc, #452]	; (80047c8 <read16bits+0x1d8>)
 8004602:	f7ff ff23 	bl	800444c <PIN_LOW>
 8004606:	2108      	movs	r1, #8
 8004608:	486f      	ldr	r0, [pc, #444]	; (80047c8 <read16bits+0x1d8>)
 800460a:	f7ff ff1f 	bl	800444c <PIN_LOW>
 800460e:	2108      	movs	r1, #8
 8004610:	486d      	ldr	r0, [pc, #436]	; (80047c8 <read16bits+0x1d8>)
 8004612:	f7ff ff1b 	bl	800444c <PIN_LOW>
 8004616:	2108      	movs	r1, #8
 8004618:	486b      	ldr	r0, [pc, #428]	; (80047c8 <read16bits+0x1d8>)
 800461a:	f7ff ff17 	bl	800444c <PIN_LOW>
 800461e:	2108      	movs	r1, #8
 8004620:	4869      	ldr	r0, [pc, #420]	; (80047c8 <read16bits+0x1d8>)
 8004622:	f7ff ff13 	bl	800444c <PIN_LOW>
 8004626:	2108      	movs	r1, #8
 8004628:	4867      	ldr	r0, [pc, #412]	; (80047c8 <read16bits+0x1d8>)
 800462a:	f7ff ff0f 	bl	800444c <PIN_LOW>
 800462e:	2108      	movs	r1, #8
 8004630:	4865      	ldr	r0, [pc, #404]	; (80047c8 <read16bits+0x1d8>)
 8004632:	f7ff ff0b 	bl	800444c <PIN_LOW>
 8004636:	4b65      	ldr	r3, [pc, #404]	; (80047cc <read16bits+0x1dc>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	0adb      	lsrs	r3, r3, #11
 800463c:	b29b      	uxth	r3, r3
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <read16bits+0x1dc>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	b29b      	uxth	r3, r3
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	b29b      	uxth	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <read16bits+0x1dc>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	09db      	lsrs	r3, r3, #7
 800465c:	b29b      	uxth	r3, r3
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	b29b      	uxth	r3, r3
 8004664:	4313      	orrs	r3, r2
 8004666:	b29a      	uxth	r2, r3
 8004668:	4b58      	ldr	r3, [pc, #352]	; (80047cc <read16bits+0x1dc>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	b29b      	uxth	r3, r3
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	4313      	orrs	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <read16bits+0x1d8>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	0adb      	lsrs	r3, r3, #11
 8004680:	b29b      	uxth	r3, r3
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	b29b      	uxth	r3, r3
 8004688:	4313      	orrs	r3, r2
 800468a:	b29a      	uxth	r2, r3
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <read16bits+0x1d8>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	0a5b      	lsrs	r3, r3, #9
 8004692:	b29b      	uxth	r3, r3
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	b29b      	uxth	r3, r3
 800469a:	4313      	orrs	r3, r2
 800469c:	b29a      	uxth	r2, r3
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <read16bits+0x1d8>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	09db      	lsrs	r3, r3, #7
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4313      	orrs	r3, r2
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <read16bits+0x1d8>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4313      	orrs	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
 80046c2:	2108      	movs	r1, #8
 80046c4:	4840      	ldr	r0, [pc, #256]	; (80047c8 <read16bits+0x1d8>)
 80046c6:	f7ff fed1 	bl	800446c <PIN_HIGH>
 80046ca:	2108      	movs	r1, #8
 80046cc:	483e      	ldr	r0, [pc, #248]	; (80047c8 <read16bits+0x1d8>)
 80046ce:	f7ff fecd 	bl	800446c <PIN_HIGH>
    READ_8(lo);
 80046d2:	2108      	movs	r1, #8
 80046d4:	483c      	ldr	r0, [pc, #240]	; (80047c8 <read16bits+0x1d8>)
 80046d6:	f7ff fec9 	bl	800446c <PIN_HIGH>
 80046da:	2108      	movs	r1, #8
 80046dc:	483a      	ldr	r0, [pc, #232]	; (80047c8 <read16bits+0x1d8>)
 80046de:	f7ff feb5 	bl	800444c <PIN_LOW>
 80046e2:	2108      	movs	r1, #8
 80046e4:	4838      	ldr	r0, [pc, #224]	; (80047c8 <read16bits+0x1d8>)
 80046e6:	f7ff feb1 	bl	800444c <PIN_LOW>
 80046ea:	2108      	movs	r1, #8
 80046ec:	4836      	ldr	r0, [pc, #216]	; (80047c8 <read16bits+0x1d8>)
 80046ee:	f7ff fead 	bl	800444c <PIN_LOW>
 80046f2:	2108      	movs	r1, #8
 80046f4:	4834      	ldr	r0, [pc, #208]	; (80047c8 <read16bits+0x1d8>)
 80046f6:	f7ff fea9 	bl	800444c <PIN_LOW>
 80046fa:	2108      	movs	r1, #8
 80046fc:	4832      	ldr	r0, [pc, #200]	; (80047c8 <read16bits+0x1d8>)
 80046fe:	f7ff fea5 	bl	800444c <PIN_LOW>
 8004702:	2108      	movs	r1, #8
 8004704:	4830      	ldr	r0, [pc, #192]	; (80047c8 <read16bits+0x1d8>)
 8004706:	f7ff fea1 	bl	800444c <PIN_LOW>
 800470a:	2108      	movs	r1, #8
 800470c:	482e      	ldr	r0, [pc, #184]	; (80047c8 <read16bits+0x1d8>)
 800470e:	f7ff fe9d 	bl	800444c <PIN_LOW>
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <read16bits+0x1dc>)
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	0adb      	lsrs	r3, r3, #11
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <read16bits+0x1dc>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	0a5b      	lsrs	r3, r3, #9
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <read16bits+0x1dc>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <read16bits+0x1dc>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <read16bits+0x1d8>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	0adb      	lsrs	r3, r3, #11
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <read16bits+0x1d8>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	0a5b      	lsrs	r3, r3, #9
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4313      	orrs	r3, r2
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <read16bits+0x1d8>)
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	09db      	lsrs	r3, r3, #7
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4313      	orrs	r3, r2
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <read16bits+0x1d8>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004798:	b2db      	uxtb	r3, r3
 800479a:	4313      	orrs	r3, r2
 800479c:	717b      	strb	r3, [r7, #5]
 800479e:	2108      	movs	r1, #8
 80047a0:	4809      	ldr	r0, [pc, #36]	; (80047c8 <read16bits+0x1d8>)
 80047a2:	f7ff fe63 	bl	800446c <PIN_HIGH>
 80047a6:	2108      	movs	r1, #8
 80047a8:	4807      	ldr	r0, [pc, #28]	; (80047c8 <read16bits+0x1d8>)
 80047aa:	f7ff fe5f 	bl	800446c <PIN_HIGH>
    return (ret << 8) | lo;
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	b21a      	sxth	r2, r3
 80047b4:	797b      	ldrb	r3, [r7, #5]
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b21b      	sxth	r3, r3
 80047bc:	b29b      	uxth	r3, r3
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40020400 	.word	0x40020400
 80047cc:	40020000 	.word	0x40020000

080047d0 <readReg>:
uint16_t readReg(uint16_t reg,int8_t index)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	460a      	mov	r2, r1
 80047da:	80fb      	strh	r3, [r7, #6]
 80047dc:	4613      	mov	r3, r2
 80047de:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    CS_ACTIVE;
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	483e      	ldr	r0, [pc, #248]	; (80048dc <readReg+0x10c>)
 80047e4:	f7ff fe32 	bl	800444c <PIN_LOW>
    setReadDir();
 80047e8:	f7ff fea2 	bl	8004530 <setReadDir>
    WriteCmd(reg);
 80047ec:	2120      	movs	r1, #32
 80047ee:	483b      	ldr	r0, [pc, #236]	; (80048dc <readReg+0x10c>)
 80047f0:	f7ff fe2c 	bl	800444c <PIN_LOW>
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	73bb      	strb	r3, [r7, #14]
 8004800:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <readReg+0x110>)
 8004802:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <readReg+0x10c>)
 800480a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800480e:	619a      	str	r2, [r3, #24]
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	4a33      	ldr	r2, [pc, #204]	; (80048e0 <readReg+0x110>)
 8004814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004818:	6193      	str	r3, [r2, #24]
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <readReg+0x10c>)
 800481e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004822:	6193      	str	r3, [r2, #24]
 8004824:	2110      	movs	r1, #16
 8004826:	482d      	ldr	r0, [pc, #180]	; (80048dc <readReg+0x10c>)
 8004828:	f7ff fe10 	bl	800444c <PIN_LOW>
 800482c:	2110      	movs	r1, #16
 800482e:	482b      	ldr	r0, [pc, #172]	; (80048dc <readReg+0x10c>)
 8004830:	f7ff fe0c 	bl	800444c <PIN_LOW>
 8004834:	2110      	movs	r1, #16
 8004836:	4829      	ldr	r0, [pc, #164]	; (80048dc <readReg+0x10c>)
 8004838:	f7ff fe08 	bl	800444c <PIN_LOW>
 800483c:	2110      	movs	r1, #16
 800483e:	4827      	ldr	r0, [pc, #156]	; (80048dc <readReg+0x10c>)
 8004840:	f7ff fe14 	bl	800446c <PIN_HIGH>
 8004844:	2110      	movs	r1, #16
 8004846:	4825      	ldr	r0, [pc, #148]	; (80048dc <readReg+0x10c>)
 8004848:	f7ff fe10 	bl	800446c <PIN_HIGH>
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <readReg+0x110>)
 800484e:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	4b21      	ldr	r3, [pc, #132]	; (80048dc <readReg+0x10c>)
 8004856:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800485a:	619a      	str	r2, [r3, #24]
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <readReg+0x110>)
 8004860:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004864:	6193      	str	r3, [r2, #24]
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <readReg+0x10c>)
 800486a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800486e:	6193      	str	r3, [r2, #24]
 8004870:	2110      	movs	r1, #16
 8004872:	481a      	ldr	r0, [pc, #104]	; (80048dc <readReg+0x10c>)
 8004874:	f7ff fdea 	bl	800444c <PIN_LOW>
 8004878:	2110      	movs	r1, #16
 800487a:	4818      	ldr	r0, [pc, #96]	; (80048dc <readReg+0x10c>)
 800487c:	f7ff fde6 	bl	800444c <PIN_LOW>
 8004880:	2110      	movs	r1, #16
 8004882:	4816      	ldr	r0, [pc, #88]	; (80048dc <readReg+0x10c>)
 8004884:	f7ff fde2 	bl	800444c <PIN_LOW>
 8004888:	2110      	movs	r1, #16
 800488a:	4814      	ldr	r0, [pc, #80]	; (80048dc <readReg+0x10c>)
 800488c:	f7ff fdee 	bl	800446c <PIN_HIGH>
 8004890:	2110      	movs	r1, #16
 8004892:	4812      	ldr	r0, [pc, #72]	; (80048dc <readReg+0x10c>)
 8004894:	f7ff fdea 	bl	800446c <PIN_HIGH>
 8004898:	2120      	movs	r1, #32
 800489a:	4810      	ldr	r0, [pc, #64]	; (80048dc <readReg+0x10c>)
 800489c:	f7ff fde6 	bl	800446c <PIN_HIGH>
    TFT_Delay_us(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7ff fe21 	bl	80044e8 <TFT_Delay_us>
    do
    {
    	ret = read16bits();
 80048a6:	f7ff fea3 	bl	80045f0 <read16bits>
 80048aa:	4603      	mov	r3, r0
 80048ac:	81bb      	strh	r3, [r7, #12]
    }
    while (--index >= 0);
 80048ae:	797b      	ldrb	r3, [r7, #5]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	717b      	strb	r3, [r7, #5]
 80048b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	daf3      	bge.n	80048a6 <readReg+0xd6>
    RD_IDLE;
 80048be:	2108      	movs	r1, #8
 80048c0:	4806      	ldr	r0, [pc, #24]	; (80048dc <readReg+0x10c>)
 80048c2:	f7ff fdd3 	bl	800446c <PIN_HIGH>
    CS_IDLE;
 80048c6:	2140      	movs	r1, #64	; 0x40
 80048c8:	4804      	ldr	r0, [pc, #16]	; (80048dc <readReg+0x10c>)
 80048ca:	f7ff fdcf 	bl	800446c <PIN_HIGH>
    setWriteDir();
 80048ce:	f7ff fe5f 	bl	8004590 <setWriteDir>
    return ret;
 80048d2:	89bb      	ldrh	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40020400 	.word	0x40020400
 80048e0:	40020000 	.word	0x40020000

080048e4 <readReg40>:
uint32_t readReg40(uint16_t reg)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff6c 	bl	80047d0 <readReg>
 80048f8:	4603      	mov	r3, r0
 80048fa:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff65 	bl	80047d0 <readReg>
 8004906:	4603      	mov	r3, r0
 8004908:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2102      	movs	r1, #2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff5e 	bl	80047d0 <readReg>
 8004914:	4603      	mov	r3, r0
 8004916:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	89ba      	ldrh	r2, [r7, #12]
 800491e:	0212      	lsls	r2, r2, #8
 8004920:	4313      	orrs	r3, r2
 8004922:	897a      	ldrh	r2, [r7, #10]
 8004924:	0a12      	lsrs	r2, r2, #8
 8004926:	b292      	uxth	r2, r2
 8004928:	4313      	orrs	r3, r2
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <ReadID>:
uint32_t ReadID()
{
 8004932:	b580      	push	{r7, lr}
 8004934:	af00      	add	r7, sp, #0
	return readReg40(0xEF);
 8004936:	20ef      	movs	r0, #239	; 0xef
 8004938:	f7ff ffd4 	bl	80048e4 <readReg40>
 800493c:	4603      	mov	r3, r0
}
 800493e:	4618      	mov	r0, r3
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <TFT_init>:
void TFT_init()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b090      	sub	sp, #64	; 0x40
 8004948:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 800494a:	48c6      	ldr	r0, [pc, #792]	; (8004c64 <TFT_init+0x320>)
 800494c:	f7fd fbf4 	bl	8002138 <HAL_TIM_Base_Start>
	LED_ON();
 8004950:	f7ff fde2 	bl	8004518 <LED_ON>
	uint32_t read = ReadID();
 8004954:	f7ff ffed 	bl	8004932 <ReadID>
 8004958:	63f8      	str	r0, [r7, #60]	; 0x3c

	WriteCmd(0x01)	//Soft Reset
 800495a:	2120      	movs	r1, #32
 800495c:	48c2      	ldr	r0, [pc, #776]	; (8004c68 <TFT_init+0x324>)
 800495e:	f7ff fd75 	bl	800444c <PIN_LOW>
 8004962:	2300      	movs	r3, #0
 8004964:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004968:	2301      	movs	r3, #1
 800496a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800496e:	4bbf      	ldr	r3, [pc, #764]	; (8004c6c <TFT_init+0x328>)
 8004970:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004974:	619a      	str	r2, [r3, #24]
 8004976:	4bbc      	ldr	r3, [pc, #752]	; (8004c68 <TFT_init+0x324>)
 8004978:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800497c:	619a      	str	r2, [r3, #24]
 800497e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004982:	4aba      	ldr	r2, [pc, #744]	; (8004c6c <TFT_init+0x328>)
 8004984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004988:	6193      	str	r3, [r2, #24]
 800498a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800498e:	4ab6      	ldr	r2, [pc, #728]	; (8004c68 <TFT_init+0x324>)
 8004990:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004994:	6193      	str	r3, [r2, #24]
 8004996:	2110      	movs	r1, #16
 8004998:	48b3      	ldr	r0, [pc, #716]	; (8004c68 <TFT_init+0x324>)
 800499a:	f7ff fd57 	bl	800444c <PIN_LOW>
 800499e:	2110      	movs	r1, #16
 80049a0:	48b1      	ldr	r0, [pc, #708]	; (8004c68 <TFT_init+0x324>)
 80049a2:	f7ff fd53 	bl	800444c <PIN_LOW>
 80049a6:	2110      	movs	r1, #16
 80049a8:	48af      	ldr	r0, [pc, #700]	; (8004c68 <TFT_init+0x324>)
 80049aa:	f7ff fd4f 	bl	800444c <PIN_LOW>
 80049ae:	2110      	movs	r1, #16
 80049b0:	48ad      	ldr	r0, [pc, #692]	; (8004c68 <TFT_init+0x324>)
 80049b2:	f7ff fd5b 	bl	800446c <PIN_HIGH>
 80049b6:	2110      	movs	r1, #16
 80049b8:	48ab      	ldr	r0, [pc, #684]	; (8004c68 <TFT_init+0x324>)
 80049ba:	f7ff fd57 	bl	800446c <PIN_HIGH>
 80049be:	4bab      	ldr	r3, [pc, #684]	; (8004c6c <TFT_init+0x328>)
 80049c0:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80049c4:	619a      	str	r2, [r3, #24]
 80049c6:	4ba8      	ldr	r3, [pc, #672]	; (8004c68 <TFT_init+0x324>)
 80049c8:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80049d2:	4aa6      	ldr	r2, [pc, #664]	; (8004c6c <TFT_init+0x328>)
 80049d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049d8:	6193      	str	r3, [r2, #24]
 80049da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80049de:	4aa2      	ldr	r2, [pc, #648]	; (8004c68 <TFT_init+0x324>)
 80049e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049e4:	6193      	str	r3, [r2, #24]
 80049e6:	2110      	movs	r1, #16
 80049e8:	489f      	ldr	r0, [pc, #636]	; (8004c68 <TFT_init+0x324>)
 80049ea:	f7ff fd2f 	bl	800444c <PIN_LOW>
 80049ee:	2110      	movs	r1, #16
 80049f0:	489d      	ldr	r0, [pc, #628]	; (8004c68 <TFT_init+0x324>)
 80049f2:	f7ff fd2b 	bl	800444c <PIN_LOW>
 80049f6:	2110      	movs	r1, #16
 80049f8:	489b      	ldr	r0, [pc, #620]	; (8004c68 <TFT_init+0x324>)
 80049fa:	f7ff fd27 	bl	800444c <PIN_LOW>
 80049fe:	2110      	movs	r1, #16
 8004a00:	4899      	ldr	r0, [pc, #612]	; (8004c68 <TFT_init+0x324>)
 8004a02:	f7ff fd33 	bl	800446c <PIN_HIGH>
 8004a06:	2110      	movs	r1, #16
 8004a08:	4897      	ldr	r0, [pc, #604]	; (8004c68 <TFT_init+0x324>)
 8004a0a:	f7ff fd2f 	bl	800446c <PIN_HIGH>
 8004a0e:	2120      	movs	r1, #32
 8004a10:	4895      	ldr	r0, [pc, #596]	; (8004c68 <TFT_init+0x324>)
 8004a12:	f7ff fd2b 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(150);
 8004a16:	2096      	movs	r0, #150	; 0x96
 8004a18:	f7ff fd66 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0x28); //Display Off
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	4892      	ldr	r0, [pc, #584]	; (8004c68 <TFT_init+0x324>)
 8004a20:	f7ff fd14 	bl	800444c <PIN_LOW>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004a2a:	2328      	movs	r3, #40	; 0x28
 8004a2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004a30:	4b8e      	ldr	r3, [pc, #568]	; (8004c6c <TFT_init+0x328>)
 8004a32:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004a36:	619a      	str	r2, [r3, #24]
 8004a38:	4b8b      	ldr	r3, [pc, #556]	; (8004c68 <TFT_init+0x324>)
 8004a3a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004a3e:	619a      	str	r2, [r3, #24]
 8004a40:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004a44:	4a89      	ldr	r2, [pc, #548]	; (8004c6c <TFT_init+0x328>)
 8004a46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a4a:	6193      	str	r3, [r2, #24]
 8004a4c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004a50:	4a85      	ldr	r2, [pc, #532]	; (8004c68 <TFT_init+0x324>)
 8004a52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a56:	6193      	str	r3, [r2, #24]
 8004a58:	2110      	movs	r1, #16
 8004a5a:	4883      	ldr	r0, [pc, #524]	; (8004c68 <TFT_init+0x324>)
 8004a5c:	f7ff fcf6 	bl	800444c <PIN_LOW>
 8004a60:	2110      	movs	r1, #16
 8004a62:	4881      	ldr	r0, [pc, #516]	; (8004c68 <TFT_init+0x324>)
 8004a64:	f7ff fcf2 	bl	800444c <PIN_LOW>
 8004a68:	2110      	movs	r1, #16
 8004a6a:	487f      	ldr	r0, [pc, #508]	; (8004c68 <TFT_init+0x324>)
 8004a6c:	f7ff fcee 	bl	800444c <PIN_LOW>
 8004a70:	2110      	movs	r1, #16
 8004a72:	487d      	ldr	r0, [pc, #500]	; (8004c68 <TFT_init+0x324>)
 8004a74:	f7ff fcfa 	bl	800446c <PIN_HIGH>
 8004a78:	2110      	movs	r1, #16
 8004a7a:	487b      	ldr	r0, [pc, #492]	; (8004c68 <TFT_init+0x324>)
 8004a7c:	f7ff fcf6 	bl	800446c <PIN_HIGH>
 8004a80:	4b7a      	ldr	r3, [pc, #488]	; (8004c6c <TFT_init+0x328>)
 8004a82:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004a86:	619a      	str	r2, [r3, #24]
 8004a88:	4b77      	ldr	r3, [pc, #476]	; (8004c68 <TFT_init+0x324>)
 8004a8a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004a8e:	619a      	str	r2, [r3, #24]
 8004a90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004a94:	4a75      	ldr	r2, [pc, #468]	; (8004c6c <TFT_init+0x328>)
 8004a96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a9a:	6193      	str	r3, [r2, #24]
 8004a9c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004aa0:	4a71      	ldr	r2, [pc, #452]	; (8004c68 <TFT_init+0x324>)
 8004aa2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004aa6:	6193      	str	r3, [r2, #24]
 8004aa8:	2110      	movs	r1, #16
 8004aaa:	486f      	ldr	r0, [pc, #444]	; (8004c68 <TFT_init+0x324>)
 8004aac:	f7ff fcce 	bl	800444c <PIN_LOW>
 8004ab0:	2110      	movs	r1, #16
 8004ab2:	486d      	ldr	r0, [pc, #436]	; (8004c68 <TFT_init+0x324>)
 8004ab4:	f7ff fcca 	bl	800444c <PIN_LOW>
 8004ab8:	2110      	movs	r1, #16
 8004aba:	486b      	ldr	r0, [pc, #428]	; (8004c68 <TFT_init+0x324>)
 8004abc:	f7ff fcc6 	bl	800444c <PIN_LOW>
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	4869      	ldr	r0, [pc, #420]	; (8004c68 <TFT_init+0x324>)
 8004ac4:	f7ff fcd2 	bl	800446c <PIN_HIGH>
 8004ac8:	2110      	movs	r1, #16
 8004aca:	4867      	ldr	r0, [pc, #412]	; (8004c68 <TFT_init+0x324>)
 8004acc:	f7ff fcce 	bl	800446c <PIN_HIGH>
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	4865      	ldr	r0, [pc, #404]	; (8004c68 <TFT_init+0x324>)
 8004ad4:	f7ff fcca 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f7ff fd05 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0x3A); //Pixel read=565, write=565.
 8004ade:	2120      	movs	r1, #32
 8004ae0:	4861      	ldr	r0, [pc, #388]	; (8004c68 <TFT_init+0x324>)
 8004ae2:	f7ff fcb3 	bl	800444c <PIN_LOW>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004aec:	233a      	movs	r3, #58	; 0x3a
 8004aee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004af2:	4b5e      	ldr	r3, [pc, #376]	; (8004c6c <TFT_init+0x328>)
 8004af4:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004af8:	619a      	str	r2, [r3, #24]
 8004afa:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <TFT_init+0x324>)
 8004afc:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004b00:	619a      	str	r2, [r3, #24]
 8004b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b06:	4a59      	ldr	r2, [pc, #356]	; (8004c6c <TFT_init+0x328>)
 8004b08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b0c:	6193      	str	r3, [r2, #24]
 8004b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b12:	4a55      	ldr	r2, [pc, #340]	; (8004c68 <TFT_init+0x324>)
 8004b14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b18:	6193      	str	r3, [r2, #24]
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	4852      	ldr	r0, [pc, #328]	; (8004c68 <TFT_init+0x324>)
 8004b1e:	f7ff fc95 	bl	800444c <PIN_LOW>
 8004b22:	2110      	movs	r1, #16
 8004b24:	4850      	ldr	r0, [pc, #320]	; (8004c68 <TFT_init+0x324>)
 8004b26:	f7ff fc91 	bl	800444c <PIN_LOW>
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	484e      	ldr	r0, [pc, #312]	; (8004c68 <TFT_init+0x324>)
 8004b2e:	f7ff fc8d 	bl	800444c <PIN_LOW>
 8004b32:	2110      	movs	r1, #16
 8004b34:	484c      	ldr	r0, [pc, #304]	; (8004c68 <TFT_init+0x324>)
 8004b36:	f7ff fc99 	bl	800446c <PIN_HIGH>
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	484a      	ldr	r0, [pc, #296]	; (8004c68 <TFT_init+0x324>)
 8004b3e:	f7ff fc95 	bl	800446c <PIN_HIGH>
 8004b42:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <TFT_init+0x328>)
 8004b44:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004b48:	619a      	str	r2, [r3, #24]
 8004b4a:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <TFT_init+0x324>)
 8004b4c:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004b50:	619a      	str	r2, [r3, #24]
 8004b52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b56:	4a45      	ldr	r2, [pc, #276]	; (8004c6c <TFT_init+0x328>)
 8004b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b5c:	6193      	str	r3, [r2, #24]
 8004b5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b62:	4a41      	ldr	r2, [pc, #260]	; (8004c68 <TFT_init+0x324>)
 8004b64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b68:	6193      	str	r3, [r2, #24]
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	483e      	ldr	r0, [pc, #248]	; (8004c68 <TFT_init+0x324>)
 8004b6e:	f7ff fc6d 	bl	800444c <PIN_LOW>
 8004b72:	2110      	movs	r1, #16
 8004b74:	483c      	ldr	r0, [pc, #240]	; (8004c68 <TFT_init+0x324>)
 8004b76:	f7ff fc69 	bl	800444c <PIN_LOW>
 8004b7a:	2110      	movs	r1, #16
 8004b7c:	483a      	ldr	r0, [pc, #232]	; (8004c68 <TFT_init+0x324>)
 8004b7e:	f7ff fc65 	bl	800444c <PIN_LOW>
 8004b82:	2110      	movs	r1, #16
 8004b84:	4838      	ldr	r0, [pc, #224]	; (8004c68 <TFT_init+0x324>)
 8004b86:	f7ff fc71 	bl	800446c <PIN_HIGH>
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	4836      	ldr	r0, [pc, #216]	; (8004c68 <TFT_init+0x324>)
 8004b8e:	f7ff fc6d 	bl	800446c <PIN_HIGH>
 8004b92:	2120      	movs	r1, #32
 8004b94:	4834      	ldr	r0, [pc, #208]	; (8004c68 <TFT_init+0x324>)
 8004b96:	f7ff fc69 	bl	800446c <PIN_HIGH>
	WriteData(0x55);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004ba0:	2355      	movs	r3, #85	; 0x55
 8004ba2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004ba6:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <TFT_init+0x328>)
 8004ba8:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004bac:	619a      	str	r2, [r3, #24]
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <TFT_init+0x324>)
 8004bb0:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004bba:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <TFT_init+0x328>)
 8004bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bc0:	6193      	str	r3, [r2, #24]
 8004bc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004bc6:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TFT_init+0x324>)
 8004bc8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bcc:	6193      	str	r3, [r2, #24]
 8004bce:	2110      	movs	r1, #16
 8004bd0:	4825      	ldr	r0, [pc, #148]	; (8004c68 <TFT_init+0x324>)
 8004bd2:	f7ff fc3b 	bl	800444c <PIN_LOW>
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	4823      	ldr	r0, [pc, #140]	; (8004c68 <TFT_init+0x324>)
 8004bda:	f7ff fc37 	bl	800444c <PIN_LOW>
 8004bde:	2110      	movs	r1, #16
 8004be0:	4821      	ldr	r0, [pc, #132]	; (8004c68 <TFT_init+0x324>)
 8004be2:	f7ff fc33 	bl	800444c <PIN_LOW>
 8004be6:	2110      	movs	r1, #16
 8004be8:	481f      	ldr	r0, [pc, #124]	; (8004c68 <TFT_init+0x324>)
 8004bea:	f7ff fc3f 	bl	800446c <PIN_HIGH>
 8004bee:	2110      	movs	r1, #16
 8004bf0:	481d      	ldr	r0, [pc, #116]	; (8004c68 <TFT_init+0x324>)
 8004bf2:	f7ff fc3b 	bl	800446c <PIN_HIGH>
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <TFT_init+0x328>)
 8004bf8:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004bfc:	619a      	str	r2, [r3, #24]
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <TFT_init+0x324>)
 8004c00:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004c04:	619a      	str	r2, [r3, #24]
 8004c06:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <TFT_init+0x328>)
 8004c0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c10:	6193      	str	r3, [r2, #24]
 8004c12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <TFT_init+0x324>)
 8004c18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c1c:	6193      	str	r3, [r2, #24]
 8004c1e:	2110      	movs	r1, #16
 8004c20:	4811      	ldr	r0, [pc, #68]	; (8004c68 <TFT_init+0x324>)
 8004c22:	f7ff fc13 	bl	800444c <PIN_LOW>
 8004c26:	2110      	movs	r1, #16
 8004c28:	480f      	ldr	r0, [pc, #60]	; (8004c68 <TFT_init+0x324>)
 8004c2a:	f7ff fc0f 	bl	800444c <PIN_LOW>
 8004c2e:	2110      	movs	r1, #16
 8004c30:	480d      	ldr	r0, [pc, #52]	; (8004c68 <TFT_init+0x324>)
 8004c32:	f7ff fc0b 	bl	800444c <PIN_LOW>
 8004c36:	2110      	movs	r1, #16
 8004c38:	480b      	ldr	r0, [pc, #44]	; (8004c68 <TFT_init+0x324>)
 8004c3a:	f7ff fc17 	bl	800446c <PIN_HIGH>
 8004c3e:	2110      	movs	r1, #16
 8004c40:	4809      	ldr	r0, [pc, #36]	; (8004c68 <TFT_init+0x324>)
 8004c42:	f7ff fc13 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8004c46:	2001      	movs	r0, #1
 8004c48:	f7ff fc4e 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xB0); // Disable Protect for cmds B1-DF, E0-EF, F0-FF
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	4806      	ldr	r0, [pc, #24]	; (8004c68 <TFT_init+0x324>)
 8004c50:	f7ff fbfc 	bl	800444c <PIN_LOW>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c5a:	23b0      	movs	r3, #176	; 0xb0
 8004c5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004c60:	e006      	b.n	8004c70 <TFT_init+0x32c>
 8004c62:	bf00      	nop
 8004c64:	200003f0 	.word	0x200003f0
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	40020000 	.word	0x40020000
 8004c70:	4bc2      	ldr	r3, [pc, #776]	; (8004f7c <TFT_init+0x638>)
 8004c72:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004c76:	619a      	str	r2, [r3, #24]
 8004c78:	4bc1      	ldr	r3, [pc, #772]	; (8004f80 <TFT_init+0x63c>)
 8004c7a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004c7e:	619a      	str	r2, [r3, #24]
 8004c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c84:	4abd      	ldr	r2, [pc, #756]	; (8004f7c <TFT_init+0x638>)
 8004c86:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c8a:	6193      	str	r3, [r2, #24]
 8004c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c90:	4abb      	ldr	r2, [pc, #748]	; (8004f80 <TFT_init+0x63c>)
 8004c92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c96:	6193      	str	r3, [r2, #24]
 8004c98:	2110      	movs	r1, #16
 8004c9a:	48b9      	ldr	r0, [pc, #740]	; (8004f80 <TFT_init+0x63c>)
 8004c9c:	f7ff fbd6 	bl	800444c <PIN_LOW>
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	48b7      	ldr	r0, [pc, #732]	; (8004f80 <TFT_init+0x63c>)
 8004ca4:	f7ff fbd2 	bl	800444c <PIN_LOW>
 8004ca8:	2110      	movs	r1, #16
 8004caa:	48b5      	ldr	r0, [pc, #724]	; (8004f80 <TFT_init+0x63c>)
 8004cac:	f7ff fbce 	bl	800444c <PIN_LOW>
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	48b3      	ldr	r0, [pc, #716]	; (8004f80 <TFT_init+0x63c>)
 8004cb4:	f7ff fbda 	bl	800446c <PIN_HIGH>
 8004cb8:	2110      	movs	r1, #16
 8004cba:	48b1      	ldr	r0, [pc, #708]	; (8004f80 <TFT_init+0x63c>)
 8004cbc:	f7ff fbd6 	bl	800446c <PIN_HIGH>
 8004cc0:	4bae      	ldr	r3, [pc, #696]	; (8004f7c <TFT_init+0x638>)
 8004cc2:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004cc6:	619a      	str	r2, [r3, #24]
 8004cc8:	4bad      	ldr	r3, [pc, #692]	; (8004f80 <TFT_init+0x63c>)
 8004cca:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004cce:	619a      	str	r2, [r3, #24]
 8004cd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004cd4:	4aa9      	ldr	r2, [pc, #676]	; (8004f7c <TFT_init+0x638>)
 8004cd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cda:	6193      	str	r3, [r2, #24]
 8004cdc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ce0:	4aa7      	ldr	r2, [pc, #668]	; (8004f80 <TFT_init+0x63c>)
 8004ce2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ce6:	6193      	str	r3, [r2, #24]
 8004ce8:	2110      	movs	r1, #16
 8004cea:	48a5      	ldr	r0, [pc, #660]	; (8004f80 <TFT_init+0x63c>)
 8004cec:	f7ff fbae 	bl	800444c <PIN_LOW>
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	48a3      	ldr	r0, [pc, #652]	; (8004f80 <TFT_init+0x63c>)
 8004cf4:	f7ff fbaa 	bl	800444c <PIN_LOW>
 8004cf8:	2110      	movs	r1, #16
 8004cfa:	48a1      	ldr	r0, [pc, #644]	; (8004f80 <TFT_init+0x63c>)
 8004cfc:	f7ff fba6 	bl	800444c <PIN_LOW>
 8004d00:	2110      	movs	r1, #16
 8004d02:	489f      	ldr	r0, [pc, #636]	; (8004f80 <TFT_init+0x63c>)
 8004d04:	f7ff fbb2 	bl	800446c <PIN_HIGH>
 8004d08:	2110      	movs	r1, #16
 8004d0a:	489d      	ldr	r0, [pc, #628]	; (8004f80 <TFT_init+0x63c>)
 8004d0c:	f7ff fbae 	bl	800446c <PIN_HIGH>
 8004d10:	2120      	movs	r1, #32
 8004d12:	489b      	ldr	r0, [pc, #620]	; (8004f80 <TFT_init+0x63c>)
 8004d14:	f7ff fbaa 	bl	800446c <PIN_HIGH>
	WriteData(0x00);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004d24:	4b95      	ldr	r3, [pc, #596]	; (8004f7c <TFT_init+0x638>)
 8004d26:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004d2a:	619a      	str	r2, [r3, #24]
 8004d2c:	4b94      	ldr	r3, [pc, #592]	; (8004f80 <TFT_init+0x63c>)
 8004d2e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004d32:	619a      	str	r2, [r3, #24]
 8004d34:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d38:	4a90      	ldr	r2, [pc, #576]	; (8004f7c <TFT_init+0x638>)
 8004d3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d3e:	6193      	str	r3, [r2, #24]
 8004d40:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d44:	4a8e      	ldr	r2, [pc, #568]	; (8004f80 <TFT_init+0x63c>)
 8004d46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d4a:	6193      	str	r3, [r2, #24]
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	488c      	ldr	r0, [pc, #560]	; (8004f80 <TFT_init+0x63c>)
 8004d50:	f7ff fb7c 	bl	800444c <PIN_LOW>
 8004d54:	2110      	movs	r1, #16
 8004d56:	488a      	ldr	r0, [pc, #552]	; (8004f80 <TFT_init+0x63c>)
 8004d58:	f7ff fb78 	bl	800444c <PIN_LOW>
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	4888      	ldr	r0, [pc, #544]	; (8004f80 <TFT_init+0x63c>)
 8004d60:	f7ff fb74 	bl	800444c <PIN_LOW>
 8004d64:	2110      	movs	r1, #16
 8004d66:	4886      	ldr	r0, [pc, #536]	; (8004f80 <TFT_init+0x63c>)
 8004d68:	f7ff fb80 	bl	800446c <PIN_HIGH>
 8004d6c:	2110      	movs	r1, #16
 8004d6e:	4884      	ldr	r0, [pc, #528]	; (8004f80 <TFT_init+0x63c>)
 8004d70:	f7ff fb7c 	bl	800446c <PIN_HIGH>
 8004d74:	4b81      	ldr	r3, [pc, #516]	; (8004f7c <TFT_init+0x638>)
 8004d76:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004d7a:	619a      	str	r2, [r3, #24]
 8004d7c:	4b80      	ldr	r3, [pc, #512]	; (8004f80 <TFT_init+0x63c>)
 8004d7e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004d82:	619a      	str	r2, [r3, #24]
 8004d84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d88:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <TFT_init+0x638>)
 8004d8a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d8e:	6193      	str	r3, [r2, #24]
 8004d90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d94:	4a7a      	ldr	r2, [pc, #488]	; (8004f80 <TFT_init+0x63c>)
 8004d96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d9a:	6193      	str	r3, [r2, #24]
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	4878      	ldr	r0, [pc, #480]	; (8004f80 <TFT_init+0x63c>)
 8004da0:	f7ff fb54 	bl	800444c <PIN_LOW>
 8004da4:	2110      	movs	r1, #16
 8004da6:	4876      	ldr	r0, [pc, #472]	; (8004f80 <TFT_init+0x63c>)
 8004da8:	f7ff fb50 	bl	800444c <PIN_LOW>
 8004dac:	2110      	movs	r1, #16
 8004dae:	4874      	ldr	r0, [pc, #464]	; (8004f80 <TFT_init+0x63c>)
 8004db0:	f7ff fb4c 	bl	800444c <PIN_LOW>
 8004db4:	2110      	movs	r1, #16
 8004db6:	4872      	ldr	r0, [pc, #456]	; (8004f80 <TFT_init+0x63c>)
 8004db8:	f7ff fb58 	bl	800446c <PIN_HIGH>
 8004dbc:	2110      	movs	r1, #16
 8004dbe:	4870      	ldr	r0, [pc, #448]	; (8004f80 <TFT_init+0x63c>)
 8004dc0:	f7ff fb54 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff fb8f 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xC1); // Display Timing [10 10 02 02]
 8004dca:	2120      	movs	r1, #32
 8004dcc:	486c      	ldr	r0, [pc, #432]	; (8004f80 <TFT_init+0x63c>)
 8004dce:	f7ff fb3d 	bl	800444c <PIN_LOW>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004dd8:	23c1      	movs	r3, #193	; 0xc1
 8004dda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004dde:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <TFT_init+0x638>)
 8004de0:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004de4:	619a      	str	r2, [r3, #24]
 8004de6:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <TFT_init+0x63c>)
 8004de8:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004dec:	619a      	str	r2, [r3, #24]
 8004dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004df2:	4a62      	ldr	r2, [pc, #392]	; (8004f7c <TFT_init+0x638>)
 8004df4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004df8:	6193      	str	r3, [r2, #24]
 8004dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfe:	4a60      	ldr	r2, [pc, #384]	; (8004f80 <TFT_init+0x63c>)
 8004e00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e04:	6193      	str	r3, [r2, #24]
 8004e06:	2110      	movs	r1, #16
 8004e08:	485d      	ldr	r0, [pc, #372]	; (8004f80 <TFT_init+0x63c>)
 8004e0a:	f7ff fb1f 	bl	800444c <PIN_LOW>
 8004e0e:	2110      	movs	r1, #16
 8004e10:	485b      	ldr	r0, [pc, #364]	; (8004f80 <TFT_init+0x63c>)
 8004e12:	f7ff fb1b 	bl	800444c <PIN_LOW>
 8004e16:	2110      	movs	r1, #16
 8004e18:	4859      	ldr	r0, [pc, #356]	; (8004f80 <TFT_init+0x63c>)
 8004e1a:	f7ff fb17 	bl	800444c <PIN_LOW>
 8004e1e:	2110      	movs	r1, #16
 8004e20:	4857      	ldr	r0, [pc, #348]	; (8004f80 <TFT_init+0x63c>)
 8004e22:	f7ff fb23 	bl	800446c <PIN_HIGH>
 8004e26:	2110      	movs	r1, #16
 8004e28:	4855      	ldr	r0, [pc, #340]	; (8004f80 <TFT_init+0x63c>)
 8004e2a:	f7ff fb1f 	bl	800446c <PIN_HIGH>
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <TFT_init+0x638>)
 8004e30:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	4b52      	ldr	r3, [pc, #328]	; (8004f80 <TFT_init+0x63c>)
 8004e38:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004e3c:	619a      	str	r2, [r3, #24]
 8004e3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <TFT_init+0x638>)
 8004e44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e48:	6193      	str	r3, [r2, #24]
 8004e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e4e:	4a4c      	ldr	r2, [pc, #304]	; (8004f80 <TFT_init+0x63c>)
 8004e50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e54:	6193      	str	r3, [r2, #24]
 8004e56:	2110      	movs	r1, #16
 8004e58:	4849      	ldr	r0, [pc, #292]	; (8004f80 <TFT_init+0x63c>)
 8004e5a:	f7ff faf7 	bl	800444c <PIN_LOW>
 8004e5e:	2110      	movs	r1, #16
 8004e60:	4847      	ldr	r0, [pc, #284]	; (8004f80 <TFT_init+0x63c>)
 8004e62:	f7ff faf3 	bl	800444c <PIN_LOW>
 8004e66:	2110      	movs	r1, #16
 8004e68:	4845      	ldr	r0, [pc, #276]	; (8004f80 <TFT_init+0x63c>)
 8004e6a:	f7ff faef 	bl	800444c <PIN_LOW>
 8004e6e:	2110      	movs	r1, #16
 8004e70:	4843      	ldr	r0, [pc, #268]	; (8004f80 <TFT_init+0x63c>)
 8004e72:	f7ff fafb 	bl	800446c <PIN_HIGH>
 8004e76:	2110      	movs	r1, #16
 8004e78:	4841      	ldr	r0, [pc, #260]	; (8004f80 <TFT_init+0x63c>)
 8004e7a:	f7ff faf7 	bl	800446c <PIN_HIGH>
 8004e7e:	2120      	movs	r1, #32
 8004e80:	483f      	ldr	r0, [pc, #252]	; (8004f80 <TFT_init+0x63c>)
 8004e82:	f7ff faf3 	bl	800446c <PIN_HIGH>
	WriteData(0x10);
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004e92:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <TFT_init+0x638>)
 8004e94:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <TFT_init+0x63c>)
 8004e9c:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004ea0:	619a      	str	r2, [r3, #24]
 8004ea2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ea6:	4a35      	ldr	r2, [pc, #212]	; (8004f7c <TFT_init+0x638>)
 8004ea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004eac:	6193      	str	r3, [r2, #24]
 8004eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eb2:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <TFT_init+0x63c>)
 8004eb4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004eb8:	6193      	str	r3, [r2, #24]
 8004eba:	2110      	movs	r1, #16
 8004ebc:	4830      	ldr	r0, [pc, #192]	; (8004f80 <TFT_init+0x63c>)
 8004ebe:	f7ff fac5 	bl	800444c <PIN_LOW>
 8004ec2:	2110      	movs	r1, #16
 8004ec4:	482e      	ldr	r0, [pc, #184]	; (8004f80 <TFT_init+0x63c>)
 8004ec6:	f7ff fac1 	bl	800444c <PIN_LOW>
 8004eca:	2110      	movs	r1, #16
 8004ecc:	482c      	ldr	r0, [pc, #176]	; (8004f80 <TFT_init+0x63c>)
 8004ece:	f7ff fabd 	bl	800444c <PIN_LOW>
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	482a      	ldr	r0, [pc, #168]	; (8004f80 <TFT_init+0x63c>)
 8004ed6:	f7ff fac9 	bl	800446c <PIN_HIGH>
 8004eda:	2110      	movs	r1, #16
 8004edc:	4828      	ldr	r0, [pc, #160]	; (8004f80 <TFT_init+0x63c>)
 8004ede:	f7ff fac5 	bl	800446c <PIN_HIGH>
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <TFT_init+0x638>)
 8004ee4:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004ee8:	619a      	str	r2, [r3, #24]
 8004eea:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <TFT_init+0x63c>)
 8004eec:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004ef0:	619a      	str	r2, [r3, #24]
 8004ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <TFT_init+0x638>)
 8004ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004efc:	6193      	str	r3, [r2, #24]
 8004efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <TFT_init+0x63c>)
 8004f04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f08:	6193      	str	r3, [r2, #24]
 8004f0a:	2110      	movs	r1, #16
 8004f0c:	481c      	ldr	r0, [pc, #112]	; (8004f80 <TFT_init+0x63c>)
 8004f0e:	f7ff fa9d 	bl	800444c <PIN_LOW>
 8004f12:	2110      	movs	r1, #16
 8004f14:	481a      	ldr	r0, [pc, #104]	; (8004f80 <TFT_init+0x63c>)
 8004f16:	f7ff fa99 	bl	800444c <PIN_LOW>
 8004f1a:	2110      	movs	r1, #16
 8004f1c:	4818      	ldr	r0, [pc, #96]	; (8004f80 <TFT_init+0x63c>)
 8004f1e:	f7ff fa95 	bl	800444c <PIN_LOW>
 8004f22:	2110      	movs	r1, #16
 8004f24:	4816      	ldr	r0, [pc, #88]	; (8004f80 <TFT_init+0x63c>)
 8004f26:	f7ff faa1 	bl	800446c <PIN_HIGH>
 8004f2a:	2110      	movs	r1, #16
 8004f2c:	4814      	ldr	r0, [pc, #80]	; (8004f80 <TFT_init+0x63c>)
 8004f2e:	f7ff fa9d 	bl	800446c <PIN_HIGH>
	WriteData(0x10);
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <TFT_init+0x638>)
 8004f40:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004f44:	619a      	str	r2, [r3, #24]
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <TFT_init+0x63c>)
 8004f48:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004f4c:	619a      	str	r2, [r3, #24]
 8004f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <TFT_init+0x638>)
 8004f54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f58:	6193      	str	r3, [r2, #24]
 8004f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <TFT_init+0x63c>)
 8004f60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f64:	6193      	str	r3, [r2, #24]
 8004f66:	2110      	movs	r1, #16
 8004f68:	4805      	ldr	r0, [pc, #20]	; (8004f80 <TFT_init+0x63c>)
 8004f6a:	f7ff fa6f 	bl	800444c <PIN_LOW>
 8004f6e:	2110      	movs	r1, #16
 8004f70:	4803      	ldr	r0, [pc, #12]	; (8004f80 <TFT_init+0x63c>)
 8004f72:	f7ff fa6b 	bl	800444c <PIN_LOW>
 8004f76:	2110      	movs	r1, #16
 8004f78:	e004      	b.n	8004f84 <TFT_init+0x640>
 8004f7a:	bf00      	nop
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	40020400 	.word	0x40020400
 8004f84:	48c3      	ldr	r0, [pc, #780]	; (8005294 <TFT_init+0x950>)
 8004f86:	f7ff fa61 	bl	800444c <PIN_LOW>
 8004f8a:	2110      	movs	r1, #16
 8004f8c:	48c1      	ldr	r0, [pc, #772]	; (8005294 <TFT_init+0x950>)
 8004f8e:	f7ff fa6d 	bl	800446c <PIN_HIGH>
 8004f92:	2110      	movs	r1, #16
 8004f94:	48bf      	ldr	r0, [pc, #764]	; (8005294 <TFT_init+0x950>)
 8004f96:	f7ff fa69 	bl	800446c <PIN_HIGH>
 8004f9a:	4bbf      	ldr	r3, [pc, #764]	; (8005298 <TFT_init+0x954>)
 8004f9c:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	4bbc      	ldr	r3, [pc, #752]	; (8005294 <TFT_init+0x950>)
 8004fa4:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8004fa8:	619a      	str	r2, [r3, #24]
 8004faa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004fae:	4aba      	ldr	r2, [pc, #744]	; (8005298 <TFT_init+0x954>)
 8004fb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fb4:	6193      	str	r3, [r2, #24]
 8004fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004fba:	4ab6      	ldr	r2, [pc, #728]	; (8005294 <TFT_init+0x950>)
 8004fbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fc0:	6193      	str	r3, [r2, #24]
 8004fc2:	2110      	movs	r1, #16
 8004fc4:	48b3      	ldr	r0, [pc, #716]	; (8005294 <TFT_init+0x950>)
 8004fc6:	f7ff fa41 	bl	800444c <PIN_LOW>
 8004fca:	2110      	movs	r1, #16
 8004fcc:	48b1      	ldr	r0, [pc, #708]	; (8005294 <TFT_init+0x950>)
 8004fce:	f7ff fa3d 	bl	800444c <PIN_LOW>
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	48af      	ldr	r0, [pc, #700]	; (8005294 <TFT_init+0x950>)
 8004fd6:	f7ff fa39 	bl	800444c <PIN_LOW>
 8004fda:	2110      	movs	r1, #16
 8004fdc:	48ad      	ldr	r0, [pc, #692]	; (8005294 <TFT_init+0x950>)
 8004fde:	f7ff fa45 	bl	800446c <PIN_HIGH>
 8004fe2:	2110      	movs	r1, #16
 8004fe4:	48ab      	ldr	r0, [pc, #684]	; (8005294 <TFT_init+0x950>)
 8004fe6:	f7ff fa41 	bl	800446c <PIN_HIGH>
	WriteData(0x02);
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004ff6:	4ba8      	ldr	r3, [pc, #672]	; (8005298 <TFT_init+0x954>)
 8004ff8:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8004ffc:	619a      	str	r2, [r3, #24]
 8004ffe:	4ba5      	ldr	r3, [pc, #660]	; (8005294 <TFT_init+0x950>)
 8005000:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005004:	619a      	str	r2, [r3, #24]
 8005006:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800500a:	4aa3      	ldr	r2, [pc, #652]	; (8005298 <TFT_init+0x954>)
 800500c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005010:	6193      	str	r3, [r2, #24]
 8005012:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005016:	4a9f      	ldr	r2, [pc, #636]	; (8005294 <TFT_init+0x950>)
 8005018:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800501c:	6193      	str	r3, [r2, #24]
 800501e:	2110      	movs	r1, #16
 8005020:	489c      	ldr	r0, [pc, #624]	; (8005294 <TFT_init+0x950>)
 8005022:	f7ff fa13 	bl	800444c <PIN_LOW>
 8005026:	2110      	movs	r1, #16
 8005028:	489a      	ldr	r0, [pc, #616]	; (8005294 <TFT_init+0x950>)
 800502a:	f7ff fa0f 	bl	800444c <PIN_LOW>
 800502e:	2110      	movs	r1, #16
 8005030:	4898      	ldr	r0, [pc, #608]	; (8005294 <TFT_init+0x950>)
 8005032:	f7ff fa0b 	bl	800444c <PIN_LOW>
 8005036:	2110      	movs	r1, #16
 8005038:	4896      	ldr	r0, [pc, #600]	; (8005294 <TFT_init+0x950>)
 800503a:	f7ff fa17 	bl	800446c <PIN_HIGH>
 800503e:	2110      	movs	r1, #16
 8005040:	4894      	ldr	r0, [pc, #592]	; (8005294 <TFT_init+0x950>)
 8005042:	f7ff fa13 	bl	800446c <PIN_HIGH>
 8005046:	4b94      	ldr	r3, [pc, #592]	; (8005298 <TFT_init+0x954>)
 8005048:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800504c:	619a      	str	r2, [r3, #24]
 800504e:	4b91      	ldr	r3, [pc, #580]	; (8005294 <TFT_init+0x950>)
 8005050:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005054:	619a      	str	r2, [r3, #24]
 8005056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800505a:	4a8f      	ldr	r2, [pc, #572]	; (8005298 <TFT_init+0x954>)
 800505c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005060:	6193      	str	r3, [r2, #24]
 8005062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005066:	4a8b      	ldr	r2, [pc, #556]	; (8005294 <TFT_init+0x950>)
 8005068:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800506c:	6193      	str	r3, [r2, #24]
 800506e:	2110      	movs	r1, #16
 8005070:	4888      	ldr	r0, [pc, #544]	; (8005294 <TFT_init+0x950>)
 8005072:	f7ff f9eb 	bl	800444c <PIN_LOW>
 8005076:	2110      	movs	r1, #16
 8005078:	4886      	ldr	r0, [pc, #536]	; (8005294 <TFT_init+0x950>)
 800507a:	f7ff f9e7 	bl	800444c <PIN_LOW>
 800507e:	2110      	movs	r1, #16
 8005080:	4884      	ldr	r0, [pc, #528]	; (8005294 <TFT_init+0x950>)
 8005082:	f7ff f9e3 	bl	800444c <PIN_LOW>
 8005086:	2110      	movs	r1, #16
 8005088:	4882      	ldr	r0, [pc, #520]	; (8005294 <TFT_init+0x950>)
 800508a:	f7ff f9ef 	bl	800446c <PIN_HIGH>
 800508e:	2110      	movs	r1, #16
 8005090:	4880      	ldr	r0, [pc, #512]	; (8005294 <TFT_init+0x950>)
 8005092:	f7ff f9eb 	bl	800446c <PIN_HIGH>
	WriteData(0x02);
 8005096:	2300      	movs	r3, #0
 8005098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050a2:	4b7d      	ldr	r3, [pc, #500]	; (8005298 <TFT_init+0x954>)
 80050a4:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80050a8:	619a      	str	r2, [r3, #24]
 80050aa:	4b7a      	ldr	r3, [pc, #488]	; (8005294 <TFT_init+0x950>)
 80050ac:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80050b0:	619a      	str	r2, [r3, #24]
 80050b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050b6:	4a78      	ldr	r2, [pc, #480]	; (8005298 <TFT_init+0x954>)
 80050b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050bc:	6193      	str	r3, [r2, #24]
 80050be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c2:	4a74      	ldr	r2, [pc, #464]	; (8005294 <TFT_init+0x950>)
 80050c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80050c8:	6193      	str	r3, [r2, #24]
 80050ca:	2110      	movs	r1, #16
 80050cc:	4871      	ldr	r0, [pc, #452]	; (8005294 <TFT_init+0x950>)
 80050ce:	f7ff f9bd 	bl	800444c <PIN_LOW>
 80050d2:	2110      	movs	r1, #16
 80050d4:	486f      	ldr	r0, [pc, #444]	; (8005294 <TFT_init+0x950>)
 80050d6:	f7ff f9b9 	bl	800444c <PIN_LOW>
 80050da:	2110      	movs	r1, #16
 80050dc:	486d      	ldr	r0, [pc, #436]	; (8005294 <TFT_init+0x950>)
 80050de:	f7ff f9b5 	bl	800444c <PIN_LOW>
 80050e2:	2110      	movs	r1, #16
 80050e4:	486b      	ldr	r0, [pc, #428]	; (8005294 <TFT_init+0x950>)
 80050e6:	f7ff f9c1 	bl	800446c <PIN_HIGH>
 80050ea:	2110      	movs	r1, #16
 80050ec:	4869      	ldr	r0, [pc, #420]	; (8005294 <TFT_init+0x950>)
 80050ee:	f7ff f9bd 	bl	800446c <PIN_HIGH>
 80050f2:	4b69      	ldr	r3, [pc, #420]	; (8005298 <TFT_init+0x954>)
 80050f4:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80050f8:	619a      	str	r2, [r3, #24]
 80050fa:	4b66      	ldr	r3, [pc, #408]	; (8005294 <TFT_init+0x950>)
 80050fc:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005100:	619a      	str	r2, [r3, #24]
 8005102:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005106:	4a64      	ldr	r2, [pc, #400]	; (8005298 <TFT_init+0x954>)
 8005108:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800510c:	6193      	str	r3, [r2, #24]
 800510e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005112:	4a60      	ldr	r2, [pc, #384]	; (8005294 <TFT_init+0x950>)
 8005114:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005118:	6193      	str	r3, [r2, #24]
 800511a:	2110      	movs	r1, #16
 800511c:	485d      	ldr	r0, [pc, #372]	; (8005294 <TFT_init+0x950>)
 800511e:	f7ff f995 	bl	800444c <PIN_LOW>
 8005122:	2110      	movs	r1, #16
 8005124:	485b      	ldr	r0, [pc, #364]	; (8005294 <TFT_init+0x950>)
 8005126:	f7ff f991 	bl	800444c <PIN_LOW>
 800512a:	2110      	movs	r1, #16
 800512c:	4859      	ldr	r0, [pc, #356]	; (8005294 <TFT_init+0x950>)
 800512e:	f7ff f98d 	bl	800444c <PIN_LOW>
 8005132:	2110      	movs	r1, #16
 8005134:	4857      	ldr	r0, [pc, #348]	; (8005294 <TFT_init+0x950>)
 8005136:	f7ff f999 	bl	800446c <PIN_HIGH>
 800513a:	2110      	movs	r1, #16
 800513c:	4855      	ldr	r0, [pc, #340]	; (8005294 <TFT_init+0x950>)
 800513e:	f7ff f995 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8005142:	2001      	movs	r0, #1
 8005144:	f7ff f9d0 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xC0); // Panel Drive [00 35 00 00 01 02 REV=0,GS=0,SS=0
 8005148:	2120      	movs	r1, #32
 800514a:	4852      	ldr	r0, [pc, #328]	; (8005294 <TFT_init+0x950>)
 800514c:	f7ff f97e 	bl	800444c <PIN_LOW>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005156:	23c0      	movs	r3, #192	; 0xc0
 8005158:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800515c:	4b4e      	ldr	r3, [pc, #312]	; (8005298 <TFT_init+0x954>)
 800515e:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005162:	619a      	str	r2, [r3, #24]
 8005164:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <TFT_init+0x950>)
 8005166:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800516a:	619a      	str	r2, [r3, #24]
 800516c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005170:	4a49      	ldr	r2, [pc, #292]	; (8005298 <TFT_init+0x954>)
 8005172:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005176:	6193      	str	r3, [r2, #24]
 8005178:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800517c:	4a45      	ldr	r2, [pc, #276]	; (8005294 <TFT_init+0x950>)
 800517e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005182:	6193      	str	r3, [r2, #24]
 8005184:	2110      	movs	r1, #16
 8005186:	4843      	ldr	r0, [pc, #268]	; (8005294 <TFT_init+0x950>)
 8005188:	f7ff f960 	bl	800444c <PIN_LOW>
 800518c:	2110      	movs	r1, #16
 800518e:	4841      	ldr	r0, [pc, #260]	; (8005294 <TFT_init+0x950>)
 8005190:	f7ff f95c 	bl	800444c <PIN_LOW>
 8005194:	2110      	movs	r1, #16
 8005196:	483f      	ldr	r0, [pc, #252]	; (8005294 <TFT_init+0x950>)
 8005198:	f7ff f958 	bl	800444c <PIN_LOW>
 800519c:	2110      	movs	r1, #16
 800519e:	483d      	ldr	r0, [pc, #244]	; (8005294 <TFT_init+0x950>)
 80051a0:	f7ff f964 	bl	800446c <PIN_HIGH>
 80051a4:	2110      	movs	r1, #16
 80051a6:	483b      	ldr	r0, [pc, #236]	; (8005294 <TFT_init+0x950>)
 80051a8:	f7ff f960 	bl	800446c <PIN_HIGH>
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <TFT_init+0x954>)
 80051ae:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80051b2:	619a      	str	r2, [r3, #24]
 80051b4:	4b37      	ldr	r3, [pc, #220]	; (8005294 <TFT_init+0x950>)
 80051b6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80051ba:	619a      	str	r2, [r3, #24]
 80051bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <TFT_init+0x954>)
 80051c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051c6:	6193      	str	r3, [r2, #24]
 80051c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051cc:	4a31      	ldr	r2, [pc, #196]	; (8005294 <TFT_init+0x950>)
 80051ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051d2:	6193      	str	r3, [r2, #24]
 80051d4:	2110      	movs	r1, #16
 80051d6:	482f      	ldr	r0, [pc, #188]	; (8005294 <TFT_init+0x950>)
 80051d8:	f7ff f938 	bl	800444c <PIN_LOW>
 80051dc:	2110      	movs	r1, #16
 80051de:	482d      	ldr	r0, [pc, #180]	; (8005294 <TFT_init+0x950>)
 80051e0:	f7ff f934 	bl	800444c <PIN_LOW>
 80051e4:	2110      	movs	r1, #16
 80051e6:	482b      	ldr	r0, [pc, #172]	; (8005294 <TFT_init+0x950>)
 80051e8:	f7ff f930 	bl	800444c <PIN_LOW>
 80051ec:	2110      	movs	r1, #16
 80051ee:	4829      	ldr	r0, [pc, #164]	; (8005294 <TFT_init+0x950>)
 80051f0:	f7ff f93c 	bl	800446c <PIN_HIGH>
 80051f4:	2110      	movs	r1, #16
 80051f6:	4827      	ldr	r0, [pc, #156]	; (8005294 <TFT_init+0x950>)
 80051f8:	f7ff f938 	bl	800446c <PIN_HIGH>
 80051fc:	2120      	movs	r1, #32
 80051fe:	4825      	ldr	r0, [pc, #148]	; (8005294 <TFT_init+0x950>)
 8005200:	f7ff f934 	bl	800446c <PIN_HIGH>
	WriteData(0x00);
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <TFT_init+0x954>)
 8005212:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005216:	619a      	str	r2, [r3, #24]
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <TFT_init+0x950>)
 800521a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800521e:	619a      	str	r2, [r3, #24]
 8005220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <TFT_init+0x954>)
 8005226:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800522a:	6193      	str	r3, [r2, #24]
 800522c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <TFT_init+0x950>)
 8005232:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005236:	6193      	str	r3, [r2, #24]
 8005238:	2110      	movs	r1, #16
 800523a:	4816      	ldr	r0, [pc, #88]	; (8005294 <TFT_init+0x950>)
 800523c:	f7ff f906 	bl	800444c <PIN_LOW>
 8005240:	2110      	movs	r1, #16
 8005242:	4814      	ldr	r0, [pc, #80]	; (8005294 <TFT_init+0x950>)
 8005244:	f7ff f902 	bl	800444c <PIN_LOW>
 8005248:	2110      	movs	r1, #16
 800524a:	4812      	ldr	r0, [pc, #72]	; (8005294 <TFT_init+0x950>)
 800524c:	f7ff f8fe 	bl	800444c <PIN_LOW>
 8005250:	2110      	movs	r1, #16
 8005252:	4810      	ldr	r0, [pc, #64]	; (8005294 <TFT_init+0x950>)
 8005254:	f7ff f90a 	bl	800446c <PIN_HIGH>
 8005258:	2110      	movs	r1, #16
 800525a:	480e      	ldr	r0, [pc, #56]	; (8005294 <TFT_init+0x950>)
 800525c:	f7ff f906 	bl	800446c <PIN_HIGH>
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <TFT_init+0x954>)
 8005262:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005266:	619a      	str	r2, [r3, #24]
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <TFT_init+0x950>)
 800526a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800526e:	619a      	str	r2, [r3, #24]
 8005270:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <TFT_init+0x954>)
 8005276:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800527a:	6193      	str	r3, [r2, #24]
 800527c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <TFT_init+0x950>)
 8005282:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005286:	6193      	str	r3, [r2, #24]
 8005288:	2110      	movs	r1, #16
 800528a:	4802      	ldr	r0, [pc, #8]	; (8005294 <TFT_init+0x950>)
 800528c:	f7ff f8de 	bl	800444c <PIN_LOW>
 8005290:	e004      	b.n	800529c <TFT_init+0x958>
 8005292:	bf00      	nop
 8005294:	40020400 	.word	0x40020400
 8005298:	40020000 	.word	0x40020000
 800529c:	2110      	movs	r1, #16
 800529e:	48bc      	ldr	r0, [pc, #752]	; (8005590 <TFT_init+0xc4c>)
 80052a0:	f7ff f8d4 	bl	800444c <PIN_LOW>
 80052a4:	2110      	movs	r1, #16
 80052a6:	48ba      	ldr	r0, [pc, #744]	; (8005590 <TFT_init+0xc4c>)
 80052a8:	f7ff f8d0 	bl	800444c <PIN_LOW>
 80052ac:	2110      	movs	r1, #16
 80052ae:	48b8      	ldr	r0, [pc, #736]	; (8005590 <TFT_init+0xc4c>)
 80052b0:	f7ff f8dc 	bl	800446c <PIN_HIGH>
 80052b4:	2110      	movs	r1, #16
 80052b6:	48b6      	ldr	r0, [pc, #728]	; (8005590 <TFT_init+0xc4c>)
 80052b8:	f7ff f8d8 	bl	800446c <PIN_HIGH>
	WriteData(0x35);
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80052c2:	2335      	movs	r3, #53	; 0x35
 80052c4:	f887 3020 	strb.w	r3, [r7, #32]
 80052c8:	4bb2      	ldr	r3, [pc, #712]	; (8005594 <TFT_init+0xc50>)
 80052ca:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80052ce:	619a      	str	r2, [r3, #24]
 80052d0:	4baf      	ldr	r3, [pc, #700]	; (8005590 <TFT_init+0xc4c>)
 80052d2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80052d6:	619a      	str	r2, [r3, #24]
 80052d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80052dc:	4aad      	ldr	r2, [pc, #692]	; (8005594 <TFT_init+0xc50>)
 80052de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052e2:	6193      	str	r3, [r2, #24]
 80052e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80052e8:	4aa9      	ldr	r2, [pc, #676]	; (8005590 <TFT_init+0xc4c>)
 80052ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052ee:	6193      	str	r3, [r2, #24]
 80052f0:	2110      	movs	r1, #16
 80052f2:	48a7      	ldr	r0, [pc, #668]	; (8005590 <TFT_init+0xc4c>)
 80052f4:	f7ff f8aa 	bl	800444c <PIN_LOW>
 80052f8:	2110      	movs	r1, #16
 80052fa:	48a5      	ldr	r0, [pc, #660]	; (8005590 <TFT_init+0xc4c>)
 80052fc:	f7ff f8a6 	bl	800444c <PIN_LOW>
 8005300:	2110      	movs	r1, #16
 8005302:	48a3      	ldr	r0, [pc, #652]	; (8005590 <TFT_init+0xc4c>)
 8005304:	f7ff f8a2 	bl	800444c <PIN_LOW>
 8005308:	2110      	movs	r1, #16
 800530a:	48a1      	ldr	r0, [pc, #644]	; (8005590 <TFT_init+0xc4c>)
 800530c:	f7ff f8ae 	bl	800446c <PIN_HIGH>
 8005310:	2110      	movs	r1, #16
 8005312:	489f      	ldr	r0, [pc, #636]	; (8005590 <TFT_init+0xc4c>)
 8005314:	f7ff f8aa 	bl	800446c <PIN_HIGH>
 8005318:	4b9e      	ldr	r3, [pc, #632]	; (8005594 <TFT_init+0xc50>)
 800531a:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800531e:	619a      	str	r2, [r3, #24]
 8005320:	4b9b      	ldr	r3, [pc, #620]	; (8005590 <TFT_init+0xc4c>)
 8005322:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005326:	619a      	str	r2, [r3, #24]
 8005328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800532c:	4a99      	ldr	r2, [pc, #612]	; (8005594 <TFT_init+0xc50>)
 800532e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005332:	6193      	str	r3, [r2, #24]
 8005334:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005338:	4a95      	ldr	r2, [pc, #596]	; (8005590 <TFT_init+0xc4c>)
 800533a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800533e:	6193      	str	r3, [r2, #24]
 8005340:	2110      	movs	r1, #16
 8005342:	4893      	ldr	r0, [pc, #588]	; (8005590 <TFT_init+0xc4c>)
 8005344:	f7ff f882 	bl	800444c <PIN_LOW>
 8005348:	2110      	movs	r1, #16
 800534a:	4891      	ldr	r0, [pc, #580]	; (8005590 <TFT_init+0xc4c>)
 800534c:	f7ff f87e 	bl	800444c <PIN_LOW>
 8005350:	2110      	movs	r1, #16
 8005352:	488f      	ldr	r0, [pc, #572]	; (8005590 <TFT_init+0xc4c>)
 8005354:	f7ff f87a 	bl	800444c <PIN_LOW>
 8005358:	2110      	movs	r1, #16
 800535a:	488d      	ldr	r0, [pc, #564]	; (8005590 <TFT_init+0xc4c>)
 800535c:	f7ff f886 	bl	800446c <PIN_HIGH>
 8005360:	2110      	movs	r1, #16
 8005362:	488b      	ldr	r0, [pc, #556]	; (8005590 <TFT_init+0xc4c>)
 8005364:	f7ff f882 	bl	800446c <PIN_HIGH>
	WriteData(0x00);
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	2300      	movs	r3, #0
 800536e:	77bb      	strb	r3, [r7, #30]
 8005370:	4b88      	ldr	r3, [pc, #544]	; (8005594 <TFT_init+0xc50>)
 8005372:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005376:	619a      	str	r2, [r3, #24]
 8005378:	4b85      	ldr	r3, [pc, #532]	; (8005590 <TFT_init+0xc4c>)
 800537a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800537e:	619a      	str	r2, [r3, #24]
 8005380:	7ffb      	ldrb	r3, [r7, #31]
 8005382:	4a84      	ldr	r2, [pc, #528]	; (8005594 <TFT_init+0xc50>)
 8005384:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005388:	6193      	str	r3, [r2, #24]
 800538a:	7ffb      	ldrb	r3, [r7, #31]
 800538c:	4a80      	ldr	r2, [pc, #512]	; (8005590 <TFT_init+0xc4c>)
 800538e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005392:	6193      	str	r3, [r2, #24]
 8005394:	2110      	movs	r1, #16
 8005396:	487e      	ldr	r0, [pc, #504]	; (8005590 <TFT_init+0xc4c>)
 8005398:	f7ff f858 	bl	800444c <PIN_LOW>
 800539c:	2110      	movs	r1, #16
 800539e:	487c      	ldr	r0, [pc, #496]	; (8005590 <TFT_init+0xc4c>)
 80053a0:	f7ff f854 	bl	800444c <PIN_LOW>
 80053a4:	2110      	movs	r1, #16
 80053a6:	487a      	ldr	r0, [pc, #488]	; (8005590 <TFT_init+0xc4c>)
 80053a8:	f7ff f850 	bl	800444c <PIN_LOW>
 80053ac:	2110      	movs	r1, #16
 80053ae:	4878      	ldr	r0, [pc, #480]	; (8005590 <TFT_init+0xc4c>)
 80053b0:	f7ff f85c 	bl	800446c <PIN_HIGH>
 80053b4:	2110      	movs	r1, #16
 80053b6:	4876      	ldr	r0, [pc, #472]	; (8005590 <TFT_init+0xc4c>)
 80053b8:	f7ff f858 	bl	800446c <PIN_HIGH>
 80053bc:	4b75      	ldr	r3, [pc, #468]	; (8005594 <TFT_init+0xc50>)
 80053be:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80053c2:	619a      	str	r2, [r3, #24]
 80053c4:	4b72      	ldr	r3, [pc, #456]	; (8005590 <TFT_init+0xc4c>)
 80053c6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	7fbb      	ldrb	r3, [r7, #30]
 80053ce:	4a71      	ldr	r2, [pc, #452]	; (8005594 <TFT_init+0xc50>)
 80053d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053d4:	6193      	str	r3, [r2, #24]
 80053d6:	7fbb      	ldrb	r3, [r7, #30]
 80053d8:	4a6d      	ldr	r2, [pc, #436]	; (8005590 <TFT_init+0xc4c>)
 80053da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053de:	6193      	str	r3, [r2, #24]
 80053e0:	2110      	movs	r1, #16
 80053e2:	486b      	ldr	r0, [pc, #428]	; (8005590 <TFT_init+0xc4c>)
 80053e4:	f7ff f832 	bl	800444c <PIN_LOW>
 80053e8:	2110      	movs	r1, #16
 80053ea:	4869      	ldr	r0, [pc, #420]	; (8005590 <TFT_init+0xc4c>)
 80053ec:	f7ff f82e 	bl	800444c <PIN_LOW>
 80053f0:	2110      	movs	r1, #16
 80053f2:	4867      	ldr	r0, [pc, #412]	; (8005590 <TFT_init+0xc4c>)
 80053f4:	f7ff f82a 	bl	800444c <PIN_LOW>
 80053f8:	2110      	movs	r1, #16
 80053fa:	4865      	ldr	r0, [pc, #404]	; (8005590 <TFT_init+0xc4c>)
 80053fc:	f7ff f836 	bl	800446c <PIN_HIGH>
 8005400:	2110      	movs	r1, #16
 8005402:	4863      	ldr	r0, [pc, #396]	; (8005590 <TFT_init+0xc4c>)
 8005404:	f7ff f832 	bl	800446c <PIN_HIGH>
	WriteData(0x00);
 8005408:	2300      	movs	r3, #0
 800540a:	777b      	strb	r3, [r7, #29]
 800540c:	2300      	movs	r3, #0
 800540e:	773b      	strb	r3, [r7, #28]
 8005410:	4b60      	ldr	r3, [pc, #384]	; (8005594 <TFT_init+0xc50>)
 8005412:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005416:	619a      	str	r2, [r3, #24]
 8005418:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <TFT_init+0xc4c>)
 800541a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800541e:	619a      	str	r2, [r3, #24]
 8005420:	7f7b      	ldrb	r3, [r7, #29]
 8005422:	4a5c      	ldr	r2, [pc, #368]	; (8005594 <TFT_init+0xc50>)
 8005424:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005428:	6193      	str	r3, [r2, #24]
 800542a:	7f7b      	ldrb	r3, [r7, #29]
 800542c:	4a58      	ldr	r2, [pc, #352]	; (8005590 <TFT_init+0xc4c>)
 800542e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005432:	6193      	str	r3, [r2, #24]
 8005434:	2110      	movs	r1, #16
 8005436:	4856      	ldr	r0, [pc, #344]	; (8005590 <TFT_init+0xc4c>)
 8005438:	f7ff f808 	bl	800444c <PIN_LOW>
 800543c:	2110      	movs	r1, #16
 800543e:	4854      	ldr	r0, [pc, #336]	; (8005590 <TFT_init+0xc4c>)
 8005440:	f7ff f804 	bl	800444c <PIN_LOW>
 8005444:	2110      	movs	r1, #16
 8005446:	4852      	ldr	r0, [pc, #328]	; (8005590 <TFT_init+0xc4c>)
 8005448:	f7ff f800 	bl	800444c <PIN_LOW>
 800544c:	2110      	movs	r1, #16
 800544e:	4850      	ldr	r0, [pc, #320]	; (8005590 <TFT_init+0xc4c>)
 8005450:	f7ff f80c 	bl	800446c <PIN_HIGH>
 8005454:	2110      	movs	r1, #16
 8005456:	484e      	ldr	r0, [pc, #312]	; (8005590 <TFT_init+0xc4c>)
 8005458:	f7ff f808 	bl	800446c <PIN_HIGH>
 800545c:	4b4d      	ldr	r3, [pc, #308]	; (8005594 <TFT_init+0xc50>)
 800545e:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005462:	619a      	str	r2, [r3, #24]
 8005464:	4b4a      	ldr	r3, [pc, #296]	; (8005590 <TFT_init+0xc4c>)
 8005466:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800546a:	619a      	str	r2, [r3, #24]
 800546c:	7f3b      	ldrb	r3, [r7, #28]
 800546e:	4a49      	ldr	r2, [pc, #292]	; (8005594 <TFT_init+0xc50>)
 8005470:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005474:	6193      	str	r3, [r2, #24]
 8005476:	7f3b      	ldrb	r3, [r7, #28]
 8005478:	4a45      	ldr	r2, [pc, #276]	; (8005590 <TFT_init+0xc4c>)
 800547a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800547e:	6193      	str	r3, [r2, #24]
 8005480:	2110      	movs	r1, #16
 8005482:	4843      	ldr	r0, [pc, #268]	; (8005590 <TFT_init+0xc4c>)
 8005484:	f7fe ffe2 	bl	800444c <PIN_LOW>
 8005488:	2110      	movs	r1, #16
 800548a:	4841      	ldr	r0, [pc, #260]	; (8005590 <TFT_init+0xc4c>)
 800548c:	f7fe ffde 	bl	800444c <PIN_LOW>
 8005490:	2110      	movs	r1, #16
 8005492:	483f      	ldr	r0, [pc, #252]	; (8005590 <TFT_init+0xc4c>)
 8005494:	f7fe ffda 	bl	800444c <PIN_LOW>
 8005498:	2110      	movs	r1, #16
 800549a:	483d      	ldr	r0, [pc, #244]	; (8005590 <TFT_init+0xc4c>)
 800549c:	f7fe ffe6 	bl	800446c <PIN_HIGH>
 80054a0:	2110      	movs	r1, #16
 80054a2:	483b      	ldr	r0, [pc, #236]	; (8005590 <TFT_init+0xc4c>)
 80054a4:	f7fe ffe2 	bl	800446c <PIN_HIGH>
	WriteData(0x01);
 80054a8:	2300      	movs	r3, #0
 80054aa:	76fb      	strb	r3, [r7, #27]
 80054ac:	2301      	movs	r3, #1
 80054ae:	76bb      	strb	r3, [r7, #26]
 80054b0:	4b38      	ldr	r3, [pc, #224]	; (8005594 <TFT_init+0xc50>)
 80054b2:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80054b6:	619a      	str	r2, [r3, #24]
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <TFT_init+0xc4c>)
 80054ba:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80054be:	619a      	str	r2, [r3, #24]
 80054c0:	7efb      	ldrb	r3, [r7, #27]
 80054c2:	4a34      	ldr	r2, [pc, #208]	; (8005594 <TFT_init+0xc50>)
 80054c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054c8:	6193      	str	r3, [r2, #24]
 80054ca:	7efb      	ldrb	r3, [r7, #27]
 80054cc:	4a30      	ldr	r2, [pc, #192]	; (8005590 <TFT_init+0xc4c>)
 80054ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054d2:	6193      	str	r3, [r2, #24]
 80054d4:	2110      	movs	r1, #16
 80054d6:	482e      	ldr	r0, [pc, #184]	; (8005590 <TFT_init+0xc4c>)
 80054d8:	f7fe ffb8 	bl	800444c <PIN_LOW>
 80054dc:	2110      	movs	r1, #16
 80054de:	482c      	ldr	r0, [pc, #176]	; (8005590 <TFT_init+0xc4c>)
 80054e0:	f7fe ffb4 	bl	800444c <PIN_LOW>
 80054e4:	2110      	movs	r1, #16
 80054e6:	482a      	ldr	r0, [pc, #168]	; (8005590 <TFT_init+0xc4c>)
 80054e8:	f7fe ffb0 	bl	800444c <PIN_LOW>
 80054ec:	2110      	movs	r1, #16
 80054ee:	4828      	ldr	r0, [pc, #160]	; (8005590 <TFT_init+0xc4c>)
 80054f0:	f7fe ffbc 	bl	800446c <PIN_HIGH>
 80054f4:	2110      	movs	r1, #16
 80054f6:	4826      	ldr	r0, [pc, #152]	; (8005590 <TFT_init+0xc4c>)
 80054f8:	f7fe ffb8 	bl	800446c <PIN_HIGH>
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <TFT_init+0xc50>)
 80054fe:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005502:	619a      	str	r2, [r3, #24]
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <TFT_init+0xc4c>)
 8005506:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800550a:	619a      	str	r2, [r3, #24]
 800550c:	7ebb      	ldrb	r3, [r7, #26]
 800550e:	4a21      	ldr	r2, [pc, #132]	; (8005594 <TFT_init+0xc50>)
 8005510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005514:	6193      	str	r3, [r2, #24]
 8005516:	7ebb      	ldrb	r3, [r7, #26]
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <TFT_init+0xc4c>)
 800551a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800551e:	6193      	str	r3, [r2, #24]
 8005520:	2110      	movs	r1, #16
 8005522:	481b      	ldr	r0, [pc, #108]	; (8005590 <TFT_init+0xc4c>)
 8005524:	f7fe ff92 	bl	800444c <PIN_LOW>
 8005528:	2110      	movs	r1, #16
 800552a:	4819      	ldr	r0, [pc, #100]	; (8005590 <TFT_init+0xc4c>)
 800552c:	f7fe ff8e 	bl	800444c <PIN_LOW>
 8005530:	2110      	movs	r1, #16
 8005532:	4817      	ldr	r0, [pc, #92]	; (8005590 <TFT_init+0xc4c>)
 8005534:	f7fe ff8a 	bl	800444c <PIN_LOW>
 8005538:	2110      	movs	r1, #16
 800553a:	4815      	ldr	r0, [pc, #84]	; (8005590 <TFT_init+0xc4c>)
 800553c:	f7fe ff96 	bl	800446c <PIN_HIGH>
 8005540:	2110      	movs	r1, #16
 8005542:	4813      	ldr	r0, [pc, #76]	; (8005590 <TFT_init+0xc4c>)
 8005544:	f7fe ff92 	bl	800446c <PIN_HIGH>
	WriteData(0x02);
 8005548:	2300      	movs	r3, #0
 800554a:	767b      	strb	r3, [r7, #25]
 800554c:	2302      	movs	r3, #2
 800554e:	763b      	strb	r3, [r7, #24]
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <TFT_init+0xc50>)
 8005552:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005556:	619a      	str	r2, [r3, #24]
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <TFT_init+0xc4c>)
 800555a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800555e:	619a      	str	r2, [r3, #24]
 8005560:	7e7b      	ldrb	r3, [r7, #25]
 8005562:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <TFT_init+0xc50>)
 8005564:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005568:	6193      	str	r3, [r2, #24]
 800556a:	7e7b      	ldrb	r3, [r7, #25]
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <TFT_init+0xc4c>)
 800556e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005572:	6193      	str	r3, [r2, #24]
 8005574:	2110      	movs	r1, #16
 8005576:	4806      	ldr	r0, [pc, #24]	; (8005590 <TFT_init+0xc4c>)
 8005578:	f7fe ff68 	bl	800444c <PIN_LOW>
 800557c:	2110      	movs	r1, #16
 800557e:	4804      	ldr	r0, [pc, #16]	; (8005590 <TFT_init+0xc4c>)
 8005580:	f7fe ff64 	bl	800444c <PIN_LOW>
 8005584:	2110      	movs	r1, #16
 8005586:	4802      	ldr	r0, [pc, #8]	; (8005590 <TFT_init+0xc4c>)
 8005588:	f7fe ff60 	bl	800444c <PIN_LOW>
 800558c:	e004      	b.n	8005598 <TFT_init+0xc54>
 800558e:	bf00      	nop
 8005590:	40020400 	.word	0x40020400
 8005594:	40020000 	.word	0x40020000
 8005598:	2110      	movs	r1, #16
 800559a:	48ba      	ldr	r0, [pc, #744]	; (8005884 <TFT_init+0xf40>)
 800559c:	f7fe ff66 	bl	800446c <PIN_HIGH>
 80055a0:	2110      	movs	r1, #16
 80055a2:	48b8      	ldr	r0, [pc, #736]	; (8005884 <TFT_init+0xf40>)
 80055a4:	f7fe ff62 	bl	800446c <PIN_HIGH>
 80055a8:	4bb7      	ldr	r3, [pc, #732]	; (8005888 <TFT_init+0xf44>)
 80055aa:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80055ae:	619a      	str	r2, [r3, #24]
 80055b0:	4bb4      	ldr	r3, [pc, #720]	; (8005884 <TFT_init+0xf40>)
 80055b2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80055b6:	619a      	str	r2, [r3, #24]
 80055b8:	7e3b      	ldrb	r3, [r7, #24]
 80055ba:	4ab3      	ldr	r2, [pc, #716]	; (8005888 <TFT_init+0xf44>)
 80055bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055c0:	6193      	str	r3, [r2, #24]
 80055c2:	7e3b      	ldrb	r3, [r7, #24]
 80055c4:	4aaf      	ldr	r2, [pc, #700]	; (8005884 <TFT_init+0xf40>)
 80055c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055ca:	6193      	str	r3, [r2, #24]
 80055cc:	2110      	movs	r1, #16
 80055ce:	48ad      	ldr	r0, [pc, #692]	; (8005884 <TFT_init+0xf40>)
 80055d0:	f7fe ff3c 	bl	800444c <PIN_LOW>
 80055d4:	2110      	movs	r1, #16
 80055d6:	48ab      	ldr	r0, [pc, #684]	; (8005884 <TFT_init+0xf40>)
 80055d8:	f7fe ff38 	bl	800444c <PIN_LOW>
 80055dc:	2110      	movs	r1, #16
 80055de:	48a9      	ldr	r0, [pc, #676]	; (8005884 <TFT_init+0xf40>)
 80055e0:	f7fe ff34 	bl	800444c <PIN_LOW>
 80055e4:	2110      	movs	r1, #16
 80055e6:	48a7      	ldr	r0, [pc, #668]	; (8005884 <TFT_init+0xf40>)
 80055e8:	f7fe ff40 	bl	800446c <PIN_HIGH>
 80055ec:	2110      	movs	r1, #16
 80055ee:	48a5      	ldr	r0, [pc, #660]	; (8005884 <TFT_init+0xf40>)
 80055f0:	f7fe ff3c 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 80055f4:	2001      	movs	r0, #1
 80055f6:	f7fe ff77 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xC5); // Frame Rate [04]
 80055fa:	2120      	movs	r1, #32
 80055fc:	48a1      	ldr	r0, [pc, #644]	; (8005884 <TFT_init+0xf40>)
 80055fe:	f7fe ff25 	bl	800444c <PIN_LOW>
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
 8005606:	23c5      	movs	r3, #197	; 0xc5
 8005608:	75bb      	strb	r3, [r7, #22]
 800560a:	4b9f      	ldr	r3, [pc, #636]	; (8005888 <TFT_init+0xf44>)
 800560c:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005610:	619a      	str	r2, [r3, #24]
 8005612:	4b9c      	ldr	r3, [pc, #624]	; (8005884 <TFT_init+0xf40>)
 8005614:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005618:	619a      	str	r2, [r3, #24]
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	4a9a      	ldr	r2, [pc, #616]	; (8005888 <TFT_init+0xf44>)
 800561e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005622:	6193      	str	r3, [r2, #24]
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	4a97      	ldr	r2, [pc, #604]	; (8005884 <TFT_init+0xf40>)
 8005628:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800562c:	6193      	str	r3, [r2, #24]
 800562e:	2110      	movs	r1, #16
 8005630:	4894      	ldr	r0, [pc, #592]	; (8005884 <TFT_init+0xf40>)
 8005632:	f7fe ff0b 	bl	800444c <PIN_LOW>
 8005636:	2110      	movs	r1, #16
 8005638:	4892      	ldr	r0, [pc, #584]	; (8005884 <TFT_init+0xf40>)
 800563a:	f7fe ff07 	bl	800444c <PIN_LOW>
 800563e:	2110      	movs	r1, #16
 8005640:	4890      	ldr	r0, [pc, #576]	; (8005884 <TFT_init+0xf40>)
 8005642:	f7fe ff03 	bl	800444c <PIN_LOW>
 8005646:	2110      	movs	r1, #16
 8005648:	488e      	ldr	r0, [pc, #568]	; (8005884 <TFT_init+0xf40>)
 800564a:	f7fe ff0f 	bl	800446c <PIN_HIGH>
 800564e:	2110      	movs	r1, #16
 8005650:	488c      	ldr	r0, [pc, #560]	; (8005884 <TFT_init+0xf40>)
 8005652:	f7fe ff0b 	bl	800446c <PIN_HIGH>
 8005656:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <TFT_init+0xf44>)
 8005658:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800565c:	619a      	str	r2, [r3, #24]
 800565e:	4b89      	ldr	r3, [pc, #548]	; (8005884 <TFT_init+0xf40>)
 8005660:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005664:	619a      	str	r2, [r3, #24]
 8005666:	7dbb      	ldrb	r3, [r7, #22]
 8005668:	4a87      	ldr	r2, [pc, #540]	; (8005888 <TFT_init+0xf44>)
 800566a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800566e:	6193      	str	r3, [r2, #24]
 8005670:	7dbb      	ldrb	r3, [r7, #22]
 8005672:	4a84      	ldr	r2, [pc, #528]	; (8005884 <TFT_init+0xf40>)
 8005674:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005678:	6193      	str	r3, [r2, #24]
 800567a:	2110      	movs	r1, #16
 800567c:	4881      	ldr	r0, [pc, #516]	; (8005884 <TFT_init+0xf40>)
 800567e:	f7fe fee5 	bl	800444c <PIN_LOW>
 8005682:	2110      	movs	r1, #16
 8005684:	487f      	ldr	r0, [pc, #508]	; (8005884 <TFT_init+0xf40>)
 8005686:	f7fe fee1 	bl	800444c <PIN_LOW>
 800568a:	2110      	movs	r1, #16
 800568c:	487d      	ldr	r0, [pc, #500]	; (8005884 <TFT_init+0xf40>)
 800568e:	f7fe fedd 	bl	800444c <PIN_LOW>
 8005692:	2110      	movs	r1, #16
 8005694:	487b      	ldr	r0, [pc, #492]	; (8005884 <TFT_init+0xf40>)
 8005696:	f7fe fee9 	bl	800446c <PIN_HIGH>
 800569a:	2110      	movs	r1, #16
 800569c:	4879      	ldr	r0, [pc, #484]	; (8005884 <TFT_init+0xf40>)
 800569e:	f7fe fee5 	bl	800446c <PIN_HIGH>
 80056a2:	2120      	movs	r1, #32
 80056a4:	4877      	ldr	r0, [pc, #476]	; (8005884 <TFT_init+0xf40>)
 80056a6:	f7fe fee1 	bl	800446c <PIN_HIGH>
	WriteData(0x04);
 80056aa:	2300      	movs	r3, #0
 80056ac:	757b      	strb	r3, [r7, #21]
 80056ae:	2304      	movs	r3, #4
 80056b0:	753b      	strb	r3, [r7, #20]
 80056b2:	4b75      	ldr	r3, [pc, #468]	; (8005888 <TFT_init+0xf44>)
 80056b4:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80056b8:	619a      	str	r2, [r3, #24]
 80056ba:	4b72      	ldr	r3, [pc, #456]	; (8005884 <TFT_init+0xf40>)
 80056bc:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	7d7b      	ldrb	r3, [r7, #21]
 80056c4:	4a70      	ldr	r2, [pc, #448]	; (8005888 <TFT_init+0xf44>)
 80056c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056ca:	6193      	str	r3, [r2, #24]
 80056cc:	7d7b      	ldrb	r3, [r7, #21]
 80056ce:	4a6d      	ldr	r2, [pc, #436]	; (8005884 <TFT_init+0xf40>)
 80056d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056d4:	6193      	str	r3, [r2, #24]
 80056d6:	2110      	movs	r1, #16
 80056d8:	486a      	ldr	r0, [pc, #424]	; (8005884 <TFT_init+0xf40>)
 80056da:	f7fe feb7 	bl	800444c <PIN_LOW>
 80056de:	2110      	movs	r1, #16
 80056e0:	4868      	ldr	r0, [pc, #416]	; (8005884 <TFT_init+0xf40>)
 80056e2:	f7fe feb3 	bl	800444c <PIN_LOW>
 80056e6:	2110      	movs	r1, #16
 80056e8:	4866      	ldr	r0, [pc, #408]	; (8005884 <TFT_init+0xf40>)
 80056ea:	f7fe feaf 	bl	800444c <PIN_LOW>
 80056ee:	2110      	movs	r1, #16
 80056f0:	4864      	ldr	r0, [pc, #400]	; (8005884 <TFT_init+0xf40>)
 80056f2:	f7fe febb 	bl	800446c <PIN_HIGH>
 80056f6:	2110      	movs	r1, #16
 80056f8:	4862      	ldr	r0, [pc, #392]	; (8005884 <TFT_init+0xf40>)
 80056fa:	f7fe feb7 	bl	800446c <PIN_HIGH>
 80056fe:	4b62      	ldr	r3, [pc, #392]	; (8005888 <TFT_init+0xf44>)
 8005700:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005704:	619a      	str	r2, [r3, #24]
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <TFT_init+0xf40>)
 8005708:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800570c:	619a      	str	r2, [r3, #24]
 800570e:	7d3b      	ldrb	r3, [r7, #20]
 8005710:	4a5d      	ldr	r2, [pc, #372]	; (8005888 <TFT_init+0xf44>)
 8005712:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005716:	6193      	str	r3, [r2, #24]
 8005718:	7d3b      	ldrb	r3, [r7, #20]
 800571a:	4a5a      	ldr	r2, [pc, #360]	; (8005884 <TFT_init+0xf40>)
 800571c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005720:	6193      	str	r3, [r2, #24]
 8005722:	2110      	movs	r1, #16
 8005724:	4857      	ldr	r0, [pc, #348]	; (8005884 <TFT_init+0xf40>)
 8005726:	f7fe fe91 	bl	800444c <PIN_LOW>
 800572a:	2110      	movs	r1, #16
 800572c:	4855      	ldr	r0, [pc, #340]	; (8005884 <TFT_init+0xf40>)
 800572e:	f7fe fe8d 	bl	800444c <PIN_LOW>
 8005732:	2110      	movs	r1, #16
 8005734:	4853      	ldr	r0, [pc, #332]	; (8005884 <TFT_init+0xf40>)
 8005736:	f7fe fe89 	bl	800444c <PIN_LOW>
 800573a:	2110      	movs	r1, #16
 800573c:	4851      	ldr	r0, [pc, #324]	; (8005884 <TFT_init+0xf40>)
 800573e:	f7fe fe95 	bl	800446c <PIN_HIGH>
 8005742:	2110      	movs	r1, #16
 8005744:	484f      	ldr	r0, [pc, #316]	; (8005884 <TFT_init+0xf40>)
 8005746:	f7fe fe91 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 800574a:	2001      	movs	r0, #1
 800574c:	f7fe fecc 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xD2); // Power Setting [01 44]
 8005750:	2120      	movs	r1, #32
 8005752:	484c      	ldr	r0, [pc, #304]	; (8005884 <TFT_init+0xf40>)
 8005754:	f7fe fe7a 	bl	800444c <PIN_LOW>
 8005758:	2300      	movs	r3, #0
 800575a:	74fb      	strb	r3, [r7, #19]
 800575c:	23d2      	movs	r3, #210	; 0xd2
 800575e:	74bb      	strb	r3, [r7, #18]
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <TFT_init+0xf44>)
 8005762:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005766:	619a      	str	r2, [r3, #24]
 8005768:	4b46      	ldr	r3, [pc, #280]	; (8005884 <TFT_init+0xf40>)
 800576a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800576e:	619a      	str	r2, [r3, #24]
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	4a45      	ldr	r2, [pc, #276]	; (8005888 <TFT_init+0xf44>)
 8005774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005778:	6193      	str	r3, [r2, #24]
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	4a41      	ldr	r2, [pc, #260]	; (8005884 <TFT_init+0xf40>)
 800577e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005782:	6193      	str	r3, [r2, #24]
 8005784:	2110      	movs	r1, #16
 8005786:	483f      	ldr	r0, [pc, #252]	; (8005884 <TFT_init+0xf40>)
 8005788:	f7fe fe60 	bl	800444c <PIN_LOW>
 800578c:	2110      	movs	r1, #16
 800578e:	483d      	ldr	r0, [pc, #244]	; (8005884 <TFT_init+0xf40>)
 8005790:	f7fe fe5c 	bl	800444c <PIN_LOW>
 8005794:	2110      	movs	r1, #16
 8005796:	483b      	ldr	r0, [pc, #236]	; (8005884 <TFT_init+0xf40>)
 8005798:	f7fe fe58 	bl	800444c <PIN_LOW>
 800579c:	2110      	movs	r1, #16
 800579e:	4839      	ldr	r0, [pc, #228]	; (8005884 <TFT_init+0xf40>)
 80057a0:	f7fe fe64 	bl	800446c <PIN_HIGH>
 80057a4:	2110      	movs	r1, #16
 80057a6:	4837      	ldr	r0, [pc, #220]	; (8005884 <TFT_init+0xf40>)
 80057a8:	f7fe fe60 	bl	800446c <PIN_HIGH>
 80057ac:	4b36      	ldr	r3, [pc, #216]	; (8005888 <TFT_init+0xf44>)
 80057ae:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80057b2:	619a      	str	r2, [r3, #24]
 80057b4:	4b33      	ldr	r3, [pc, #204]	; (8005884 <TFT_init+0xf40>)
 80057b6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80057ba:	619a      	str	r2, [r3, #24]
 80057bc:	7cbb      	ldrb	r3, [r7, #18]
 80057be:	4a32      	ldr	r2, [pc, #200]	; (8005888 <TFT_init+0xf44>)
 80057c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057c4:	6193      	str	r3, [r2, #24]
 80057c6:	7cbb      	ldrb	r3, [r7, #18]
 80057c8:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <TFT_init+0xf40>)
 80057ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057ce:	6193      	str	r3, [r2, #24]
 80057d0:	2110      	movs	r1, #16
 80057d2:	482c      	ldr	r0, [pc, #176]	; (8005884 <TFT_init+0xf40>)
 80057d4:	f7fe fe3a 	bl	800444c <PIN_LOW>
 80057d8:	2110      	movs	r1, #16
 80057da:	482a      	ldr	r0, [pc, #168]	; (8005884 <TFT_init+0xf40>)
 80057dc:	f7fe fe36 	bl	800444c <PIN_LOW>
 80057e0:	2110      	movs	r1, #16
 80057e2:	4828      	ldr	r0, [pc, #160]	; (8005884 <TFT_init+0xf40>)
 80057e4:	f7fe fe32 	bl	800444c <PIN_LOW>
 80057e8:	2110      	movs	r1, #16
 80057ea:	4826      	ldr	r0, [pc, #152]	; (8005884 <TFT_init+0xf40>)
 80057ec:	f7fe fe3e 	bl	800446c <PIN_HIGH>
 80057f0:	2110      	movs	r1, #16
 80057f2:	4824      	ldr	r0, [pc, #144]	; (8005884 <TFT_init+0xf40>)
 80057f4:	f7fe fe3a 	bl	800446c <PIN_HIGH>
 80057f8:	2120      	movs	r1, #32
 80057fa:	4822      	ldr	r0, [pc, #136]	; (8005884 <TFT_init+0xf40>)
 80057fc:	f7fe fe36 	bl	800446c <PIN_HIGH>
	WriteData(0x01);
 8005800:	2300      	movs	r3, #0
 8005802:	747b      	strb	r3, [r7, #17]
 8005804:	2301      	movs	r3, #1
 8005806:	743b      	strb	r3, [r7, #16]
 8005808:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <TFT_init+0xf44>)
 800580a:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800580e:	619a      	str	r2, [r3, #24]
 8005810:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <TFT_init+0xf40>)
 8005812:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005816:	619a      	str	r2, [r3, #24]
 8005818:	7c7b      	ldrb	r3, [r7, #17]
 800581a:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <TFT_init+0xf44>)
 800581c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005820:	6193      	str	r3, [r2, #24]
 8005822:	7c7b      	ldrb	r3, [r7, #17]
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <TFT_init+0xf40>)
 8005826:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800582a:	6193      	str	r3, [r2, #24]
 800582c:	2110      	movs	r1, #16
 800582e:	4815      	ldr	r0, [pc, #84]	; (8005884 <TFT_init+0xf40>)
 8005830:	f7fe fe0c 	bl	800444c <PIN_LOW>
 8005834:	2110      	movs	r1, #16
 8005836:	4813      	ldr	r0, [pc, #76]	; (8005884 <TFT_init+0xf40>)
 8005838:	f7fe fe08 	bl	800444c <PIN_LOW>
 800583c:	2110      	movs	r1, #16
 800583e:	4811      	ldr	r0, [pc, #68]	; (8005884 <TFT_init+0xf40>)
 8005840:	f7fe fe04 	bl	800444c <PIN_LOW>
 8005844:	2110      	movs	r1, #16
 8005846:	480f      	ldr	r0, [pc, #60]	; (8005884 <TFT_init+0xf40>)
 8005848:	f7fe fe10 	bl	800446c <PIN_HIGH>
 800584c:	2110      	movs	r1, #16
 800584e:	480d      	ldr	r0, [pc, #52]	; (8005884 <TFT_init+0xf40>)
 8005850:	f7fe fe0c 	bl	800446c <PIN_HIGH>
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <TFT_init+0xf44>)
 8005856:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800585a:	619a      	str	r2, [r3, #24]
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <TFT_init+0xf40>)
 800585e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005862:	619a      	str	r2, [r3, #24]
 8005864:	7c3b      	ldrb	r3, [r7, #16]
 8005866:	4a08      	ldr	r2, [pc, #32]	; (8005888 <TFT_init+0xf44>)
 8005868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800586c:	6193      	str	r3, [r2, #24]
 800586e:	7c3b      	ldrb	r3, [r7, #16]
 8005870:	4a04      	ldr	r2, [pc, #16]	; (8005884 <TFT_init+0xf40>)
 8005872:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005876:	6193      	str	r3, [r2, #24]
 8005878:	2110      	movs	r1, #16
 800587a:	4802      	ldr	r0, [pc, #8]	; (8005884 <TFT_init+0xf40>)
 800587c:	f7fe fde6 	bl	800444c <PIN_LOW>
 8005880:	e004      	b.n	800588c <TFT_init+0xf48>
 8005882:	bf00      	nop
 8005884:	40020400 	.word	0x40020400
 8005888:	40020000 	.word	0x40020000
 800588c:	2110      	movs	r1, #16
 800588e:	48bb      	ldr	r0, [pc, #748]	; (8005b7c <TFT_init+0x1238>)
 8005890:	f7fe fddc 	bl	800444c <PIN_LOW>
 8005894:	2110      	movs	r1, #16
 8005896:	48b9      	ldr	r0, [pc, #740]	; (8005b7c <TFT_init+0x1238>)
 8005898:	f7fe fdd8 	bl	800444c <PIN_LOW>
 800589c:	2110      	movs	r1, #16
 800589e:	48b7      	ldr	r0, [pc, #732]	; (8005b7c <TFT_init+0x1238>)
 80058a0:	f7fe fde4 	bl	800446c <PIN_HIGH>
 80058a4:	2110      	movs	r1, #16
 80058a6:	48b5      	ldr	r0, [pc, #724]	; (8005b7c <TFT_init+0x1238>)
 80058a8:	f7fe fde0 	bl	800446c <PIN_HIGH>
	WriteData(0x04);
 80058ac:	2300      	movs	r3, #0
 80058ae:	73fb      	strb	r3, [r7, #15]
 80058b0:	2304      	movs	r3, #4
 80058b2:	73bb      	strb	r3, [r7, #14]
 80058b4:	4bb2      	ldr	r3, [pc, #712]	; (8005b80 <TFT_init+0x123c>)
 80058b6:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80058ba:	619a      	str	r2, [r3, #24]
 80058bc:	4baf      	ldr	r3, [pc, #700]	; (8005b7c <TFT_init+0x1238>)
 80058be:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80058c2:	619a      	str	r2, [r3, #24]
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	4aae      	ldr	r2, [pc, #696]	; (8005b80 <TFT_init+0x123c>)
 80058c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058cc:	6193      	str	r3, [r2, #24]
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4aaa      	ldr	r2, [pc, #680]	; (8005b7c <TFT_init+0x1238>)
 80058d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80058d6:	6193      	str	r3, [r2, #24]
 80058d8:	2110      	movs	r1, #16
 80058da:	48a8      	ldr	r0, [pc, #672]	; (8005b7c <TFT_init+0x1238>)
 80058dc:	f7fe fdb6 	bl	800444c <PIN_LOW>
 80058e0:	2110      	movs	r1, #16
 80058e2:	48a6      	ldr	r0, [pc, #664]	; (8005b7c <TFT_init+0x1238>)
 80058e4:	f7fe fdb2 	bl	800444c <PIN_LOW>
 80058e8:	2110      	movs	r1, #16
 80058ea:	48a4      	ldr	r0, [pc, #656]	; (8005b7c <TFT_init+0x1238>)
 80058ec:	f7fe fdae 	bl	800444c <PIN_LOW>
 80058f0:	2110      	movs	r1, #16
 80058f2:	48a2      	ldr	r0, [pc, #648]	; (8005b7c <TFT_init+0x1238>)
 80058f4:	f7fe fdba 	bl	800446c <PIN_HIGH>
 80058f8:	2110      	movs	r1, #16
 80058fa:	48a0      	ldr	r0, [pc, #640]	; (8005b7c <TFT_init+0x1238>)
 80058fc:	f7fe fdb6 	bl	800446c <PIN_HIGH>
 8005900:	4b9f      	ldr	r3, [pc, #636]	; (8005b80 <TFT_init+0x123c>)
 8005902:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005906:	619a      	str	r2, [r3, #24]
 8005908:	4b9c      	ldr	r3, [pc, #624]	; (8005b7c <TFT_init+0x1238>)
 800590a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800590e:	619a      	str	r2, [r3, #24]
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	4a9b      	ldr	r2, [pc, #620]	; (8005b80 <TFT_init+0x123c>)
 8005914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005918:	6193      	str	r3, [r2, #24]
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	4a97      	ldr	r2, [pc, #604]	; (8005b7c <TFT_init+0x1238>)
 800591e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005922:	6193      	str	r3, [r2, #24]
 8005924:	2110      	movs	r1, #16
 8005926:	4895      	ldr	r0, [pc, #596]	; (8005b7c <TFT_init+0x1238>)
 8005928:	f7fe fd90 	bl	800444c <PIN_LOW>
 800592c:	2110      	movs	r1, #16
 800592e:	4893      	ldr	r0, [pc, #588]	; (8005b7c <TFT_init+0x1238>)
 8005930:	f7fe fd8c 	bl	800444c <PIN_LOW>
 8005934:	2110      	movs	r1, #16
 8005936:	4891      	ldr	r0, [pc, #580]	; (8005b7c <TFT_init+0x1238>)
 8005938:	f7fe fd88 	bl	800444c <PIN_LOW>
 800593c:	2110      	movs	r1, #16
 800593e:	488f      	ldr	r0, [pc, #572]	; (8005b7c <TFT_init+0x1238>)
 8005940:	f7fe fd94 	bl	800446c <PIN_HIGH>
 8005944:	2110      	movs	r1, #16
 8005946:	488d      	ldr	r0, [pc, #564]	; (8005b7c <TFT_init+0x1238>)
 8005948:	f7fe fd90 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 800594c:	2001      	movs	r0, #1
 800594e:	f7fe fdcb 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xCA); // DGC LUT ???
 8005952:	2120      	movs	r1, #32
 8005954:	4889      	ldr	r0, [pc, #548]	; (8005b7c <TFT_init+0x1238>)
 8005956:	f7fe fd79 	bl	800444c <PIN_LOW>
 800595a:	2300      	movs	r3, #0
 800595c:	737b      	strb	r3, [r7, #13]
 800595e:	23ca      	movs	r3, #202	; 0xca
 8005960:	733b      	strb	r3, [r7, #12]
 8005962:	4b87      	ldr	r3, [pc, #540]	; (8005b80 <TFT_init+0x123c>)
 8005964:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005968:	619a      	str	r2, [r3, #24]
 800596a:	4b84      	ldr	r3, [pc, #528]	; (8005b7c <TFT_init+0x1238>)
 800596c:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	7b7b      	ldrb	r3, [r7, #13]
 8005974:	4a82      	ldr	r2, [pc, #520]	; (8005b80 <TFT_init+0x123c>)
 8005976:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800597a:	6193      	str	r3, [r2, #24]
 800597c:	7b7b      	ldrb	r3, [r7, #13]
 800597e:	4a7f      	ldr	r2, [pc, #508]	; (8005b7c <TFT_init+0x1238>)
 8005980:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005984:	6193      	str	r3, [r2, #24]
 8005986:	2110      	movs	r1, #16
 8005988:	487c      	ldr	r0, [pc, #496]	; (8005b7c <TFT_init+0x1238>)
 800598a:	f7fe fd5f 	bl	800444c <PIN_LOW>
 800598e:	2110      	movs	r1, #16
 8005990:	487a      	ldr	r0, [pc, #488]	; (8005b7c <TFT_init+0x1238>)
 8005992:	f7fe fd5b 	bl	800444c <PIN_LOW>
 8005996:	2110      	movs	r1, #16
 8005998:	4878      	ldr	r0, [pc, #480]	; (8005b7c <TFT_init+0x1238>)
 800599a:	f7fe fd57 	bl	800444c <PIN_LOW>
 800599e:	2110      	movs	r1, #16
 80059a0:	4876      	ldr	r0, [pc, #472]	; (8005b7c <TFT_init+0x1238>)
 80059a2:	f7fe fd63 	bl	800446c <PIN_HIGH>
 80059a6:	2110      	movs	r1, #16
 80059a8:	4874      	ldr	r0, [pc, #464]	; (8005b7c <TFT_init+0x1238>)
 80059aa:	f7fe fd5f 	bl	800446c <PIN_HIGH>
 80059ae:	4b74      	ldr	r3, [pc, #464]	; (8005b80 <TFT_init+0x123c>)
 80059b0:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 80059b4:	619a      	str	r2, [r3, #24]
 80059b6:	4b71      	ldr	r3, [pc, #452]	; (8005b7c <TFT_init+0x1238>)
 80059b8:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80059bc:	619a      	str	r2, [r3, #24]
 80059be:	7b3b      	ldrb	r3, [r7, #12]
 80059c0:	4a6f      	ldr	r2, [pc, #444]	; (8005b80 <TFT_init+0x123c>)
 80059c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059c6:	6193      	str	r3, [r2, #24]
 80059c8:	7b3b      	ldrb	r3, [r7, #12]
 80059ca:	4a6c      	ldr	r2, [pc, #432]	; (8005b7c <TFT_init+0x1238>)
 80059cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059d0:	6193      	str	r3, [r2, #24]
 80059d2:	2110      	movs	r1, #16
 80059d4:	4869      	ldr	r0, [pc, #420]	; (8005b7c <TFT_init+0x1238>)
 80059d6:	f7fe fd39 	bl	800444c <PIN_LOW>
 80059da:	2110      	movs	r1, #16
 80059dc:	4867      	ldr	r0, [pc, #412]	; (8005b7c <TFT_init+0x1238>)
 80059de:	f7fe fd35 	bl	800444c <PIN_LOW>
 80059e2:	2110      	movs	r1, #16
 80059e4:	4865      	ldr	r0, [pc, #404]	; (8005b7c <TFT_init+0x1238>)
 80059e6:	f7fe fd31 	bl	800444c <PIN_LOW>
 80059ea:	2110      	movs	r1, #16
 80059ec:	4863      	ldr	r0, [pc, #396]	; (8005b7c <TFT_init+0x1238>)
 80059ee:	f7fe fd3d 	bl	800446c <PIN_HIGH>
 80059f2:	2110      	movs	r1, #16
 80059f4:	4861      	ldr	r0, [pc, #388]	; (8005b7c <TFT_init+0x1238>)
 80059f6:	f7fe fd39 	bl	800446c <PIN_HIGH>
 80059fa:	2120      	movs	r1, #32
 80059fc:	485f      	ldr	r0, [pc, #380]	; (8005b7c <TFT_init+0x1238>)
 80059fe:	f7fe fd35 	bl	800446c <PIN_HIGH>
	WriteData(0x00);
 8005a02:	2300      	movs	r3, #0
 8005a04:	72fb      	strb	r3, [r7, #11]
 8005a06:	2300      	movs	r3, #0
 8005a08:	72bb      	strb	r3, [r7, #10]
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	; (8005b80 <TFT_init+0x123c>)
 8005a0c:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	4b5a      	ldr	r3, [pc, #360]	; (8005b7c <TFT_init+0x1238>)
 8005a14:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005a18:	619a      	str	r2, [r3, #24]
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <TFT_init+0x123c>)
 8005a1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a22:	6193      	str	r3, [r2, #24]
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	4a55      	ldr	r2, [pc, #340]	; (8005b7c <TFT_init+0x1238>)
 8005a28:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a2c:	6193      	str	r3, [r2, #24]
 8005a2e:	2110      	movs	r1, #16
 8005a30:	4852      	ldr	r0, [pc, #328]	; (8005b7c <TFT_init+0x1238>)
 8005a32:	f7fe fd0b 	bl	800444c <PIN_LOW>
 8005a36:	2110      	movs	r1, #16
 8005a38:	4850      	ldr	r0, [pc, #320]	; (8005b7c <TFT_init+0x1238>)
 8005a3a:	f7fe fd07 	bl	800444c <PIN_LOW>
 8005a3e:	2110      	movs	r1, #16
 8005a40:	484e      	ldr	r0, [pc, #312]	; (8005b7c <TFT_init+0x1238>)
 8005a42:	f7fe fd03 	bl	800444c <PIN_LOW>
 8005a46:	2110      	movs	r1, #16
 8005a48:	484c      	ldr	r0, [pc, #304]	; (8005b7c <TFT_init+0x1238>)
 8005a4a:	f7fe fd0f 	bl	800446c <PIN_HIGH>
 8005a4e:	2110      	movs	r1, #16
 8005a50:	484a      	ldr	r0, [pc, #296]	; (8005b7c <TFT_init+0x1238>)
 8005a52:	f7fe fd0b 	bl	800446c <PIN_HIGH>
 8005a56:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <TFT_init+0x123c>)
 8005a58:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005a5c:	619a      	str	r2, [r3, #24]
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <TFT_init+0x1238>)
 8005a60:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005a64:	619a      	str	r2, [r3, #24]
 8005a66:	7abb      	ldrb	r3, [r7, #10]
 8005a68:	4a45      	ldr	r2, [pc, #276]	; (8005b80 <TFT_init+0x123c>)
 8005a6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a6e:	6193      	str	r3, [r2, #24]
 8005a70:	7abb      	ldrb	r3, [r7, #10]
 8005a72:	4a42      	ldr	r2, [pc, #264]	; (8005b7c <TFT_init+0x1238>)
 8005a74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a78:	6193      	str	r3, [r2, #24]
 8005a7a:	2110      	movs	r1, #16
 8005a7c:	483f      	ldr	r0, [pc, #252]	; (8005b7c <TFT_init+0x1238>)
 8005a7e:	f7fe fce5 	bl	800444c <PIN_LOW>
 8005a82:	2110      	movs	r1, #16
 8005a84:	483d      	ldr	r0, [pc, #244]	; (8005b7c <TFT_init+0x1238>)
 8005a86:	f7fe fce1 	bl	800444c <PIN_LOW>
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	483b      	ldr	r0, [pc, #236]	; (8005b7c <TFT_init+0x1238>)
 8005a8e:	f7fe fcdd 	bl	800444c <PIN_LOW>
 8005a92:	2110      	movs	r1, #16
 8005a94:	4839      	ldr	r0, [pc, #228]	; (8005b7c <TFT_init+0x1238>)
 8005a96:	f7fe fce9 	bl	800446c <PIN_HIGH>
 8005a9a:	2110      	movs	r1, #16
 8005a9c:	4837      	ldr	r0, [pc, #220]	; (8005b7c <TFT_init+0x1238>)
 8005a9e:	f7fe fce5 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	f7fe fd20 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0xEA);
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	4834      	ldr	r0, [pc, #208]	; (8005b7c <TFT_init+0x1238>)
 8005aac:	f7fe fcce 	bl	800444c <PIN_LOW>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	727b      	strb	r3, [r7, #9]
 8005ab4:	23ea      	movs	r3, #234	; 0xea
 8005ab6:	723b      	strb	r3, [r7, #8]
 8005ab8:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <TFT_init+0x123c>)
 8005aba:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005abe:	619a      	str	r2, [r3, #24]
 8005ac0:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <TFT_init+0x1238>)
 8005ac2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005ac6:	619a      	str	r2, [r3, #24]
 8005ac8:	7a7b      	ldrb	r3, [r7, #9]
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <TFT_init+0x123c>)
 8005acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ad0:	6193      	str	r3, [r2, #24]
 8005ad2:	7a7b      	ldrb	r3, [r7, #9]
 8005ad4:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <TFT_init+0x1238>)
 8005ad6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ada:	6193      	str	r3, [r2, #24]
 8005adc:	2110      	movs	r1, #16
 8005ade:	4827      	ldr	r0, [pc, #156]	; (8005b7c <TFT_init+0x1238>)
 8005ae0:	f7fe fcb4 	bl	800444c <PIN_LOW>
 8005ae4:	2110      	movs	r1, #16
 8005ae6:	4825      	ldr	r0, [pc, #148]	; (8005b7c <TFT_init+0x1238>)
 8005ae8:	f7fe fcb0 	bl	800444c <PIN_LOW>
 8005aec:	2110      	movs	r1, #16
 8005aee:	4823      	ldr	r0, [pc, #140]	; (8005b7c <TFT_init+0x1238>)
 8005af0:	f7fe fcac 	bl	800444c <PIN_LOW>
 8005af4:	2110      	movs	r1, #16
 8005af6:	4821      	ldr	r0, [pc, #132]	; (8005b7c <TFT_init+0x1238>)
 8005af8:	f7fe fcb8 	bl	800446c <PIN_HIGH>
 8005afc:	2110      	movs	r1, #16
 8005afe:	481f      	ldr	r0, [pc, #124]	; (8005b7c <TFT_init+0x1238>)
 8005b00:	f7fe fcb4 	bl	800446c <PIN_HIGH>
 8005b04:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <TFT_init+0x123c>)
 8005b06:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005b0a:	619a      	str	r2, [r3, #24]
 8005b0c:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <TFT_init+0x1238>)
 8005b0e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005b12:	619a      	str	r2, [r3, #24]
 8005b14:	7a3b      	ldrb	r3, [r7, #8]
 8005b16:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <TFT_init+0x123c>)
 8005b18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b1c:	6193      	str	r3, [r2, #24]
 8005b1e:	7a3b      	ldrb	r3, [r7, #8]
 8005b20:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <TFT_init+0x1238>)
 8005b22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b26:	6193      	str	r3, [r2, #24]
 8005b28:	2110      	movs	r1, #16
 8005b2a:	4814      	ldr	r0, [pc, #80]	; (8005b7c <TFT_init+0x1238>)
 8005b2c:	f7fe fc8e 	bl	800444c <PIN_LOW>
 8005b30:	2110      	movs	r1, #16
 8005b32:	4812      	ldr	r0, [pc, #72]	; (8005b7c <TFT_init+0x1238>)
 8005b34:	f7fe fc8a 	bl	800444c <PIN_LOW>
 8005b38:	2110      	movs	r1, #16
 8005b3a:	4810      	ldr	r0, [pc, #64]	; (8005b7c <TFT_init+0x1238>)
 8005b3c:	f7fe fc86 	bl	800444c <PIN_LOW>
 8005b40:	2110      	movs	r1, #16
 8005b42:	480e      	ldr	r0, [pc, #56]	; (8005b7c <TFT_init+0x1238>)
 8005b44:	f7fe fc92 	bl	800446c <PIN_HIGH>
 8005b48:	2110      	movs	r1, #16
 8005b4a:	480c      	ldr	r0, [pc, #48]	; (8005b7c <TFT_init+0x1238>)
 8005b4c:	f7fe fc8e 	bl	800446c <PIN_HIGH>
 8005b50:	2120      	movs	r1, #32
 8005b52:	480a      	ldr	r0, [pc, #40]	; (8005b7c <TFT_init+0x1238>)
 8005b54:	f7fe fc8a 	bl	800446c <PIN_HIGH>
	WriteData(0x80);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	71fb      	strb	r3, [r7, #7]
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	71bb      	strb	r3, [r7, #6]
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <TFT_init+0x123c>)
 8005b62:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005b66:	619a      	str	r2, [r3, #24]
 8005b68:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <TFT_init+0x1238>)
 8005b6a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005b6e:	619a      	str	r2, [r3, #24]
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <TFT_init+0x123c>)
 8005b74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b78:	e004      	b.n	8005b84 <TFT_init+0x1240>
 8005b7a:	bf00      	nop
 8005b7c:	40020400 	.word	0x40020400
 8005b80:	40020000 	.word	0x40020000
 8005b84:	6193      	str	r3, [r2, #24]
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	4a7d      	ldr	r2, [pc, #500]	; (8005d80 <TFT_init+0x143c>)
 8005b8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b8e:	6193      	str	r3, [r2, #24]
 8005b90:	2110      	movs	r1, #16
 8005b92:	487b      	ldr	r0, [pc, #492]	; (8005d80 <TFT_init+0x143c>)
 8005b94:	f7fe fc5a 	bl	800444c <PIN_LOW>
 8005b98:	2110      	movs	r1, #16
 8005b9a:	4879      	ldr	r0, [pc, #484]	; (8005d80 <TFT_init+0x143c>)
 8005b9c:	f7fe fc56 	bl	800444c <PIN_LOW>
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	4877      	ldr	r0, [pc, #476]	; (8005d80 <TFT_init+0x143c>)
 8005ba4:	f7fe fc52 	bl	800444c <PIN_LOW>
 8005ba8:	2110      	movs	r1, #16
 8005baa:	4875      	ldr	r0, [pc, #468]	; (8005d80 <TFT_init+0x143c>)
 8005bac:	f7fe fc5e 	bl	800446c <PIN_HIGH>
 8005bb0:	2110      	movs	r1, #16
 8005bb2:	4873      	ldr	r0, [pc, #460]	; (8005d80 <TFT_init+0x143c>)
 8005bb4:	f7fe fc5a 	bl	800446c <PIN_HIGH>
 8005bb8:	4b72      	ldr	r3, [pc, #456]	; (8005d84 <TFT_init+0x1440>)
 8005bba:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005bbe:	619a      	str	r2, [r3, #24]
 8005bc0:	4b6f      	ldr	r3, [pc, #444]	; (8005d80 <TFT_init+0x143c>)
 8005bc2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005bc6:	619a      	str	r2, [r3, #24]
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	4a6e      	ldr	r2, [pc, #440]	; (8005d84 <TFT_init+0x1440>)
 8005bcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bd0:	6193      	str	r3, [r2, #24]
 8005bd2:	79bb      	ldrb	r3, [r7, #6]
 8005bd4:	4a6a      	ldr	r2, [pc, #424]	; (8005d80 <TFT_init+0x143c>)
 8005bd6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005bda:	6193      	str	r3, [r2, #24]
 8005bdc:	2110      	movs	r1, #16
 8005bde:	4868      	ldr	r0, [pc, #416]	; (8005d80 <TFT_init+0x143c>)
 8005be0:	f7fe fc34 	bl	800444c <PIN_LOW>
 8005be4:	2110      	movs	r1, #16
 8005be6:	4866      	ldr	r0, [pc, #408]	; (8005d80 <TFT_init+0x143c>)
 8005be8:	f7fe fc30 	bl	800444c <PIN_LOW>
 8005bec:	2110      	movs	r1, #16
 8005bee:	4864      	ldr	r0, [pc, #400]	; (8005d80 <TFT_init+0x143c>)
 8005bf0:	f7fe fc2c 	bl	800444c <PIN_LOW>
 8005bf4:	2110      	movs	r1, #16
 8005bf6:	4862      	ldr	r0, [pc, #392]	; (8005d80 <TFT_init+0x143c>)
 8005bf8:	f7fe fc38 	bl	800446c <PIN_HIGH>
 8005bfc:	2110      	movs	r1, #16
 8005bfe:	4860      	ldr	r0, [pc, #384]	; (8005d80 <TFT_init+0x143c>)
 8005c00:	f7fe fc34 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8005c04:	2001      	movs	r0, #1
 8005c06:	f7fe fc6f 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0x11);
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	485c      	ldr	r0, [pc, #368]	; (8005d80 <TFT_init+0x143c>)
 8005c0e:	f7fe fc1d 	bl	800444c <PIN_LOW>
 8005c12:	2300      	movs	r3, #0
 8005c14:	717b      	strb	r3, [r7, #5]
 8005c16:	2311      	movs	r3, #17
 8005c18:	713b      	strb	r3, [r7, #4]
 8005c1a:	4b5a      	ldr	r3, [pc, #360]	; (8005d84 <TFT_init+0x1440>)
 8005c1c:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	4b57      	ldr	r3, [pc, #348]	; (8005d80 <TFT_init+0x143c>)
 8005c24:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005c28:	619a      	str	r2, [r3, #24]
 8005c2a:	797b      	ldrb	r3, [r7, #5]
 8005c2c:	4a55      	ldr	r2, [pc, #340]	; (8005d84 <TFT_init+0x1440>)
 8005c2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c32:	6193      	str	r3, [r2, #24]
 8005c34:	797b      	ldrb	r3, [r7, #5]
 8005c36:	4a52      	ldr	r2, [pc, #328]	; (8005d80 <TFT_init+0x143c>)
 8005c38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c3c:	6193      	str	r3, [r2, #24]
 8005c3e:	2110      	movs	r1, #16
 8005c40:	484f      	ldr	r0, [pc, #316]	; (8005d80 <TFT_init+0x143c>)
 8005c42:	f7fe fc03 	bl	800444c <PIN_LOW>
 8005c46:	2110      	movs	r1, #16
 8005c48:	484d      	ldr	r0, [pc, #308]	; (8005d80 <TFT_init+0x143c>)
 8005c4a:	f7fe fbff 	bl	800444c <PIN_LOW>
 8005c4e:	2110      	movs	r1, #16
 8005c50:	484b      	ldr	r0, [pc, #300]	; (8005d80 <TFT_init+0x143c>)
 8005c52:	f7fe fbfb 	bl	800444c <PIN_LOW>
 8005c56:	2110      	movs	r1, #16
 8005c58:	4849      	ldr	r0, [pc, #292]	; (8005d80 <TFT_init+0x143c>)
 8005c5a:	f7fe fc07 	bl	800446c <PIN_HIGH>
 8005c5e:	2110      	movs	r1, #16
 8005c60:	4847      	ldr	r0, [pc, #284]	; (8005d80 <TFT_init+0x143c>)
 8005c62:	f7fe fc03 	bl	800446c <PIN_HIGH>
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <TFT_init+0x1440>)
 8005c68:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005c6c:	619a      	str	r2, [r3, #24]
 8005c6e:	4b44      	ldr	r3, [pc, #272]	; (8005d80 <TFT_init+0x143c>)
 8005c70:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005c74:	619a      	str	r2, [r3, #24]
 8005c76:	793b      	ldrb	r3, [r7, #4]
 8005c78:	4a42      	ldr	r2, [pc, #264]	; (8005d84 <TFT_init+0x1440>)
 8005c7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c7e:	6193      	str	r3, [r2, #24]
 8005c80:	793b      	ldrb	r3, [r7, #4]
 8005c82:	4a3f      	ldr	r2, [pc, #252]	; (8005d80 <TFT_init+0x143c>)
 8005c84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c88:	6193      	str	r3, [r2, #24]
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	483c      	ldr	r0, [pc, #240]	; (8005d80 <TFT_init+0x143c>)
 8005c8e:	f7fe fbdd 	bl	800444c <PIN_LOW>
 8005c92:	2110      	movs	r1, #16
 8005c94:	483a      	ldr	r0, [pc, #232]	; (8005d80 <TFT_init+0x143c>)
 8005c96:	f7fe fbd9 	bl	800444c <PIN_LOW>
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	4838      	ldr	r0, [pc, #224]	; (8005d80 <TFT_init+0x143c>)
 8005c9e:	f7fe fbd5 	bl	800444c <PIN_LOW>
 8005ca2:	2110      	movs	r1, #16
 8005ca4:	4836      	ldr	r0, [pc, #216]	; (8005d80 <TFT_init+0x143c>)
 8005ca6:	f7fe fbe1 	bl	800446c <PIN_HIGH>
 8005caa:	2110      	movs	r1, #16
 8005cac:	4834      	ldr	r0, [pc, #208]	; (8005d80 <TFT_init+0x143c>)
 8005cae:	f7fe fbdd 	bl	800446c <PIN_HIGH>
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	4832      	ldr	r0, [pc, #200]	; (8005d80 <TFT_init+0x143c>)
 8005cb6:	f7fe fbd9 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(150);
 8005cba:	2096      	movs	r0, #150	; 0x96
 8005cbc:	f7fe fc14 	bl	80044e8 <TFT_Delay_us>
	WriteCmd(0x29);
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	482f      	ldr	r0, [pc, #188]	; (8005d80 <TFT_init+0x143c>)
 8005cc4:	f7fe fbc2 	bl	800444c <PIN_LOW>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	70fb      	strb	r3, [r7, #3]
 8005ccc:	2329      	movs	r3, #41	; 0x29
 8005cce:	70bb      	strb	r3, [r7, #2]
 8005cd0:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <TFT_init+0x1440>)
 8005cd2:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005cd6:	619a      	str	r2, [r3, #24]
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <TFT_init+0x143c>)
 8005cda:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005cde:	619a      	str	r2, [r3, #24]
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <TFT_init+0x1440>)
 8005ce4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ce8:	6193      	str	r3, [r2, #24]
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <TFT_init+0x143c>)
 8005cee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cf2:	6193      	str	r3, [r2, #24]
 8005cf4:	2110      	movs	r1, #16
 8005cf6:	4822      	ldr	r0, [pc, #136]	; (8005d80 <TFT_init+0x143c>)
 8005cf8:	f7fe fba8 	bl	800444c <PIN_LOW>
 8005cfc:	2110      	movs	r1, #16
 8005cfe:	4820      	ldr	r0, [pc, #128]	; (8005d80 <TFT_init+0x143c>)
 8005d00:	f7fe fba4 	bl	800444c <PIN_LOW>
 8005d04:	2110      	movs	r1, #16
 8005d06:	481e      	ldr	r0, [pc, #120]	; (8005d80 <TFT_init+0x143c>)
 8005d08:	f7fe fba0 	bl	800444c <PIN_LOW>
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	481c      	ldr	r0, [pc, #112]	; (8005d80 <TFT_init+0x143c>)
 8005d10:	f7fe fbac 	bl	800446c <PIN_HIGH>
 8005d14:	2110      	movs	r1, #16
 8005d16:	481a      	ldr	r0, [pc, #104]	; (8005d80 <TFT_init+0x143c>)
 8005d18:	f7fe fba8 	bl	800446c <PIN_HIGH>
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <TFT_init+0x1440>)
 8005d1e:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 8005d22:	619a      	str	r2, [r3, #24]
 8005d24:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <TFT_init+0x143c>)
 8005d26:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8005d2a:	619a      	str	r2, [r3, #24]
 8005d2c:	78bb      	ldrb	r3, [r7, #2]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TFT_init+0x1440>)
 8005d30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d34:	6193      	str	r3, [r2, #24]
 8005d36:	78bb      	ldrb	r3, [r7, #2]
 8005d38:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <TFT_init+0x143c>)
 8005d3a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d3e:	6193      	str	r3, [r2, #24]
 8005d40:	2110      	movs	r1, #16
 8005d42:	480f      	ldr	r0, [pc, #60]	; (8005d80 <TFT_init+0x143c>)
 8005d44:	f7fe fb82 	bl	800444c <PIN_LOW>
 8005d48:	2110      	movs	r1, #16
 8005d4a:	480d      	ldr	r0, [pc, #52]	; (8005d80 <TFT_init+0x143c>)
 8005d4c:	f7fe fb7e 	bl	800444c <PIN_LOW>
 8005d50:	2110      	movs	r1, #16
 8005d52:	480b      	ldr	r0, [pc, #44]	; (8005d80 <TFT_init+0x143c>)
 8005d54:	f7fe fb7a 	bl	800444c <PIN_LOW>
 8005d58:	2110      	movs	r1, #16
 8005d5a:	4809      	ldr	r0, [pc, #36]	; (8005d80 <TFT_init+0x143c>)
 8005d5c:	f7fe fb86 	bl	800446c <PIN_HIGH>
 8005d60:	2110      	movs	r1, #16
 8005d62:	4807      	ldr	r0, [pc, #28]	; (8005d80 <TFT_init+0x143c>)
 8005d64:	f7fe fb82 	bl	800446c <PIN_HIGH>
 8005d68:	2120      	movs	r1, #32
 8005d6a:	4805      	ldr	r0, [pc, #20]	; (8005d80 <TFT_init+0x143c>)
 8005d6c:	f7fe fb7e 	bl	800446c <PIN_HIGH>
	TFT_Delay_us(1);
 8005d70:	2001      	movs	r0, #1
 8005d72:	f7fe fbb9 	bl	80044e8 <TFT_Delay_us>
}
 8005d76:	bf00      	nop
 8005d78:	3740      	adds	r7, #64	; 0x40
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40020400 	.word	0x40020400
 8005d84:	40020000 	.word	0x40020000

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	; (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	; (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f000 f8e4 	bl	8005f68 <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	0800605c 	.word	0x0800605c
 8005dc4:	0800605c 	.word	0x0800605c
 8005dc8:	0800605c 	.word	0x0800605c
 8005dcc:	08006060 	.word	0x08006060

08005dd0 <__retarget_lock_acquire_recursive>:
 8005dd0:	4770      	bx	lr

08005dd2 <__retarget_lock_release_recursive>:
 8005dd2:	4770      	bx	lr

08005dd4 <memset>:
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d100      	bne.n	8005dde <memset+0xa>
 8005ddc:	4770      	bx	lr
 8005dde:	f803 1b01 	strb.w	r1, [r3], #1
 8005de2:	e7f9      	b.n	8005dd8 <memset+0x4>

08005de4 <cleanup_glue>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	6809      	ldr	r1, [r1, #0]
 8005dea:	4605      	mov	r5, r0
 8005dec:	b109      	cbz	r1, 8005df2 <cleanup_glue+0xe>
 8005dee:	f7ff fff9 	bl	8005de4 <cleanup_glue>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dfa:	f000 b869 	b.w	8005ed0 <_free_r>
	...

08005e00 <_reclaim_reent>:
 8005e00:	4b2c      	ldr	r3, [pc, #176]	; (8005eb4 <_reclaim_reent+0xb4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4283      	cmp	r3, r0
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	4604      	mov	r4, r0
 8005e0a:	d051      	beq.n	8005eb0 <_reclaim_reent+0xb0>
 8005e0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e0e:	b143      	cbz	r3, 8005e22 <_reclaim_reent+0x22>
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d14a      	bne.n	8005eac <_reclaim_reent+0xac>
 8005e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	b111      	cbz	r1, 8005e22 <_reclaim_reent+0x22>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 f857 	bl	8005ed0 <_free_r>
 8005e22:	6961      	ldr	r1, [r4, #20]
 8005e24:	b111      	cbz	r1, 8005e2c <_reclaim_reent+0x2c>
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 f852 	bl	8005ed0 <_free_r>
 8005e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e2e:	b111      	cbz	r1, 8005e36 <_reclaim_reent+0x36>
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 f84d 	bl	8005ed0 <_free_r>
 8005e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e38:	b111      	cbz	r1, 8005e40 <_reclaim_reent+0x40>
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 f848 	bl	8005ed0 <_free_r>
 8005e40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005e42:	b111      	cbz	r1, 8005e4a <_reclaim_reent+0x4a>
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 f843 	bl	8005ed0 <_free_r>
 8005e4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005e4c:	b111      	cbz	r1, 8005e54 <_reclaim_reent+0x54>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f83e 	bl	8005ed0 <_free_r>
 8005e54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005e56:	b111      	cbz	r1, 8005e5e <_reclaim_reent+0x5e>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f839 	bl	8005ed0 <_free_r>
 8005e5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005e60:	b111      	cbz	r1, 8005e68 <_reclaim_reent+0x68>
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f834 	bl	8005ed0 <_free_r>
 8005e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e6a:	b111      	cbz	r1, 8005e72 <_reclaim_reent+0x72>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 f82f 	bl	8005ed0 <_free_r>
 8005e72:	69a3      	ldr	r3, [r4, #24]
 8005e74:	b1e3      	cbz	r3, 8005eb0 <_reclaim_reent+0xb0>
 8005e76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4798      	blx	r3
 8005e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e7e:	b1b9      	cbz	r1, 8005eb0 <_reclaim_reent+0xb0>
 8005e80:	4620      	mov	r0, r4
 8005e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e86:	f7ff bfad 	b.w	8005de4 <cleanup_glue>
 8005e8a:	5949      	ldr	r1, [r1, r5]
 8005e8c:	b941      	cbnz	r1, 8005ea0 <_reclaim_reent+0xa0>
 8005e8e:	3504      	adds	r5, #4
 8005e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e92:	2d80      	cmp	r5, #128	; 0x80
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	d1f8      	bne.n	8005e8a <_reclaim_reent+0x8a>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f819 	bl	8005ed0 <_free_r>
 8005e9e:	e7ba      	b.n	8005e16 <_reclaim_reent+0x16>
 8005ea0:	680e      	ldr	r6, [r1, #0]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f814 	bl	8005ed0 <_free_r>
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	e7ef      	b.n	8005e8c <_reclaim_reent+0x8c>
 8005eac:	2500      	movs	r5, #0
 8005eae:	e7ef      	b.n	8005e90 <_reclaim_reent+0x90>
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bf89 	b.w	8005dd0 <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	20004224 	.word	0x20004224

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	; (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff bf84 	b.w	8005dd2 <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	20004224 	.word	0x20004224

08005ed0 <_free_r>:
 8005ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	d044      	beq.n	8005f60 <_free_r+0x90>
 8005ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eda:	9001      	str	r0, [sp, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f1a1 0404 	sub.w	r4, r1, #4
 8005ee2:	bfb8      	it	lt
 8005ee4:	18e4      	addlt	r4, r4, r3
 8005ee6:	f7ff ffe7 	bl	8005eb8 <__malloc_lock>
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <_free_r+0x94>)
 8005eec:	9801      	ldr	r0, [sp, #4]
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	b933      	cbnz	r3, 8005f00 <_free_r+0x30>
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6014      	str	r4, [r2, #0]
 8005ef6:	b003      	add	sp, #12
 8005ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005efc:	f7ff bfe2 	b.w	8005ec4 <__malloc_unlock>
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	d908      	bls.n	8005f16 <_free_r+0x46>
 8005f04:	6825      	ldr	r5, [r4, #0]
 8005f06:	1961      	adds	r1, r4, r5
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf01      	itttt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	1949      	addeq	r1, r1, r5
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	e7ed      	b.n	8005ef2 <_free_r+0x22>
 8005f16:	461a      	mov	r2, r3
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b10b      	cbz	r3, 8005f20 <_free_r+0x50>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x46>
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	1855      	adds	r5, r2, r1
 8005f24:	42a5      	cmp	r5, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x70>
 8005f28:	6824      	ldr	r4, [r4, #0]
 8005f2a:	4421      	add	r1, r4
 8005f2c:	1854      	adds	r4, r2, r1
 8005f2e:	42a3      	cmp	r3, r4
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	d1e0      	bne.n	8005ef6 <_free_r+0x26>
 8005f34:	681c      	ldr	r4, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6053      	str	r3, [r2, #4]
 8005f3a:	4421      	add	r1, r4
 8005f3c:	6011      	str	r1, [r2, #0]
 8005f3e:	e7da      	b.n	8005ef6 <_free_r+0x26>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x78>
 8005f42:	230c      	movs	r3, #12
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	e7d6      	b.n	8005ef6 <_free_r+0x26>
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	1961      	adds	r1, r4, r5
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf04      	itt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	6063      	str	r3, [r4, #4]
 8005f56:	bf04      	itt	eq
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	6054      	str	r4, [r2, #4]
 8005f5e:	e7ca      	b.n	8005ef6 <_free_r+0x26>
 8005f60:	b003      	add	sp, #12
 8005f62:	bd30      	pop	{r4, r5, pc}
 8005f64:	20004228 	.word	0x20004228

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
